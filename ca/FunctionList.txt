ca.h
void ca_print() //ca consensus start function 

ca_transaction.h
void block_print(struct blkinfo *bi) //Block information printing 
void blk_print(struct blkdb *db) //Blockchain information printing 
void NetMessage(const void *inData, void *outData) //Transaction data processing function 
int CreateTx(const char* From, const char * To, const char * amt, const char *ip, uint32_t needVerifyPreHashCount, double minerFees);//Initiate transaction 
struct blkinfo * CreateBlock(void * inData, void *outData) //Generate block function 
bool AddBlock(const CBlock & cblock, bool isSync) //Block join chain 
CTransaction CreateWorkTx(const CTransaction & tx, int extra_award = 0) //Generate reward transactions 
void Init() //caTransaction initialization 
void InitAccount(accountinfo *acc)//Account initialization 
void GetDefault58Addr(char *buf, size_t len) //Get the system default account address 
void *DataSynch(void *arg)  //Data synchronization thread function 
cstring *ser_reqblkinfo(const struct blkdb *db) //Serialized block synchronization request data 

ca_base58.h
bool GetBase58Addr(char *b58c, size_t *b58c_sz, uint8_t ver, const void *data, size_t datasz); //Calculate base58 address based on public key 
ca_cstr.h
C language implementation  cstring Realize the operation of the string, and related functions 
ca_global.h
Global variables and macro definitions 

extern struct chain_info g_chain_metadata; //Initialize block handle usage 
extern ECDSA<ECP, SHA1>::PrivateKey g_privateKey; //Global variable to store private key 
extern ECDSA<ECP, SHA1>::PublicKey g_publicKey; //Global variables store the public key 
extern accountinfo g_AccountInfo; //Global variables store account information 
extern bool g_phone; //Distinguish mobile phone and PC 
extern pthread_rwlock_t db_rwlock; //Thread lock 
extern pthread_rwlock_t tx_rwlock; //Thread lock 

DECIMAL_NUM  //Number of decimal places for trading 
PRE_BLOCK_VALID_HEIGHT //The number of blocks after the most significant block 
SYNC_DATA  //Synchronization switch 
SYNC_DATA_COUNT //Number of synchronized blocks at a time 
ENCOURAGE_TX  //Reward transaction switch 
TXHASHDB_SWITCH //Store transaction switch during transaction 

ca_message.h
cstring *message_str(const unsigned char netmagic[4], const char *command_, const void *data, uint32_t data_len); //Generate network block data packets according to command_ command 

ca_serialize.h
Serialization and deserialization functions of variable types 

ca_hexcode.h 
Hexadecimal and string conversion functions 

ca_parr.h
Parr type related functions, store transaction data information 

Crypto_ECDSA.h

Account management related functions 