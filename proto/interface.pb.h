// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_interface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_interface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_interface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[84]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_interface_2eproto;
class BlockInfo;
class BlockInfoDefaultTypeInternal;
extern BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
class BlockInfoItem;
class BlockInfoItemDefaultTypeInternal;
extern BlockInfoItemDefaultTypeInternal _BlockInfoItem_default_instance_;
class BlockInfoOutAddr;
class BlockInfoOutAddrDefaultTypeInternal;
extern BlockInfoOutAddrDefaultTypeInternal _BlockInfoOutAddr_default_instance_;
class CreateDeviceMultiTxMsgReq;
class CreateDeviceMultiTxMsgReqDefaultTypeInternal;
extern CreateDeviceMultiTxMsgReqDefaultTypeInternal _CreateDeviceMultiTxMsgReq_default_instance_;
class CreateDevicePledgeTxMsgReq;
class CreateDevicePledgeTxMsgReqDefaultTypeInternal;
extern CreateDevicePledgeTxMsgReqDefaultTypeInternal _CreateDevicePledgeTxMsgReq_default_instance_;
class CreateDeviceRedeemTxReq;
class CreateDeviceRedeemTxReqDefaultTypeInternal;
extern CreateDeviceRedeemTxReqDefaultTypeInternal _CreateDeviceRedeemTxReq_default_instance_;
class CreateDeviceTxMsgReq;
class CreateDeviceTxMsgReqDefaultTypeInternal;
extern CreateDeviceTxMsgReqDefaultTypeInternal _CreateDeviceTxMsgReq_default_instance_;
class CreateMultiTxMsgAck;
class CreateMultiTxMsgAckDefaultTypeInternal;
extern CreateMultiTxMsgAckDefaultTypeInternal _CreateMultiTxMsgAck_default_instance_;
class CreateMultiTxMsgReq;
class CreateMultiTxMsgReqDefaultTypeInternal;
extern CreateMultiTxMsgReqDefaultTypeInternal _CreateMultiTxMsgReq_default_instance_;
class CreatePledgeTxMsgAck;
class CreatePledgeTxMsgAckDefaultTypeInternal;
extern CreatePledgeTxMsgAckDefaultTypeInternal _CreatePledgeTxMsgAck_default_instance_;
class CreatePledgeTxMsgReq;
class CreatePledgeTxMsgReqDefaultTypeInternal;
extern CreatePledgeTxMsgReqDefaultTypeInternal _CreatePledgeTxMsgReq_default_instance_;
class CreateRedeemTxMsgAck;
class CreateRedeemTxMsgAckDefaultTypeInternal;
extern CreateRedeemTxMsgAckDefaultTypeInternal _CreateRedeemTxMsgAck_default_instance_;
class CreateRedeemTxMsgReq;
class CreateRedeemTxMsgReqDefaultTypeInternal;
extern CreateRedeemTxMsgReqDefaultTypeInternal _CreateRedeemTxMsgReq_default_instance_;
class CreateTxMsgAck;
class CreateTxMsgAckDefaultTypeInternal;
extern CreateTxMsgAckDefaultTypeInternal _CreateTxMsgAck_default_instance_;
class CreateTxMsgReq;
class CreateTxMsgReqDefaultTypeInternal;
extern CreateTxMsgReqDefaultTypeInternal _CreateTxMsgReq_default_instance_;
class DataTransReq;
class DataTransReqDefaultTypeInternal;
extern DataTransReqDefaultTypeInternal _DataTransReq_default_instance_;
class DevPrivateKeyInfo;
class DevPrivateKeyInfoDefaultTypeInternal;
extern DevPrivateKeyInfoDefaultTypeInternal _DevPrivateKeyInfo_default_instance_;
class Device2AllDevReq;
class Device2AllDevReqDefaultTypeInternal;
extern Device2AllDevReqDefaultTypeInternal _Device2AllDevReq_default_instance_;
class Device2PubNetRandomReq;
class Device2PubNetRandomReqDefaultTypeInternal;
extern Device2PubNetRandomReqDefaultTypeInternal _Device2PubNetRandomReq_default_instance_;
class Feedback2DeviceAck;
class Feedback2DeviceAckDefaultTypeInternal;
extern Feedback2DeviceAckDefaultTypeInternal _Feedback2DeviceAck_default_instance_;
class GetAddrInfoAck;
class GetAddrInfoAckDefaultTypeInternal;
extern GetAddrInfoAckDefaultTypeInternal _GetAddrInfoAck_default_instance_;
class GetAddrInfoReq;
class GetAddrInfoReqDefaultTypeInternal;
extern GetAddrInfoReqDefaultTypeInternal _GetAddrInfoReq_default_instance_;
class GetAmountAck;
class GetAmountAckDefaultTypeInternal;
extern GetAmountAckDefaultTypeInternal _GetAmountAck_default_instance_;
class GetAmountReq;
class GetAmountReqDefaultTypeInternal;
extern GetAmountReqDefaultTypeInternal _GetAmountReq_default_instance_;
class GetBlockInfoAck;
class GetBlockInfoAckDefaultTypeInternal;
extern GetBlockInfoAckDefaultTypeInternal _GetBlockInfoAck_default_instance_;
class GetBlockInfoDetailAck;
class GetBlockInfoDetailAckDefaultTypeInternal;
extern GetBlockInfoDetailAckDefaultTypeInternal _GetBlockInfoDetailAck_default_instance_;
class GetBlockInfoDetailReq;
class GetBlockInfoDetailReqDefaultTypeInternal;
extern GetBlockInfoDetailReqDefaultTypeInternal _GetBlockInfoDetailReq_default_instance_;
class GetBlockInfoListAck;
class GetBlockInfoListAckDefaultTypeInternal;
extern GetBlockInfoListAckDefaultTypeInternal _GetBlockInfoListAck_default_instance_;
class GetBlockInfoListReq;
class GetBlockInfoListReqDefaultTypeInternal;
extern GetBlockInfoListReqDefaultTypeInternal _GetBlockInfoListReq_default_instance_;
class GetBlockInfoReq;
class GetBlockInfoReqDefaultTypeInternal;
extern GetBlockInfoReqDefaultTypeInternal _GetBlockInfoReq_default_instance_;
class GetBlockTopReq;
class GetBlockTopReqDefaultTypeInternal;
extern GetBlockTopReqDefaultTypeInternal _GetBlockTopReq_default_instance_;
class GetClientInfoAck;
class GetClientInfoAckDefaultTypeInternal;
extern GetClientInfoAckDefaultTypeInternal _GetClientInfoAck_default_instance_;
class GetClientInfoReq;
class GetClientInfoReqDefaultTypeInternal;
extern GetClientInfoReqDefaultTypeInternal _GetClientInfoReq_default_instance_;
class GetDevInfoListAcK;
class GetDevInfoListAcKDefaultTypeInternal;
extern GetDevInfoListAcKDefaultTypeInternal _GetDevInfoListAcK_default_instance_;
class GetDevInfoListReq;
class GetDevInfoListReqDefaultTypeInternal;
extern GetDevInfoListReqDefaultTypeInternal _GetDevInfoListReq_default_instance_;
class GetDevPasswordAck;
class GetDevPasswordAckDefaultTypeInternal;
extern GetDevPasswordAckDefaultTypeInternal _GetDevPasswordAck_default_instance_;
class GetDevPasswordReq;
class GetDevPasswordReqDefaultTypeInternal;
extern GetDevPasswordReqDefaultTypeInternal _GetDevPasswordReq_default_instance_;
class GetDevPrivateKeyAck;
class GetDevPrivateKeyAckDefaultTypeInternal;
extern GetDevPrivateKeyAckDefaultTypeInternal _GetDevPrivateKeyAck_default_instance_;
class GetDevPrivateKeyReq;
class GetDevPrivateKeyReqDefaultTypeInternal;
extern GetDevPrivateKeyReqDefaultTypeInternal _GetDevPrivateKeyReq_default_instance_;
class GetNodeInfoAck;
class GetNodeInfoAckDefaultTypeInternal;
extern GetNodeInfoAckDefaultTypeInternal _GetNodeInfoAck_default_instance_;
class GetNodeInfoReq;
class GetNodeInfoReqDefaultTypeInternal;
extern GetNodeInfoReqDefaultTypeInternal _GetNodeInfoReq_default_instance_;
class GetNodeServiceFeeAck;
class GetNodeServiceFeeAckDefaultTypeInternal;
extern GetNodeServiceFeeAckDefaultTypeInternal _GetNodeServiceFeeAck_default_instance_;
class GetNodeServiceFeeReq;
class GetNodeServiceFeeReqDefaultTypeInternal;
extern GetNodeServiceFeeReqDefaultTypeInternal _GetNodeServiceFeeReq_default_instance_;
class GetPacketFeeAck;
class GetPacketFeeAckDefaultTypeInternal;
extern GetPacketFeeAckDefaultTypeInternal _GetPacketFeeAck_default_instance_;
class GetPacketFeeReq;
class GetPacketFeeReqDefaultTypeInternal;
extern GetPacketFeeReqDefaultTypeInternal _GetPacketFeeReq_default_instance_;
class GetPledgeListAck;
class GetPledgeListAckDefaultTypeInternal;
extern GetPledgeListAckDefaultTypeInternal _GetPledgeListAck_default_instance_;
class GetPledgeListReq;
class GetPledgeListReqDefaultTypeInternal;
extern GetPledgeListReqDefaultTypeInternal _GetPledgeListReq_default_instance_;
class GetServiceInfoAck;
class GetServiceInfoAckDefaultTypeInternal;
extern GetServiceInfoAckDefaultTypeInternal _GetServiceInfoAck_default_instance_;
class GetServiceInfoReq;
class GetServiceInfoReqDefaultTypeInternal;
extern GetServiceInfoReqDefaultTypeInternal _GetServiceInfoReq_default_instance_;
class GetTxInfoDetailAck;
class GetTxInfoDetailAckDefaultTypeInternal;
extern GetTxInfoDetailAckDefaultTypeInternal _GetTxInfoDetailAck_default_instance_;
class GetTxInfoDetailReq;
class GetTxInfoDetailReqDefaultTypeInternal;
extern GetTxInfoDetailReqDefaultTypeInternal _GetTxInfoDetailReq_default_instance_;
class GetTxInfoListAck;
class GetTxInfoListAckDefaultTypeInternal;
extern GetTxInfoListAckDefaultTypeInternal _GetTxInfoListAck_default_instance_;
class GetTxInfoListReq;
class GetTxInfoListReqDefaultTypeInternal;
extern GetTxInfoListReqDefaultTypeInternal _GetTxInfoListReq_default_instance_;
class GetTxPendingListAck;
class GetTxPendingListAckDefaultTypeInternal;
extern GetTxPendingListAckDefaultTypeInternal _GetTxPendingListAck_default_instance_;
class GetTxPendingListReq;
class GetTxPendingListReqDefaultTypeInternal;
extern GetTxPendingListReqDefaultTypeInternal _GetTxPendingListReq_default_instance_;
class MultiTxMsgReq;
class MultiTxMsgReqDefaultTypeInternal;
extern MultiTxMsgReqDefaultTypeInternal _MultiTxMsgReq_default_instance_;
class NodeInfos;
class NodeInfosDefaultTypeInternal;
extern NodeInfosDefaultTypeInternal _NodeInfos_default_instance_;
class NodeList;
class NodeListDefaultTypeInternal;
extern NodeListDefaultTypeInternal _NodeList_default_instance_;
class PledgeItem;
class PledgeItemDefaultTypeInternal;
extern PledgeItemDefaultTypeInternal _PledgeItem_default_instance_;
class PledgeTxMsgReq;
class PledgeTxMsgReqDefaultTypeInternal;
extern PledgeTxMsgReqDefaultTypeInternal _PledgeTxMsgReq_default_instance_;
class RandomPubNet2DeviceAck;
class RandomPubNet2DeviceAckDefaultTypeInternal;
extern RandomPubNet2DeviceAckDefaultTypeInternal _RandomPubNet2DeviceAck_default_instance_;
class RedeemTxMsgReq;
class RedeemTxMsgReqDefaultTypeInternal;
extern RedeemTxMsgReqDefaultTypeInternal _RedeemTxMsgReq_default_instance_;
class ServiceFee;
class ServiceFeeDefaultTypeInternal;
extern ServiceFeeDefaultTypeInternal _ServiceFee_default_instance_;
class SetDevPasswordAck;
class SetDevPasswordAckDefaultTypeInternal;
extern SetDevPasswordAckDefaultTypeInternal _SetDevPasswordAck_default_instance_;
class SetDevPasswordReq;
class SetDevPasswordReqDefaultTypeInternal;
extern SetDevPasswordReqDefaultTypeInternal _SetDevPasswordReq_default_instance_;
class SetPacketFeeAck;
class SetPacketFeeAckDefaultTypeInternal;
extern SetPacketFeeAckDefaultTypeInternal _SetPacketFeeAck_default_instance_;
class SetPacketFeeReq;
class SetPacketFeeReqDefaultTypeInternal;
extern SetPacketFeeReqDefaultTypeInternal _SetPacketFeeReq_default_instance_;
class SetServiceFeeAck;
class SetServiceFeeAckDefaultTypeInternal;
extern SetServiceFeeAckDefaultTypeInternal _SetServiceFeeAck_default_instance_;
class SetServiceFeeReq;
class SetServiceFeeReqDefaultTypeInternal;
extern SetServiceFeeReqDefaultTypeInternal _SetServiceFeeReq_default_instance_;
class SignInfo;
class SignInfoDefaultTypeInternal;
extern SignInfoDefaultTypeInternal _SignInfo_default_instance_;
class TApiGetBlockTopAck;
class TApiGetBlockTopAckDefaultTypeInternal;
extern TApiGetBlockTopAckDefaultTypeInternal _TApiGetBlockTopAck_default_instance_;
class TestConnectAck;
class TestConnectAckDefaultTypeInternal;
extern TestConnectAckDefaultTypeInternal _TestConnectAck_default_instance_;
class TestConnectReq;
class TestConnectReqDefaultTypeInternal;
extern TestConnectReqDefaultTypeInternal _TestConnectReq_default_instance_;
class ToAddr;
class ToAddrDefaultTypeInternal;
extern ToAddrDefaultTypeInternal _ToAddr_default_instance_;
class TransData;
class TransDataDefaultTypeInternal;
extern TransDataDefaultTypeInternal _TransData_default_instance_;
class TxInfo;
class TxInfoDefaultTypeInternal;
extern TxInfoDefaultTypeInternal _TxInfo_default_instance_;
class TxInfoItem;
class TxInfoItemDefaultTypeInternal;
extern TxInfoItemDefaultTypeInternal _TxInfoItem_default_instance_;
class TxMsgAck;
class TxMsgAckDefaultTypeInternal;
extern TxMsgAckDefaultTypeInternal _TxMsgAck_default_instance_;
class TxMsgReq;
class TxMsgReqDefaultTypeInternal;
extern TxMsgReqDefaultTypeInternal _TxMsgReq_default_instance_;
class TxPendingItem;
class TxPendingItemDefaultTypeInternal;
extern TxPendingItemDefaultTypeInternal _TxPendingItem_default_instance_;
class TxVinInfo;
class TxVinInfoDefaultTypeInternal;
extern TxVinInfoDefaultTypeInternal _TxVinInfo_default_instance_;
class TxVoutInfo;
class TxVoutInfoDefaultTypeInternal;
extern TxVoutInfoDefaultTypeInternal _TxVoutInfo_default_instance_;
class VerifyDevicePasswordAck;
class VerifyDevicePasswordAckDefaultTypeInternal;
extern VerifyDevicePasswordAckDefaultTypeInternal _VerifyDevicePasswordAck_default_instance_;
class VerifyDevicePasswordReq;
class VerifyDevicePasswordReqDefaultTypeInternal;
extern VerifyDevicePasswordReqDefaultTypeInternal _VerifyDevicePasswordReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BlockInfo* Arena::CreateMaybeMessage<::BlockInfo>(Arena*);
template<> ::BlockInfoItem* Arena::CreateMaybeMessage<::BlockInfoItem>(Arena*);
template<> ::BlockInfoOutAddr* Arena::CreateMaybeMessage<::BlockInfoOutAddr>(Arena*);
template<> ::CreateDeviceMultiTxMsgReq* Arena::CreateMaybeMessage<::CreateDeviceMultiTxMsgReq>(Arena*);
template<> ::CreateDevicePledgeTxMsgReq* Arena::CreateMaybeMessage<::CreateDevicePledgeTxMsgReq>(Arena*);
template<> ::CreateDeviceRedeemTxReq* Arena::CreateMaybeMessage<::CreateDeviceRedeemTxReq>(Arena*);
template<> ::CreateDeviceTxMsgReq* Arena::CreateMaybeMessage<::CreateDeviceTxMsgReq>(Arena*);
template<> ::CreateMultiTxMsgAck* Arena::CreateMaybeMessage<::CreateMultiTxMsgAck>(Arena*);
template<> ::CreateMultiTxMsgReq* Arena::CreateMaybeMessage<::CreateMultiTxMsgReq>(Arena*);
template<> ::CreatePledgeTxMsgAck* Arena::CreateMaybeMessage<::CreatePledgeTxMsgAck>(Arena*);
template<> ::CreatePledgeTxMsgReq* Arena::CreateMaybeMessage<::CreatePledgeTxMsgReq>(Arena*);
template<> ::CreateRedeemTxMsgAck* Arena::CreateMaybeMessage<::CreateRedeemTxMsgAck>(Arena*);
template<> ::CreateRedeemTxMsgReq* Arena::CreateMaybeMessage<::CreateRedeemTxMsgReq>(Arena*);
template<> ::CreateTxMsgAck* Arena::CreateMaybeMessage<::CreateTxMsgAck>(Arena*);
template<> ::CreateTxMsgReq* Arena::CreateMaybeMessage<::CreateTxMsgReq>(Arena*);
template<> ::DataTransReq* Arena::CreateMaybeMessage<::DataTransReq>(Arena*);
template<> ::DevPrivateKeyInfo* Arena::CreateMaybeMessage<::DevPrivateKeyInfo>(Arena*);
template<> ::Device2AllDevReq* Arena::CreateMaybeMessage<::Device2AllDevReq>(Arena*);
template<> ::Device2PubNetRandomReq* Arena::CreateMaybeMessage<::Device2PubNetRandomReq>(Arena*);
template<> ::Feedback2DeviceAck* Arena::CreateMaybeMessage<::Feedback2DeviceAck>(Arena*);
template<> ::GetAddrInfoAck* Arena::CreateMaybeMessage<::GetAddrInfoAck>(Arena*);
template<> ::GetAddrInfoReq* Arena::CreateMaybeMessage<::GetAddrInfoReq>(Arena*);
template<> ::GetAmountAck* Arena::CreateMaybeMessage<::GetAmountAck>(Arena*);
template<> ::GetAmountReq* Arena::CreateMaybeMessage<::GetAmountReq>(Arena*);
template<> ::GetBlockInfoAck* Arena::CreateMaybeMessage<::GetBlockInfoAck>(Arena*);
template<> ::GetBlockInfoDetailAck* Arena::CreateMaybeMessage<::GetBlockInfoDetailAck>(Arena*);
template<> ::GetBlockInfoDetailReq* Arena::CreateMaybeMessage<::GetBlockInfoDetailReq>(Arena*);
template<> ::GetBlockInfoListAck* Arena::CreateMaybeMessage<::GetBlockInfoListAck>(Arena*);
template<> ::GetBlockInfoListReq* Arena::CreateMaybeMessage<::GetBlockInfoListReq>(Arena*);
template<> ::GetBlockInfoReq* Arena::CreateMaybeMessage<::GetBlockInfoReq>(Arena*);
template<> ::GetBlockTopReq* Arena::CreateMaybeMessage<::GetBlockTopReq>(Arena*);
template<> ::GetClientInfoAck* Arena::CreateMaybeMessage<::GetClientInfoAck>(Arena*);
template<> ::GetClientInfoReq* Arena::CreateMaybeMessage<::GetClientInfoReq>(Arena*);
template<> ::GetDevInfoListAcK* Arena::CreateMaybeMessage<::GetDevInfoListAcK>(Arena*);
template<> ::GetDevInfoListReq* Arena::CreateMaybeMessage<::GetDevInfoListReq>(Arena*);
template<> ::GetDevPasswordAck* Arena::CreateMaybeMessage<::GetDevPasswordAck>(Arena*);
template<> ::GetDevPasswordReq* Arena::CreateMaybeMessage<::GetDevPasswordReq>(Arena*);
template<> ::GetDevPrivateKeyAck* Arena::CreateMaybeMessage<::GetDevPrivateKeyAck>(Arena*);
template<> ::GetDevPrivateKeyReq* Arena::CreateMaybeMessage<::GetDevPrivateKeyReq>(Arena*);
template<> ::GetNodeInfoAck* Arena::CreateMaybeMessage<::GetNodeInfoAck>(Arena*);
template<> ::GetNodeInfoReq* Arena::CreateMaybeMessage<::GetNodeInfoReq>(Arena*);
template<> ::GetNodeServiceFeeAck* Arena::CreateMaybeMessage<::GetNodeServiceFeeAck>(Arena*);
template<> ::GetNodeServiceFeeReq* Arena::CreateMaybeMessage<::GetNodeServiceFeeReq>(Arena*);
template<> ::GetPacketFeeAck* Arena::CreateMaybeMessage<::GetPacketFeeAck>(Arena*);
template<> ::GetPacketFeeReq* Arena::CreateMaybeMessage<::GetPacketFeeReq>(Arena*);
template<> ::GetPledgeListAck* Arena::CreateMaybeMessage<::GetPledgeListAck>(Arena*);
template<> ::GetPledgeListReq* Arena::CreateMaybeMessage<::GetPledgeListReq>(Arena*);
template<> ::GetServiceInfoAck* Arena::CreateMaybeMessage<::GetServiceInfoAck>(Arena*);
template<> ::GetServiceInfoReq* Arena::CreateMaybeMessage<::GetServiceInfoReq>(Arena*);
template<> ::GetTxInfoDetailAck* Arena::CreateMaybeMessage<::GetTxInfoDetailAck>(Arena*);
template<> ::GetTxInfoDetailReq* Arena::CreateMaybeMessage<::GetTxInfoDetailReq>(Arena*);
template<> ::GetTxInfoListAck* Arena::CreateMaybeMessage<::GetTxInfoListAck>(Arena*);
template<> ::GetTxInfoListReq* Arena::CreateMaybeMessage<::GetTxInfoListReq>(Arena*);
template<> ::GetTxPendingListAck* Arena::CreateMaybeMessage<::GetTxPendingListAck>(Arena*);
template<> ::GetTxPendingListReq* Arena::CreateMaybeMessage<::GetTxPendingListReq>(Arena*);
template<> ::MultiTxMsgReq* Arena::CreateMaybeMessage<::MultiTxMsgReq>(Arena*);
template<> ::NodeInfos* Arena::CreateMaybeMessage<::NodeInfos>(Arena*);
template<> ::NodeList* Arena::CreateMaybeMessage<::NodeList>(Arena*);
template<> ::PledgeItem* Arena::CreateMaybeMessage<::PledgeItem>(Arena*);
template<> ::PledgeTxMsgReq* Arena::CreateMaybeMessage<::PledgeTxMsgReq>(Arena*);
template<> ::RandomPubNet2DeviceAck* Arena::CreateMaybeMessage<::RandomPubNet2DeviceAck>(Arena*);
template<> ::RedeemTxMsgReq* Arena::CreateMaybeMessage<::RedeemTxMsgReq>(Arena*);
template<> ::ServiceFee* Arena::CreateMaybeMessage<::ServiceFee>(Arena*);
template<> ::SetDevPasswordAck* Arena::CreateMaybeMessage<::SetDevPasswordAck>(Arena*);
template<> ::SetDevPasswordReq* Arena::CreateMaybeMessage<::SetDevPasswordReq>(Arena*);
template<> ::SetPacketFeeAck* Arena::CreateMaybeMessage<::SetPacketFeeAck>(Arena*);
template<> ::SetPacketFeeReq* Arena::CreateMaybeMessage<::SetPacketFeeReq>(Arena*);
template<> ::SetServiceFeeAck* Arena::CreateMaybeMessage<::SetServiceFeeAck>(Arena*);
template<> ::SetServiceFeeReq* Arena::CreateMaybeMessage<::SetServiceFeeReq>(Arena*);
template<> ::SignInfo* Arena::CreateMaybeMessage<::SignInfo>(Arena*);
template<> ::TApiGetBlockTopAck* Arena::CreateMaybeMessage<::TApiGetBlockTopAck>(Arena*);
template<> ::TestConnectAck* Arena::CreateMaybeMessage<::TestConnectAck>(Arena*);
template<> ::TestConnectReq* Arena::CreateMaybeMessage<::TestConnectReq>(Arena*);
template<> ::ToAddr* Arena::CreateMaybeMessage<::ToAddr>(Arena*);
template<> ::TransData* Arena::CreateMaybeMessage<::TransData>(Arena*);
template<> ::TxInfo* Arena::CreateMaybeMessage<::TxInfo>(Arena*);
template<> ::TxInfoItem* Arena::CreateMaybeMessage<::TxInfoItem>(Arena*);
template<> ::TxMsgAck* Arena::CreateMaybeMessage<::TxMsgAck>(Arena*);
template<> ::TxMsgReq* Arena::CreateMaybeMessage<::TxMsgReq>(Arena*);
template<> ::TxPendingItem* Arena::CreateMaybeMessage<::TxPendingItem>(Arena*);
template<> ::TxVinInfo* Arena::CreateMaybeMessage<::TxVinInfo>(Arena*);
template<> ::TxVoutInfo* Arena::CreateMaybeMessage<::TxVoutInfo>(Arena*);
template<> ::VerifyDevicePasswordAck* Arena::CreateMaybeMessage<::VerifyDevicePasswordAck>(Arena*);
template<> ::VerifyDevicePasswordReq* Arena::CreateMaybeMessage<::VerifyDevicePasswordReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GetServiceInfoAck_SyncStatus : int {
  GetServiceInfoAck_SyncStatus_TRUE = 0,
  GetServiceInfoAck_SyncStatus_FALSE = 1,
  GetServiceInfoAck_SyncStatus_FAIL = -1,
  GetServiceInfoAck_SyncStatus_GetServiceInfoAck_SyncStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetServiceInfoAck_SyncStatus_GetServiceInfoAck_SyncStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetServiceInfoAck_SyncStatus_IsValid(int value);
constexpr GetServiceInfoAck_SyncStatus GetServiceInfoAck_SyncStatus_SyncStatus_MIN = GetServiceInfoAck_SyncStatus_FAIL;
constexpr GetServiceInfoAck_SyncStatus GetServiceInfoAck_SyncStatus_SyncStatus_MAX = GetServiceInfoAck_SyncStatus_FALSE;
constexpr int GetServiceInfoAck_SyncStatus_SyncStatus_ARRAYSIZE = GetServiceInfoAck_SyncStatus_SyncStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetServiceInfoAck_SyncStatus_descriptor();
template<typename T>
inline const std::string& GetServiceInfoAck_SyncStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetServiceInfoAck_SyncStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetServiceInfoAck_SyncStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetServiceInfoAck_SyncStatus_descriptor(), enum_t_value);
}
inline bool GetServiceInfoAck_SyncStatus_Parse(
    const std::string& name, GetServiceInfoAck_SyncStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetServiceInfoAck_SyncStatus>(
    GetServiceInfoAck_SyncStatus_descriptor(), name, value);
}
enum DeviceType : int {
  PC = 0,
  iOS = 1,
  Android = 2,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = PC;
constexpr DeviceType DeviceType_MAX = Android;
constexpr int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_descriptor();
template<typename T>
inline const std::string& DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceType_descriptor(), enum_t_value);
}
inline bool DeviceType_Parse(
    const std::string& name, DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
enum DeviceLang : int {
  ZH_CN = 0,
  EN_US = 1,
  DeviceLang_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceLang_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceLang_IsValid(int value);
constexpr DeviceLang DeviceLang_MIN = ZH_CN;
constexpr DeviceLang DeviceLang_MAX = EN_US;
constexpr int DeviceLang_ARRAYSIZE = DeviceLang_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceLang_descriptor();
template<typename T>
inline const std::string& DeviceLang_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceLang>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceLang_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceLang_descriptor(), enum_t_value);
}
inline bool DeviceLang_Parse(
    const std::string& name, DeviceLang* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceLang>(
    DeviceLang_descriptor(), name, value);
}
enum TxInfoType : int {
  TxInfoType_Unknown = 0,
  TxInfoType_Originator = 1,
  TxInfoType_Receiver = 2,
  TxInfoType_Gas = 3,
  TxInfoType_Award = 4,
  TxInfoType_Pledge = 5,
  TxInfoType_Redeem = 6,
  TxInfoType_PledgedAndRedeemed = 7,
  TxInfoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TxInfoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TxInfoType_IsValid(int value);
constexpr TxInfoType TxInfoType_MIN = TxInfoType_Unknown;
constexpr TxInfoType TxInfoType_MAX = TxInfoType_PledgedAndRedeemed;
constexpr int TxInfoType_ARRAYSIZE = TxInfoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TxInfoType_descriptor();
template<typename T>
inline const std::string& TxInfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TxInfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TxInfoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TxInfoType_descriptor(), enum_t_value);
}
inline bool TxInfoType_Parse(
    const std::string& name, TxInfoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TxInfoType>(
    TxInfoType_descriptor(), name, value);
}
// ===================================================================

class GetAmountReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetAmountReq) */ {
 public:
  GetAmountReq();
  virtual ~GetAmountReq();

  GetAmountReq(const GetAmountReq& from);
  GetAmountReq(GetAmountReq&& from) noexcept
    : GetAmountReq() {
    *this = ::std::move(from);
  }

  inline GetAmountReq& operator=(const GetAmountReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAmountReq& operator=(GetAmountReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAmountReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAmountReq* internal_default_instance() {
    return reinterpret_cast<const GetAmountReq*>(
               &_GetAmountReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAmountReq& a, GetAmountReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAmountReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAmountReq* New() const final {
    return CreateMaybeMessage<GetAmountReq>(nullptr);
  }

  GetAmountReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAmountReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAmountReq& from);
  void MergeFrom(const GetAmountReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAmountReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetAmountReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:GetAmountReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetAmountAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetAmountAck) */ {
 public:
  GetAmountAck();
  virtual ~GetAmountAck();

  GetAmountAck(const GetAmountAck& from);
  GetAmountAck(GetAmountAck&& from) noexcept
    : GetAmountAck() {
    *this = ::std::move(from);
  }

  inline GetAmountAck& operator=(const GetAmountAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAmountAck& operator=(GetAmountAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAmountAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAmountAck* internal_default_instance() {
    return reinterpret_cast<const GetAmountAck*>(
               &_GetAmountAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAmountAck& a, GetAmountAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAmountAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAmountAck* New() const final {
    return CreateMaybeMessage<GetAmountAck>(nullptr);
  }

  GetAmountAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAmountAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAmountAck& from);
  void MergeFrom(const GetAmountAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAmountAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetAmountAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kAddressFieldNumber = 4,
    kBalanceFieldNumber = 5,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string balance = 5;
  void clear_balance();
  const std::string& balance() const;
  void set_balance(const std::string& value);
  void set_balance(std::string&& value);
  void set_balance(const char* value);
  void set_balance(const char* value, size_t size);
  std::string* mutable_balance();
  std::string* release_balance();
  void set_allocated_balance(std::string* balance);
  private:
  const std::string& _internal_balance() const;
  void _internal_set_balance(const std::string& value);
  std::string* _internal_mutable_balance();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetAmountAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr balance_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockInfoReq) */ {
 public:
  GetBlockInfoReq();
  virtual ~GetBlockInfoReq();

  GetBlockInfoReq(const GetBlockInfoReq& from);
  GetBlockInfoReq(GetBlockInfoReq&& from) noexcept
    : GetBlockInfoReq() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoReq& operator=(const GetBlockInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoReq& operator=(GetBlockInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoReq*>(
               &_GetBlockInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetBlockInfoReq& a, GetBlockInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoReq* New() const final {
    return CreateMaybeMessage<GetBlockInfoReq>(nullptr);
  }

  GetBlockInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoReq& from);
  void MergeFrom(const GetBlockInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kHeightFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // sint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetBlockInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TxVinInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxVinInfo) */ {
 public:
  TxVinInfo();
  virtual ~TxVinInfo();

  TxVinInfo(const TxVinInfo& from);
  TxVinInfo(TxVinInfo&& from) noexcept
    : TxVinInfo() {
    *this = ::std::move(from);
  }

  inline TxVinInfo& operator=(const TxVinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxVinInfo& operator=(TxVinInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxVinInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxVinInfo* internal_default_instance() {
    return reinterpret_cast<const TxVinInfo*>(
               &_TxVinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TxVinInfo& a, TxVinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TxVinInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxVinInfo* New() const final {
    return CreateMaybeMessage<TxVinInfo>(nullptr);
  }

  TxVinInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxVinInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxVinInfo& from);
  void MergeFrom(const TxVinInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxVinInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxVinInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptSigFieldNumber = 1,
    kPreVoutHashFieldNumber = 2,
    kPreVoutIndexFieldNumber = 3,
  };
  // string script_sig = 1;
  void clear_script_sig();
  const std::string& script_sig() const;
  void set_script_sig(const std::string& value);
  void set_script_sig(std::string&& value);
  void set_script_sig(const char* value);
  void set_script_sig(const char* value, size_t size);
  std::string* mutable_script_sig();
  std::string* release_script_sig();
  void set_allocated_script_sig(std::string* script_sig);
  private:
  const std::string& _internal_script_sig() const;
  void _internal_set_script_sig(const std::string& value);
  std::string* _internal_mutable_script_sig();
  public:

  // string pre_vout_hash = 2;
  void clear_pre_vout_hash();
  const std::string& pre_vout_hash() const;
  void set_pre_vout_hash(const std::string& value);
  void set_pre_vout_hash(std::string&& value);
  void set_pre_vout_hash(const char* value);
  void set_pre_vout_hash(const char* value, size_t size);
  std::string* mutable_pre_vout_hash();
  std::string* release_pre_vout_hash();
  void set_allocated_pre_vout_hash(std::string* pre_vout_hash);
  private:
  const std::string& _internal_pre_vout_hash() const;
  void _internal_set_pre_vout_hash(const std::string& value);
  std::string* _internal_mutable_pre_vout_hash();
  public:

  // uint64 pre_vout_index = 3;
  void clear_pre_vout_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 pre_vout_index() const;
  void set_pre_vout_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pre_vout_index() const;
  void _internal_set_pre_vout_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TxVinInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_sig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_vout_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pre_vout_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TxVoutInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxVoutInfo) */ {
 public:
  TxVoutInfo();
  virtual ~TxVoutInfo();

  TxVoutInfo(const TxVoutInfo& from);
  TxVoutInfo(TxVoutInfo&& from) noexcept
    : TxVoutInfo() {
    *this = ::std::move(from);
  }

  inline TxVoutInfo& operator=(const TxVoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxVoutInfo& operator=(TxVoutInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxVoutInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxVoutInfo* internal_default_instance() {
    return reinterpret_cast<const TxVoutInfo*>(
               &_TxVoutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TxVoutInfo& a, TxVoutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TxVoutInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxVoutInfo* New() const final {
    return CreateMaybeMessage<TxVoutInfo>(nullptr);
  }

  TxVoutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxVoutInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxVoutInfo& from);
  void MergeFrom(const TxVoutInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxVoutInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxVoutInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPubkeyFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string script_pubkey = 1;
  void clear_script_pubkey();
  const std::string& script_pubkey() const;
  void set_script_pubkey(const std::string& value);
  void set_script_pubkey(std::string&& value);
  void set_script_pubkey(const char* value);
  void set_script_pubkey(const char* value, size_t size);
  std::string* mutable_script_pubkey();
  std::string* release_script_pubkey();
  void set_allocated_script_pubkey(std::string* script_pubkey);
  private:
  const std::string& _internal_script_pubkey() const;
  void _internal_set_script_pubkey(const std::string& value);
  std::string* _internal_mutable_script_pubkey();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:TxVoutInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TxInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxInfo) */ {
 public:
  TxInfo();
  virtual ~TxInfo();

  TxInfo(const TxInfo& from);
  TxInfo(TxInfo&& from) noexcept
    : TxInfo() {
    *this = ::std::move(from);
  }

  inline TxInfo& operator=(const TxInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxInfo& operator=(TxInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInfo* internal_default_instance() {
    return reinterpret_cast<const TxInfo*>(
               &_TxInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TxInfo& a, TxInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TxInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxInfo* New() const final {
    return CreateMaybeMessage<TxInfo>(nullptr);
  }

  TxInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxInfo& from);
  void MergeFrom(const TxInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionSignerFieldNumber = 2,
    kVinListFieldNumber = 3,
    kVoutListFieldNumber = 4,
    kTxHashFieldNumber = 1,
    kStxOwnerFieldNumber = 6,
    kNlockTimeFieldNumber = 5,
    kStxOwnerIndexFieldNumber = 7,
    kVersionFieldNumber = 8,
  };
  // repeated string transaction_signer = 2;
  int transaction_signer_size() const;
  private:
  int _internal_transaction_signer_size() const;
  public:
  void clear_transaction_signer();
  const std::string& transaction_signer(int index) const;
  std::string* mutable_transaction_signer(int index);
  void set_transaction_signer(int index, const std::string& value);
  void set_transaction_signer(int index, std::string&& value);
  void set_transaction_signer(int index, const char* value);
  void set_transaction_signer(int index, const char* value, size_t size);
  std::string* add_transaction_signer();
  void add_transaction_signer(const std::string& value);
  void add_transaction_signer(std::string&& value);
  void add_transaction_signer(const char* value);
  void add_transaction_signer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transaction_signer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transaction_signer();
  private:
  const std::string& _internal_transaction_signer(int index) const;
  std::string* _internal_add_transaction_signer();
  public:

  // repeated .TxVinInfo vin_list = 3;
  int vin_list_size() const;
  private:
  int _internal_vin_list_size() const;
  public:
  void clear_vin_list();
  ::TxVinInfo* mutable_vin_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVinInfo >*
      mutable_vin_list();
  private:
  const ::TxVinInfo& _internal_vin_list(int index) const;
  ::TxVinInfo* _internal_add_vin_list();
  public:
  const ::TxVinInfo& vin_list(int index) const;
  ::TxVinInfo* add_vin_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVinInfo >&
      vin_list() const;

  // repeated .TxVoutInfo vout_list = 4;
  int vout_list_size() const;
  private:
  int _internal_vout_list_size() const;
  public:
  void clear_vout_list();
  ::TxVoutInfo* mutable_vout_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVoutInfo >*
      mutable_vout_list();
  private:
  const ::TxVoutInfo& _internal_vout_list(int index) const;
  ::TxVoutInfo* _internal_add_vout_list();
  public:
  const ::TxVoutInfo& vout_list(int index) const;
  ::TxVoutInfo* add_vout_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVoutInfo >&
      vout_list() const;

  // string tx_hash = 1;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // string stx_owner = 6;
  void clear_stx_owner();
  const std::string& stx_owner() const;
  void set_stx_owner(const std::string& value);
  void set_stx_owner(std::string&& value);
  void set_stx_owner(const char* value);
  void set_stx_owner(const char* value, size_t size);
  std::string* mutable_stx_owner();
  std::string* release_stx_owner();
  void set_allocated_stx_owner(std::string* stx_owner);
  private:
  const std::string& _internal_stx_owner() const;
  void _internal_set_stx_owner(const std::string& value);
  std::string* _internal_mutable_stx_owner();
  public:

  // uint64 nlock_time = 5;
  void clear_nlock_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 nlock_time() const;
  void set_nlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nlock_time() const;
  void _internal_set_nlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 stx_owner_index = 7;
  void clear_stx_owner_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 stx_owner_index() const;
  void set_stx_owner_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stx_owner_index() const;
  void _internal_set_stx_owner_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 8;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TxInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transaction_signer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVinInfo > vin_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVoutInfo > vout_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stx_owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nlock_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stx_owner_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class BlockInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockInfo) */ {
 public:
  BlockInfo();
  virtual ~BlockInfo();

  BlockInfo(const BlockInfo& from);
  BlockInfo(BlockInfo&& from) noexcept
    : BlockInfo() {
    *this = ::std::move(from);
  }

  inline BlockInfo& operator=(const BlockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInfo& operator=(BlockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInfo* internal_default_instance() {
    return reinterpret_cast<const BlockInfo*>(
               &_BlockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlockInfo& a, BlockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInfo* New() const final {
    return CreateMaybeMessage<BlockInfo>(nullptr);
  }

  BlockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInfo& from);
  void MergeFrom(const BlockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxInfoListFieldNumber = 6,
    kHashMerkleRootFieldNumber = 2,
    kHashPrevBlockFieldNumber = 3,
    kBlockHashFieldNumber = 4,
    kPacketFeeFieldNumber = 7,
    kPacketIpFieldNumber = 8,
    kNtimeFieldNumber = 5,
    kHeightFieldNumber = 1,
  };
  // repeated .TxInfo tx_info_list = 6;
  int tx_info_list_size() const;
  private:
  int _internal_tx_info_list_size() const;
  public:
  void clear_tx_info_list();
  ::TxInfo* mutable_tx_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfo >*
      mutable_tx_info_list();
  private:
  const ::TxInfo& _internal_tx_info_list(int index) const;
  ::TxInfo* _internal_add_tx_info_list();
  public:
  const ::TxInfo& tx_info_list(int index) const;
  ::TxInfo* add_tx_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfo >&
      tx_info_list() const;

  // string hash_merkle_root = 2;
  void clear_hash_merkle_root();
  const std::string& hash_merkle_root() const;
  void set_hash_merkle_root(const std::string& value);
  void set_hash_merkle_root(std::string&& value);
  void set_hash_merkle_root(const char* value);
  void set_hash_merkle_root(const char* value, size_t size);
  std::string* mutable_hash_merkle_root();
  std::string* release_hash_merkle_root();
  void set_allocated_hash_merkle_root(std::string* hash_merkle_root);
  private:
  const std::string& _internal_hash_merkle_root() const;
  void _internal_set_hash_merkle_root(const std::string& value);
  std::string* _internal_mutable_hash_merkle_root();
  public:

  // string hash_prev_block = 3;
  void clear_hash_prev_block();
  const std::string& hash_prev_block() const;
  void set_hash_prev_block(const std::string& value);
  void set_hash_prev_block(std::string&& value);
  void set_hash_prev_block(const char* value);
  void set_hash_prev_block(const char* value, size_t size);
  std::string* mutable_hash_prev_block();
  std::string* release_hash_prev_block();
  void set_allocated_hash_prev_block(std::string* hash_prev_block);
  private:
  const std::string& _internal_hash_prev_block() const;
  void _internal_set_hash_prev_block(const std::string& value);
  std::string* _internal_mutable_hash_prev_block();
  public:

  // string block_hash = 4;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const char* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // string packet_fee = 7;
  void clear_packet_fee();
  const std::string& packet_fee() const;
  void set_packet_fee(const std::string& value);
  void set_packet_fee(std::string&& value);
  void set_packet_fee(const char* value);
  void set_packet_fee(const char* value, size_t size);
  std::string* mutable_packet_fee();
  std::string* release_packet_fee();
  void set_allocated_packet_fee(std::string* packet_fee);
  private:
  const std::string& _internal_packet_fee() const;
  void _internal_set_packet_fee(const std::string& value);
  std::string* _internal_mutable_packet_fee();
  public:

  // string packet_ip = 8;
  void clear_packet_ip();
  const std::string& packet_ip() const;
  void set_packet_ip(const std::string& value);
  void set_packet_ip(std::string&& value);
  void set_packet_ip(const char* value);
  void set_packet_ip(const char* value, size_t size);
  std::string* mutable_packet_ip();
  std::string* release_packet_ip();
  void set_allocated_packet_ip(std::string* packet_ip);
  private:
  const std::string& _internal_packet_ip() const;
  void _internal_set_packet_ip(const std::string& value);
  std::string* _internal_mutable_packet_ip();
  public:

  // uint64 ntime = 5;
  void clear_ntime();
  ::PROTOBUF_NAMESPACE_ID::uint64 ntime() const;
  void set_ntime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ntime() const;
  void _internal_set_ntime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BlockInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfo > tx_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_prev_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ntime_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockInfoAck) */ {
 public:
  GetBlockInfoAck();
  virtual ~GetBlockInfoAck();

  GetBlockInfoAck(const GetBlockInfoAck& from);
  GetBlockInfoAck(GetBlockInfoAck&& from) noexcept
    : GetBlockInfoAck() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoAck& operator=(const GetBlockInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoAck& operator=(GetBlockInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoAck* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoAck*>(
               &_GetBlockInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetBlockInfoAck& a, GetBlockInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoAck* New() const final {
    return CreateMaybeMessage<GetBlockInfoAck>(nullptr);
  }

  GetBlockInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoAck& from);
  void MergeFrom(const GetBlockInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockInfoListFieldNumber = 5,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kTopFieldNumber = 4,
    kTxCountFieldNumber = 6,
    kCodeFieldNumber = 2,
  };
  // repeated .BlockInfo block_info_list = 5;
  int block_info_list_size() const;
  private:
  int _internal_block_info_list_size() const;
  public:
  void clear_block_info_list();
  ::BlockInfo* mutable_block_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >*
      mutable_block_info_list();
  private:
  const ::BlockInfo& _internal_block_info_list(int index) const;
  ::BlockInfo* _internal_add_block_info_list();
  public:
  const ::BlockInfo& block_info_list(int index) const;
  ::BlockInfo* add_block_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >&
      block_info_list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 top = 4;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::uint64 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tx_count = 6;
  void clear_tx_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_count() const;
  void set_tx_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_count() const;
  void _internal_set_tx_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetBlockInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo > block_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint64 top_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetAddrInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetAddrInfoReq) */ {
 public:
  GetAddrInfoReq();
  virtual ~GetAddrInfoReq();

  GetAddrInfoReq(const GetAddrInfoReq& from);
  GetAddrInfoReq(GetAddrInfoReq&& from) noexcept
    : GetAddrInfoReq() {
    *this = ::std::move(from);
  }

  inline GetAddrInfoReq& operator=(const GetAddrInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddrInfoReq& operator=(GetAddrInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddrInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddrInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetAddrInfoReq*>(
               &_GetAddrInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetAddrInfoReq& a, GetAddrInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddrInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddrInfoReq* New() const final {
    return CreateMaybeMessage<GetAddrInfoReq>(nullptr);
  }

  GetAddrInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddrInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddrInfoReq& from);
  void MergeFrom(const GetAddrInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddrInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetAddrInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddressFieldNumber = 2,
    kIndexFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetAddrInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetAddrInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetAddrInfoAck) */ {
 public:
  GetAddrInfoAck();
  virtual ~GetAddrInfoAck();

  GetAddrInfoAck(const GetAddrInfoAck& from);
  GetAddrInfoAck(GetAddrInfoAck&& from) noexcept
    : GetAddrInfoAck() {
    *this = ::std::move(from);
  }

  inline GetAddrInfoAck& operator=(const GetAddrInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddrInfoAck& operator=(GetAddrInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddrInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddrInfoAck* internal_default_instance() {
    return reinterpret_cast<const GetAddrInfoAck*>(
               &_GetAddrInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetAddrInfoAck& a, GetAddrInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddrInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddrInfoAck* New() const final {
    return CreateMaybeMessage<GetAddrInfoAck>(nullptr);
  }

  GetAddrInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddrInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddrInfoAck& from);
  void MergeFrom(const GetAddrInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddrInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetAddrInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockInfoListFieldNumber = 5,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kTotalFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // repeated .BlockInfo block_info_list = 5;
  int block_info_list_size() const;
  private:
  int _internal_block_info_list_size() const;
  public:
  void clear_block_info_list();
  ::BlockInfo* mutable_block_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >*
      mutable_block_info_list();
  private:
  const ::BlockInfo& _internal_block_info_list(int index) const;
  ::BlockInfo* _internal_add_block_info_list();
  public:
  const ::BlockInfo& block_info_list(int index) const;
  ::BlockInfo* add_block_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >&
      block_info_list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint64 total = 4;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetAddrInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo > block_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SetDevPasswordReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetDevPasswordReq) */ {
 public:
  SetDevPasswordReq();
  virtual ~SetDevPasswordReq();

  SetDevPasswordReq(const SetDevPasswordReq& from);
  SetDevPasswordReq(SetDevPasswordReq&& from) noexcept
    : SetDevPasswordReq() {
    *this = ::std::move(from);
  }

  inline SetDevPasswordReq& operator=(const SetDevPasswordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDevPasswordReq& operator=(SetDevPasswordReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDevPasswordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDevPasswordReq* internal_default_instance() {
    return reinterpret_cast<const SetDevPasswordReq*>(
               &_SetDevPasswordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetDevPasswordReq& a, SetDevPasswordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDevPasswordReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDevPasswordReq* New() const final {
    return CreateMaybeMessage<SetDevPasswordReq>(nullptr);
  }

  SetDevPasswordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDevPasswordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDevPasswordReq& from);
  void MergeFrom(const SetDevPasswordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDevPasswordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetDevPasswordReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kOldPassFieldNumber = 2,
    kNewPassFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string old_pass = 2;
  void clear_old_pass();
  const std::string& old_pass() const;
  void set_old_pass(const std::string& value);
  void set_old_pass(std::string&& value);
  void set_old_pass(const char* value);
  void set_old_pass(const char* value, size_t size);
  std::string* mutable_old_pass();
  std::string* release_old_pass();
  void set_allocated_old_pass(std::string* old_pass);
  private:
  const std::string& _internal_old_pass() const;
  void _internal_set_old_pass(const std::string& value);
  std::string* _internal_mutable_old_pass();
  public:

  // string new_pass = 3;
  void clear_new_pass();
  const std::string& new_pass() const;
  void set_new_pass(const std::string& value);
  void set_new_pass(std::string&& value);
  void set_new_pass(const char* value);
  void set_new_pass(const char* value, size_t size);
  std::string* mutable_new_pass();
  std::string* release_new_pass();
  void set_allocated_new_pass(std::string* new_pass);
  private:
  const std::string& _internal_new_pass() const;
  void _internal_set_new_pass(const std::string& value);
  std::string* _internal_mutable_new_pass();
  public:

  // @@protoc_insertion_point(class_scope:SetDevPasswordReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_pass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_pass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SetDevPasswordAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetDevPasswordAck) */ {
 public:
  SetDevPasswordAck();
  virtual ~SetDevPasswordAck();

  SetDevPasswordAck(const SetDevPasswordAck& from);
  SetDevPasswordAck(SetDevPasswordAck&& from) noexcept
    : SetDevPasswordAck() {
    *this = ::std::move(from);
  }

  inline SetDevPasswordAck& operator=(const SetDevPasswordAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDevPasswordAck& operator=(SetDevPasswordAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDevPasswordAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDevPasswordAck* internal_default_instance() {
    return reinterpret_cast<const SetDevPasswordAck*>(
               &_SetDevPasswordAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SetDevPasswordAck& a, SetDevPasswordAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDevPasswordAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDevPasswordAck* New() const final {
    return CreateMaybeMessage<SetDevPasswordAck>(nullptr);
  }

  SetDevPasswordAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDevPasswordAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDevPasswordAck& from);
  void MergeFrom(const SetDevPasswordAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDevPasswordAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetDevPasswordAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SetDevPasswordAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetDevPasswordReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevPasswordReq) */ {
 public:
  GetDevPasswordReq();
  virtual ~GetDevPasswordReq();

  GetDevPasswordReq(const GetDevPasswordReq& from);
  GetDevPasswordReq(GetDevPasswordReq&& from) noexcept
    : GetDevPasswordReq() {
    *this = ::std::move(from);
  }

  inline GetDevPasswordReq& operator=(const GetDevPasswordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevPasswordReq& operator=(GetDevPasswordReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevPasswordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevPasswordReq* internal_default_instance() {
    return reinterpret_cast<const GetDevPasswordReq*>(
               &_GetDevPasswordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetDevPasswordReq& a, GetDevPasswordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevPasswordReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevPasswordReq* New() const final {
    return CreateMaybeMessage<GetDevPasswordReq>(nullptr);
  }

  GetDevPasswordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevPasswordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevPasswordReq& from);
  void MergeFrom(const GetDevPasswordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevPasswordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevPasswordReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:GetDevPasswordReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetDevPasswordAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevPasswordAck) */ {
 public:
  GetDevPasswordAck();
  virtual ~GetDevPasswordAck();

  GetDevPasswordAck(const GetDevPasswordAck& from);
  GetDevPasswordAck(GetDevPasswordAck&& from) noexcept
    : GetDevPasswordAck() {
    *this = ::std::move(from);
  }

  inline GetDevPasswordAck& operator=(const GetDevPasswordAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevPasswordAck& operator=(GetDevPasswordAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevPasswordAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevPasswordAck* internal_default_instance() {
    return reinterpret_cast<const GetDevPasswordAck*>(
               &_GetDevPasswordAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetDevPasswordAck& a, GetDevPasswordAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevPasswordAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevPasswordAck* New() const final {
    return CreateMaybeMessage<GetDevPasswordAck>(nullptr);
  }

  GetDevPasswordAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevPasswordAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevPasswordAck& from);
  void MergeFrom(const GetDevPasswordAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevPasswordAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevPasswordAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kAddressFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetDevPasswordAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetClientInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetClientInfoReq) */ {
 public:
  GetClientInfoReq();
  virtual ~GetClientInfoReq();

  GetClientInfoReq(const GetClientInfoReq& from);
  GetClientInfoReq(GetClientInfoReq&& from) noexcept
    : GetClientInfoReq() {
    *this = ::std::move(from);
  }

  inline GetClientInfoReq& operator=(const GetClientInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClientInfoReq& operator=(GetClientInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClientInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClientInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetClientInfoReq*>(
               &_GetClientInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetClientInfoReq& a, GetClientInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClientInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClientInfoReq* New() const final {
    return CreateMaybeMessage<GetClientInfoReq>(nullptr);
  }

  GetClientInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClientInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClientInfoReq& from);
  void MergeFrom(const GetClientInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClientInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetClientInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPhoneVersionFieldNumber = 4,
    kPhoneTypeFieldNumber = 2,
    kPhoneLangFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string phone_version = 4;
  void clear_phone_version();
  const std::string& phone_version() const;
  void set_phone_version(const std::string& value);
  void set_phone_version(std::string&& value);
  void set_phone_version(const char* value);
  void set_phone_version(const char* value, size_t size);
  std::string* mutable_phone_version();
  std::string* release_phone_version();
  void set_allocated_phone_version(std::string* phone_version);
  private:
  const std::string& _internal_phone_version() const;
  void _internal_set_phone_version(const std::string& value);
  std::string* _internal_mutable_phone_version();
  public:

  // .DeviceType phone_type = 2;
  void clear_phone_type();
  ::DeviceType phone_type() const;
  void set_phone_type(::DeviceType value);
  private:
  ::DeviceType _internal_phone_type() const;
  void _internal_set_phone_type(::DeviceType value);
  public:

  // .DeviceLang phone_lang = 3;
  void clear_phone_lang();
  ::DeviceLang phone_lang() const;
  void set_phone_lang(::DeviceLang value);
  private:
  ::DeviceLang _internal_phone_lang() const;
  void _internal_set_phone_lang(::DeviceLang value);
  public:

  // @@protoc_insertion_point(class_scope:GetClientInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_version_;
  int phone_type_;
  int phone_lang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetClientInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetClientInfoAck) */ {
 public:
  GetClientInfoAck();
  virtual ~GetClientInfoAck();

  GetClientInfoAck(const GetClientInfoAck& from);
  GetClientInfoAck(GetClientInfoAck&& from) noexcept
    : GetClientInfoAck() {
    *this = ::std::move(from);
  }

  inline GetClientInfoAck& operator=(const GetClientInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClientInfoAck& operator=(GetClientInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetClientInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClientInfoAck* internal_default_instance() {
    return reinterpret_cast<const GetClientInfoAck*>(
               &_GetClientInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetClientInfoAck& a, GetClientInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClientInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetClientInfoAck* New() const final {
    return CreateMaybeMessage<GetClientInfoAck>(nullptr);
  }

  GetClientInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetClientInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetClientInfoAck& from);
  void MergeFrom(const GetClientInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClientInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetClientInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kMinVersionFieldNumber = 4,
    kIsUpdateFieldNumber = 5,
    kVerFieldNumber = 6,
    kDescFieldNumber = 7,
    kDlFieldNumber = 8,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string min_version = 4;
  void clear_min_version();
  const std::string& min_version() const;
  void set_min_version(const std::string& value);
  void set_min_version(std::string&& value);
  void set_min_version(const char* value);
  void set_min_version(const char* value, size_t size);
  std::string* mutable_min_version();
  std::string* release_min_version();
  void set_allocated_min_version(std::string* min_version);
  private:
  const std::string& _internal_min_version() const;
  void _internal_set_min_version(const std::string& value);
  std::string* _internal_mutable_min_version();
  public:

  // string is_update = 5;
  void clear_is_update();
  const std::string& is_update() const;
  void set_is_update(const std::string& value);
  void set_is_update(std::string&& value);
  void set_is_update(const char* value);
  void set_is_update(const char* value, size_t size);
  std::string* mutable_is_update();
  std::string* release_is_update();
  void set_allocated_is_update(std::string* is_update);
  private:
  const std::string& _internal_is_update() const;
  void _internal_set_is_update(const std::string& value);
  std::string* _internal_mutable_is_update();
  public:

  // string ver = 6;
  void clear_ver();
  const std::string& ver() const;
  void set_ver(const std::string& value);
  void set_ver(std::string&& value);
  void set_ver(const char* value);
  void set_ver(const char* value, size_t size);
  std::string* mutable_ver();
  std::string* release_ver();
  void set_allocated_ver(std::string* ver);
  private:
  const std::string& _internal_ver() const;
  void _internal_set_ver(const std::string& value);
  std::string* _internal_mutable_ver();
  public:

  // string desc = 7;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string dl = 8;
  void clear_dl();
  const std::string& dl() const;
  void set_dl(const std::string& value);
  void set_dl(std::string&& value);
  void set_dl(const char* value);
  void set_dl(const char* value, size_t size);
  std::string* mutable_dl();
  std::string* release_dl();
  void set_allocated_dl(std::string* dl);
  private:
  const std::string& _internal_dl() const;
  void _internal_set_dl(const std::string& value);
  std::string* _internal_mutable_dl();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetClientInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr is_update_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dl_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetNodeInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNodeInfoReq) */ {
 public:
  GetNodeInfoReq();
  virtual ~GetNodeInfoReq();

  GetNodeInfoReq(const GetNodeInfoReq& from);
  GetNodeInfoReq(GetNodeInfoReq&& from) noexcept
    : GetNodeInfoReq() {
    *this = ::std::move(from);
  }

  inline GetNodeInfoReq& operator=(const GetNodeInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeInfoReq& operator=(GetNodeInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetNodeInfoReq*>(
               &_GetNodeInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetNodeInfoReq& a, GetNodeInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeInfoReq* New() const final {
    return CreateMaybeMessage<GetNodeInfoReq>(nullptr);
  }

  GetNodeInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeInfoReq& from);
  void MergeFrom(const GetNodeInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNodeInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:GetNodeInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class NodeInfos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeInfos) */ {
 public:
  NodeInfos();
  virtual ~NodeInfos();

  NodeInfos(const NodeInfos& from);
  NodeInfos(NodeInfos&& from) noexcept
    : NodeInfos() {
    *this = ::std::move(from);
  }

  inline NodeInfos& operator=(const NodeInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfos& operator=(NodeInfos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfos* internal_default_instance() {
    return reinterpret_cast<const NodeInfos*>(
               &_NodeInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(NodeInfos& a, NodeInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfos* New() const final {
    return CreateMaybeMessage<NodeInfos>(nullptr);
  }

  NodeInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfos& from);
  void MergeFrom(const NodeInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeInfos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
    kIpFieldNumber = 2,
    kNameFieldNumber = 3,
    kPortFieldNumber = 4,
    kPriceFieldNumber = 5,
  };
  // string enable = 1;
  void clear_enable();
  const std::string& enable() const;
  void set_enable(const std::string& value);
  void set_enable(std::string&& value);
  void set_enable(const char* value);
  void set_enable(const char* value, size_t size);
  std::string* mutable_enable();
  std::string* release_enable();
  void set_allocated_enable(std::string* enable);
  private:
  const std::string& _internal_enable() const;
  void _internal_set_enable(const std::string& value);
  std::string* _internal_mutable_enable();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string port = 4;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string price = 5;
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // @@protoc_insertion_point(class_scope:NodeInfos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class NodeList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeList) */ {
 public:
  NodeList();
  virtual ~NodeList();

  NodeList(const NodeList& from);
  NodeList(NodeList&& from) noexcept
    : NodeList() {
    *this = ::std::move(from);
  }

  inline NodeList& operator=(const NodeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeList& operator=(NodeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeList* internal_default_instance() {
    return reinterpret_cast<const NodeList*>(
               &_NodeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(NodeList& a, NodeList& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeList* New() const final {
    return CreateMaybeMessage<NodeList>(nullptr);
  }

  NodeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeList& from);
  void MergeFrom(const NodeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeInfoFieldNumber = 1,
    kLocalFieldNumber = 2,
  };
  // repeated .NodeInfos node_info = 1;
  int node_info_size() const;
  private:
  int _internal_node_info_size() const;
  public:
  void clear_node_info();
  ::NodeInfos* mutable_node_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfos >*
      mutable_node_info();
  private:
  const ::NodeInfos& _internal_node_info(int index) const;
  ::NodeInfos* _internal_add_node_info();
  public:
  const ::NodeInfos& node_info(int index) const;
  ::NodeInfos* add_node_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfos >&
      node_info() const;

  // string local = 2;
  void clear_local();
  const std::string& local() const;
  void set_local(const std::string& value);
  void set_local(std::string&& value);
  void set_local(const char* value);
  void set_local(const char* value, size_t size);
  std::string* mutable_local();
  std::string* release_local();
  void set_allocated_local(std::string* local);
  private:
  const std::string& _internal_local() const;
  void _internal_set_local(const std::string& value);
  std::string* _internal_mutable_local();
  public:

  // @@protoc_insertion_point(class_scope:NodeList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfos > node_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetNodeInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNodeInfoAck) */ {
 public:
  GetNodeInfoAck();
  virtual ~GetNodeInfoAck();

  GetNodeInfoAck(const GetNodeInfoAck& from);
  GetNodeInfoAck(GetNodeInfoAck&& from) noexcept
    : GetNodeInfoAck() {
    *this = ::std::move(from);
  }

  inline GetNodeInfoAck& operator=(const GetNodeInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeInfoAck& operator=(GetNodeInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeInfoAck* internal_default_instance() {
    return reinterpret_cast<const GetNodeInfoAck*>(
               &_GetNodeInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetNodeInfoAck& a, GetNodeInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeInfoAck* New() const final {
    return CreateMaybeMessage<GetNodeInfoAck>(nullptr);
  }

  GetNodeInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeInfoAck& from);
  void MergeFrom(const GetNodeInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNodeInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeListFieldNumber = 4,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .NodeList node_list = 4;
  int node_list_size() const;
  private:
  int _internal_node_list_size() const;
  public:
  void clear_node_list();
  ::NodeList* mutable_node_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeList >*
      mutable_node_list();
  private:
  const ::NodeList& _internal_node_list(int index) const;
  ::NodeList* _internal_add_node_list();
  public:
  const ::NodeList& node_list(int index) const;
  ::NodeList* add_node_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeList >&
      node_list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetNodeInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeList > node_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetServiceInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetServiceInfoReq) */ {
 public:
  GetServiceInfoReq();
  virtual ~GetServiceInfoReq();

  GetServiceInfoReq(const GetServiceInfoReq& from);
  GetServiceInfoReq(GetServiceInfoReq&& from) noexcept
    : GetServiceInfoReq() {
    *this = ::std::move(from);
  }

  inline GetServiceInfoReq& operator=(const GetServiceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceInfoReq& operator=(GetServiceInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServiceInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetServiceInfoReq*>(
               &_GetServiceInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetServiceInfoReq& a, GetServiceInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceInfoReq* New() const final {
    return CreateMaybeMessage<GetServiceInfoReq>(nullptr);
  }

  GetServiceInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceInfoReq& from);
  void MergeFrom(const GetServiceInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetServiceInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kPublicNetIpFieldNumber = 3,
    kIsShowFieldNumber = 4,
    kSequenceNumberFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string public_net_ip = 3;
  void clear_public_net_ip();
  const std::string& public_net_ip() const;
  void set_public_net_ip(const std::string& value);
  void set_public_net_ip(std::string&& value);
  void set_public_net_ip(const char* value);
  void set_public_net_ip(const char* value, size_t size);
  std::string* mutable_public_net_ip();
  std::string* release_public_net_ip();
  void set_allocated_public_net_ip(std::string* public_net_ip);
  private:
  const std::string& _internal_public_net_ip() const;
  void _internal_set_public_net_ip(const std::string& value);
  std::string* _internal_mutable_public_net_ip();
  public:

  // bool is_show = 4;
  void clear_is_show();
  bool is_show() const;
  void set_is_show(bool value);
  private:
  bool _internal_is_show() const;
  void _internal_set_is_show(bool value);
  public:

  // uint32 sequence_number = 5;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetServiceInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_net_ip_;
  bool is_show_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ServiceFee :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServiceFee) */ {
 public:
  ServiceFee();
  virtual ~ServiceFee();

  ServiceFee(const ServiceFee& from);
  ServiceFee(ServiceFee&& from) noexcept
    : ServiceFee() {
    *this = ::std::move(from);
  }

  inline ServiceFee& operator=(const ServiceFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceFee& operator=(ServiceFee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceFee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceFee* internal_default_instance() {
    return reinterpret_cast<const ServiceFee*>(
               &_ServiceFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ServiceFee& a, ServiceFee& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceFee* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceFee* New() const final {
    return CreateMaybeMessage<ServiceFee>(nullptr);
  }

  ServiceFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceFee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceFee& from);
  void MergeFrom(const ServiceFee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceFee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServiceFee";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFeeFieldNumber = 1,
    kMinFeeFieldNumber = 2,
    kServiceFeeFieldNumber = 3,
    kAvgFeeFieldNumber = 4,
  };
  // string max_fee = 1;
  void clear_max_fee();
  const std::string& max_fee() const;
  void set_max_fee(const std::string& value);
  void set_max_fee(std::string&& value);
  void set_max_fee(const char* value);
  void set_max_fee(const char* value, size_t size);
  std::string* mutable_max_fee();
  std::string* release_max_fee();
  void set_allocated_max_fee(std::string* max_fee);
  private:
  const std::string& _internal_max_fee() const;
  void _internal_set_max_fee(const std::string& value);
  std::string* _internal_mutable_max_fee();
  public:

  // string min_fee = 2;
  void clear_min_fee();
  const std::string& min_fee() const;
  void set_min_fee(const std::string& value);
  void set_min_fee(std::string&& value);
  void set_min_fee(const char* value);
  void set_min_fee(const char* value, size_t size);
  std::string* mutable_min_fee();
  std::string* release_min_fee();
  void set_allocated_min_fee(std::string* min_fee);
  private:
  const std::string& _internal_min_fee() const;
  void _internal_set_min_fee(const std::string& value);
  std::string* _internal_mutable_min_fee();
  public:

  // string service_fee = 3;
  void clear_service_fee();
  const std::string& service_fee() const;
  void set_service_fee(const std::string& value);
  void set_service_fee(std::string&& value);
  void set_service_fee(const char* value);
  void set_service_fee(const char* value, size_t size);
  std::string* mutable_service_fee();
  std::string* release_service_fee();
  void set_allocated_service_fee(std::string* service_fee);
  private:
  const std::string& _internal_service_fee() const;
  void _internal_set_service_fee(const std::string& value);
  std::string* _internal_mutable_service_fee();
  public:

  // string avg_fee = 4;
  void clear_avg_fee();
  const std::string& avg_fee() const;
  void set_avg_fee(const std::string& value);
  void set_avg_fee(std::string&& value);
  void set_avg_fee(const char* value);
  void set_avg_fee(const char* value, size_t size);
  std::string* mutable_avg_fee();
  std::string* release_avg_fee();
  void set_allocated_avg_fee(std::string* avg_fee);
  private:
  const std::string& _internal_avg_fee() const;
  void _internal_set_avg_fee(const std::string& value);
  std::string* _internal_mutable_avg_fee();
  public:

  // @@protoc_insertion_point(class_scope:ServiceFee)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avg_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetServiceInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetServiceInfoAck) */ {
 public:
  GetServiceInfoAck();
  virtual ~GetServiceInfoAck();

  GetServiceInfoAck(const GetServiceInfoAck& from);
  GetServiceInfoAck(GetServiceInfoAck&& from) noexcept
    : GetServiceInfoAck() {
    *this = ::std::move(from);
  }

  inline GetServiceInfoAck& operator=(const GetServiceInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceInfoAck& operator=(GetServiceInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetServiceInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServiceInfoAck* internal_default_instance() {
    return reinterpret_cast<const GetServiceInfoAck*>(
               &_GetServiceInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetServiceInfoAck& a, GetServiceInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetServiceInfoAck* New() const final {
    return CreateMaybeMessage<GetServiceInfoAck>(nullptr);
  }

  GetServiceInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetServiceInfoAck& from);
  void MergeFrom(const GetServiceInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetServiceInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetServiceInfoAck_SyncStatus SyncStatus;
  static constexpr SyncStatus TRUE =
    GetServiceInfoAck_SyncStatus_TRUE;
  static constexpr SyncStatus FALSE =
    GetServiceInfoAck_SyncStatus_FALSE;
  static constexpr SyncStatus FAIL =
    GetServiceInfoAck_SyncStatus_FAIL;
  static inline bool SyncStatus_IsValid(int value) {
    return GetServiceInfoAck_SyncStatus_IsValid(value);
  }
  static constexpr SyncStatus SyncStatus_MIN =
    GetServiceInfoAck_SyncStatus_SyncStatus_MIN;
  static constexpr SyncStatus SyncStatus_MAX =
    GetServiceInfoAck_SyncStatus_SyncStatus_MAX;
  static constexpr int SyncStatus_ARRAYSIZE =
    GetServiceInfoAck_SyncStatus_SyncStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SyncStatus_descriptor() {
    return GetServiceInfoAck_SyncStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& SyncStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SyncStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SyncStatus_Name.");
    return GetServiceInfoAck_SyncStatus_Name(enum_t_value);
  }
  static inline bool SyncStatus_Parse(const std::string& name,
      SyncStatus* value) {
    return GetServiceInfoAck_SyncStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFeeInfoFieldNumber = 6,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kMacHashFieldNumber = 4,
    kDeviceVersionFieldNumber = 5,
    kCodeFieldNumber = 2,
    kIsSyncFieldNumber = 7,
    kHeightFieldNumber = 8,
    kSequenceFieldNumber = 9,
  };
  // repeated .ServiceFee service_fee_info = 6;
  int service_fee_info_size() const;
  private:
  int _internal_service_fee_info_size() const;
  public:
  void clear_service_fee_info();
  ::ServiceFee* mutable_service_fee_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >*
      mutable_service_fee_info();
  private:
  const ::ServiceFee& _internal_service_fee_info(int index) const;
  ::ServiceFee* _internal_add_service_fee_info();
  public:
  const ::ServiceFee& service_fee_info(int index) const;
  ::ServiceFee* add_service_fee_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >&
      service_fee_info() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string mac_hash = 4;
  void clear_mac_hash();
  const std::string& mac_hash() const;
  void set_mac_hash(const std::string& value);
  void set_mac_hash(std::string&& value);
  void set_mac_hash(const char* value);
  void set_mac_hash(const char* value, size_t size);
  std::string* mutable_mac_hash();
  std::string* release_mac_hash();
  void set_allocated_mac_hash(std::string* mac_hash);
  private:
  const std::string& _internal_mac_hash() const;
  void _internal_set_mac_hash(const std::string& value);
  std::string* _internal_mutable_mac_hash();
  public:

  // string device_version = 5;
  void clear_device_version();
  const std::string& device_version() const;
  void set_device_version(const std::string& value);
  void set_device_version(std::string&& value);
  void set_device_version(const char* value);
  void set_device_version(const char* value, size_t size);
  std::string* mutable_device_version();
  std::string* release_device_version();
  void set_allocated_device_version(std::string* device_version);
  private:
  const std::string& _internal_device_version() const;
  void _internal_set_device_version(const std::string& value);
  std::string* _internal_mutable_device_version();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .GetServiceInfoAck.SyncStatus is_sync = 7;
  void clear_is_sync();
  ::GetServiceInfoAck_SyncStatus is_sync() const;
  void set_is_sync(::GetServiceInfoAck_SyncStatus value);
  private:
  ::GetServiceInfoAck_SyncStatus _internal_is_sync() const;
  void _internal_set_is_sync(::GetServiceInfoAck_SyncStatus value);
  public:

  // sint32 height = 8;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 sequence = 9;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetServiceInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee > service_fee_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  int is_sync_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SetServiceFeeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetServiceFeeReq) */ {
 public:
  SetServiceFeeReq();
  virtual ~SetServiceFeeReq();

  SetServiceFeeReq(const SetServiceFeeReq& from);
  SetServiceFeeReq(SetServiceFeeReq&& from) noexcept
    : SetServiceFeeReq() {
    *this = ::std::move(from);
  }

  inline SetServiceFeeReq& operator=(const SetServiceFeeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetServiceFeeReq& operator=(SetServiceFeeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetServiceFeeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetServiceFeeReq* internal_default_instance() {
    return reinterpret_cast<const SetServiceFeeReq*>(
               &_SetServiceFeeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetServiceFeeReq& a, SetServiceFeeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetServiceFeeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetServiceFeeReq* New() const final {
    return CreateMaybeMessage<SetServiceFeeReq>(nullptr);
  }

  SetServiceFeeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetServiceFeeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetServiceFeeReq& from);
  void MergeFrom(const SetServiceFeeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetServiceFeeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetServiceFeeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kServiceFeeFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string service_fee = 3;
  void clear_service_fee();
  const std::string& service_fee() const;
  void set_service_fee(const std::string& value);
  void set_service_fee(std::string&& value);
  void set_service_fee(const char* value);
  void set_service_fee(const char* value, size_t size);
  std::string* mutable_service_fee();
  std::string* release_service_fee();
  void set_allocated_service_fee(std::string* service_fee);
  private:
  const std::string& _internal_service_fee() const;
  void _internal_set_service_fee(const std::string& value);
  std::string* _internal_mutable_service_fee();
  public:

  // @@protoc_insertion_point(class_scope:SetServiceFeeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SetServiceFeeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetServiceFeeAck) */ {
 public:
  SetServiceFeeAck();
  virtual ~SetServiceFeeAck();

  SetServiceFeeAck(const SetServiceFeeAck& from);
  SetServiceFeeAck(SetServiceFeeAck&& from) noexcept
    : SetServiceFeeAck() {
    *this = ::std::move(from);
  }

  inline SetServiceFeeAck& operator=(const SetServiceFeeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetServiceFeeAck& operator=(SetServiceFeeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetServiceFeeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetServiceFeeAck* internal_default_instance() {
    return reinterpret_cast<const SetServiceFeeAck*>(
               &_SetServiceFeeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetServiceFeeAck& a, SetServiceFeeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SetServiceFeeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetServiceFeeAck* New() const final {
    return CreateMaybeMessage<SetServiceFeeAck>(nullptr);
  }

  SetServiceFeeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetServiceFeeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetServiceFeeAck& from);
  void MergeFrom(const SetServiceFeeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetServiceFeeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetServiceFeeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SetServiceFeeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetPacketFeeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPacketFeeReq) */ {
 public:
  GetPacketFeeReq();
  virtual ~GetPacketFeeReq();

  GetPacketFeeReq(const GetPacketFeeReq& from);
  GetPacketFeeReq(GetPacketFeeReq&& from) noexcept
    : GetPacketFeeReq() {
    *this = ::std::move(from);
  }

  inline GetPacketFeeReq& operator=(const GetPacketFeeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPacketFeeReq& operator=(GetPacketFeeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPacketFeeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPacketFeeReq* internal_default_instance() {
    return reinterpret_cast<const GetPacketFeeReq*>(
               &_GetPacketFeeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetPacketFeeReq& a, GetPacketFeeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPacketFeeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPacketFeeReq* New() const final {
    return CreateMaybeMessage<GetPacketFeeReq>(nullptr);
  }

  GetPacketFeeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPacketFeeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPacketFeeReq& from);
  void MergeFrom(const GetPacketFeeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPacketFeeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPacketFeeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kPublicNetIpFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string public_net_ip = 3;
  void clear_public_net_ip();
  const std::string& public_net_ip() const;
  void set_public_net_ip(const std::string& value);
  void set_public_net_ip(std::string&& value);
  void set_public_net_ip(const char* value);
  void set_public_net_ip(const char* value, size_t size);
  std::string* mutable_public_net_ip();
  std::string* release_public_net_ip();
  void set_allocated_public_net_ip(std::string* public_net_ip);
  private:
  const std::string& _internal_public_net_ip() const;
  void _internal_set_public_net_ip(const std::string& value);
  std::string* _internal_mutable_public_net_ip();
  public:

  // @@protoc_insertion_point(class_scope:GetPacketFeeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_net_ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetPacketFeeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPacketFeeAck) */ {
 public:
  GetPacketFeeAck();
  virtual ~GetPacketFeeAck();

  GetPacketFeeAck(const GetPacketFeeAck& from);
  GetPacketFeeAck(GetPacketFeeAck&& from) noexcept
    : GetPacketFeeAck() {
    *this = ::std::move(from);
  }

  inline GetPacketFeeAck& operator=(const GetPacketFeeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPacketFeeAck& operator=(GetPacketFeeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPacketFeeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPacketFeeAck* internal_default_instance() {
    return reinterpret_cast<const GetPacketFeeAck*>(
               &_GetPacketFeeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetPacketFeeAck& a, GetPacketFeeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPacketFeeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPacketFeeAck* New() const final {
    return CreateMaybeMessage<GetPacketFeeAck>(nullptr);
  }

  GetPacketFeeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPacketFeeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPacketFeeAck& from);
  void MergeFrom(const GetPacketFeeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPacketFeeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPacketFeeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kPacketFeeFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string packet_fee = 4;
  void clear_packet_fee();
  const std::string& packet_fee() const;
  void set_packet_fee(const std::string& value);
  void set_packet_fee(std::string&& value);
  void set_packet_fee(const char* value);
  void set_packet_fee(const char* value, size_t size);
  std::string* mutable_packet_fee();
  std::string* release_packet_fee();
  void set_allocated_packet_fee(std::string* packet_fee);
  private:
  const std::string& _internal_packet_fee() const;
  void _internal_set_packet_fee(const std::string& value);
  std::string* _internal_mutable_packet_fee();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetPacketFeeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_fee_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SetPacketFeeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetPacketFeeReq) */ {
 public:
  SetPacketFeeReq();
  virtual ~SetPacketFeeReq();

  SetPacketFeeReq(const SetPacketFeeReq& from);
  SetPacketFeeReq(SetPacketFeeReq&& from) noexcept
    : SetPacketFeeReq() {
    *this = ::std::move(from);
  }

  inline SetPacketFeeReq& operator=(const SetPacketFeeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPacketFeeReq& operator=(SetPacketFeeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPacketFeeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPacketFeeReq* internal_default_instance() {
    return reinterpret_cast<const SetPacketFeeReq*>(
               &_SetPacketFeeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetPacketFeeReq& a, SetPacketFeeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPacketFeeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPacketFeeReq* New() const final {
    return CreateMaybeMessage<SetPacketFeeReq>(nullptr);
  }

  SetPacketFeeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPacketFeeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPacketFeeReq& from);
  void MergeFrom(const SetPacketFeeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPacketFeeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetPacketFeeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kPublicNetIpFieldNumber = 3,
    kPacketFeeFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string public_net_ip = 3;
  void clear_public_net_ip();
  const std::string& public_net_ip() const;
  void set_public_net_ip(const std::string& value);
  void set_public_net_ip(std::string&& value);
  void set_public_net_ip(const char* value);
  void set_public_net_ip(const char* value, size_t size);
  std::string* mutable_public_net_ip();
  std::string* release_public_net_ip();
  void set_allocated_public_net_ip(std::string* public_net_ip);
  private:
  const std::string& _internal_public_net_ip() const;
  void _internal_set_public_net_ip(const std::string& value);
  std::string* _internal_mutable_public_net_ip();
  public:

  // string packet_fee = 4;
  void clear_packet_fee();
  const std::string& packet_fee() const;
  void set_packet_fee(const std::string& value);
  void set_packet_fee(std::string&& value);
  void set_packet_fee(const char* value);
  void set_packet_fee(const char* value, size_t size);
  std::string* mutable_packet_fee();
  std::string* release_packet_fee();
  void set_allocated_packet_fee(std::string* packet_fee);
  private:
  const std::string& _internal_packet_fee() const;
  void _internal_set_packet_fee(const std::string& value);
  std::string* _internal_mutable_packet_fee();
  public:

  // @@protoc_insertion_point(class_scope:SetPacketFeeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_net_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SetPacketFeeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetPacketFeeAck) */ {
 public:
  SetPacketFeeAck();
  virtual ~SetPacketFeeAck();

  SetPacketFeeAck(const SetPacketFeeAck& from);
  SetPacketFeeAck(SetPacketFeeAck&& from) noexcept
    : SetPacketFeeAck() {
    *this = ::std::move(from);
  }

  inline SetPacketFeeAck& operator=(const SetPacketFeeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPacketFeeAck& operator=(SetPacketFeeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPacketFeeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPacketFeeAck* internal_default_instance() {
    return reinterpret_cast<const SetPacketFeeAck*>(
               &_SetPacketFeeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SetPacketFeeAck& a, SetPacketFeeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPacketFeeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPacketFeeAck* New() const final {
    return CreateMaybeMessage<SetPacketFeeAck>(nullptr);
  }

  SetPacketFeeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPacketFeeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPacketFeeAck& from);
  void MergeFrom(const SetPacketFeeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPacketFeeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetPacketFeeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SetPacketFeeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetBlockTopReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockTopReq) */ {
 public:
  GetBlockTopReq();
  virtual ~GetBlockTopReq();

  GetBlockTopReq(const GetBlockTopReq& from);
  GetBlockTopReq(GetBlockTopReq&& from) noexcept
    : GetBlockTopReq() {
    *this = ::std::move(from);
  }

  inline GetBlockTopReq& operator=(const GetBlockTopReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockTopReq& operator=(GetBlockTopReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockTopReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockTopReq* internal_default_instance() {
    return reinterpret_cast<const GetBlockTopReq*>(
               &_GetBlockTopReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetBlockTopReq& a, GetBlockTopReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockTopReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockTopReq* New() const final {
    return CreateMaybeMessage<GetBlockTopReq>(nullptr);
  }

  GetBlockTopReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockTopReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockTopReq& from);
  void MergeFrom(const GetBlockTopReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockTopReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockTopReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kFdFieldNumber = 2,
    kPortFieldNumber = 3,
    kIpFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint32 fd = 2;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::uint32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ip = 4;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetBlockTopReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TApiGetBlockTopAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TApiGetBlockTopAck) */ {
 public:
  TApiGetBlockTopAck();
  virtual ~TApiGetBlockTopAck();

  TApiGetBlockTopAck(const TApiGetBlockTopAck& from);
  TApiGetBlockTopAck(TApiGetBlockTopAck&& from) noexcept
    : TApiGetBlockTopAck() {
    *this = ::std::move(from);
  }

  inline TApiGetBlockTopAck& operator=(const TApiGetBlockTopAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TApiGetBlockTopAck& operator=(TApiGetBlockTopAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TApiGetBlockTopAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TApiGetBlockTopAck* internal_default_instance() {
    return reinterpret_cast<const TApiGetBlockTopAck*>(
               &_TApiGetBlockTopAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TApiGetBlockTopAck& a, TApiGetBlockTopAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TApiGetBlockTopAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TApiGetBlockTopAck* New() const final {
    return CreateMaybeMessage<TApiGetBlockTopAck>(nullptr);
  }

  TApiGetBlockTopAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TApiGetBlockTopAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TApiGetBlockTopAck& from);
  void MergeFrom(const TApiGetBlockTopAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TApiGetBlockTopAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TApiGetBlockTopAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
    kTopFieldNumber = 4,
    kFdFieldNumber = 5,
    kPortFieldNumber = 6,
    kIpFieldNumber = 7,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 top = 4;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::uint32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fd = 5;
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::uint32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 6;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ip = 7;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TApiGetBlockTopAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetNodeServiceFeeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNodeServiceFeeReq) */ {
 public:
  GetNodeServiceFeeReq();
  virtual ~GetNodeServiceFeeReq();

  GetNodeServiceFeeReq(const GetNodeServiceFeeReq& from);
  GetNodeServiceFeeReq(GetNodeServiceFeeReq&& from) noexcept
    : GetNodeServiceFeeReq() {
    *this = ::std::move(from);
  }

  inline GetNodeServiceFeeReq& operator=(const GetNodeServiceFeeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeServiceFeeReq& operator=(GetNodeServiceFeeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeServiceFeeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeServiceFeeReq* internal_default_instance() {
    return reinterpret_cast<const GetNodeServiceFeeReq*>(
               &_GetNodeServiceFeeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetNodeServiceFeeReq& a, GetNodeServiceFeeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeServiceFeeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeServiceFeeReq* New() const final {
    return CreateMaybeMessage<GetNodeServiceFeeReq>(nullptr);
  }

  GetNodeServiceFeeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeServiceFeeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeServiceFeeReq& from);
  void MergeFrom(const GetNodeServiceFeeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeServiceFeeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNodeServiceFeeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:GetNodeServiceFeeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetNodeServiceFeeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetNodeServiceFeeAck) */ {
 public:
  GetNodeServiceFeeAck();
  virtual ~GetNodeServiceFeeAck();

  GetNodeServiceFeeAck(const GetNodeServiceFeeAck& from);
  GetNodeServiceFeeAck(GetNodeServiceFeeAck&& from) noexcept
    : GetNodeServiceFeeAck() {
    *this = ::std::move(from);
  }

  inline GetNodeServiceFeeAck& operator=(const GetNodeServiceFeeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeServiceFeeAck& operator=(GetNodeServiceFeeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNodeServiceFeeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodeServiceFeeAck* internal_default_instance() {
    return reinterpret_cast<const GetNodeServiceFeeAck*>(
               &_GetNodeServiceFeeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetNodeServiceFeeAck& a, GetNodeServiceFeeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeServiceFeeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNodeServiceFeeAck* New() const final {
    return CreateMaybeMessage<GetNodeServiceFeeAck>(nullptr);
  }

  GetNodeServiceFeeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNodeServiceFeeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNodeServiceFeeAck& from);
  void MergeFrom(const GetNodeServiceFeeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeServiceFeeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetNodeServiceFeeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFeeInfoFieldNumber = 4,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .ServiceFee service_fee_info = 4;
  int service_fee_info_size() const;
  private:
  int _internal_service_fee_info_size() const;
  public:
  void clear_service_fee_info();
  ::ServiceFee* mutable_service_fee_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >*
      mutable_service_fee_info();
  private:
  const ::ServiceFee& _internal_service_fee_info(int index) const;
  ::ServiceFee* _internal_add_service_fee_info();
  public:
  const ::ServiceFee& service_fee_info(int index) const;
  ::ServiceFee* add_service_fee_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >&
      service_fee_info() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetNodeServiceFeeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee > service_fee_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetDevInfoListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevInfoListReq) */ {
 public:
  GetDevInfoListReq();
  virtual ~GetDevInfoListReq();

  GetDevInfoListReq(const GetDevInfoListReq& from);
  GetDevInfoListReq(GetDevInfoListReq&& from) noexcept
    : GetDevInfoListReq() {
    *this = ::std::move(from);
  }

  inline GetDevInfoListReq& operator=(const GetDevInfoListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevInfoListReq& operator=(GetDevInfoListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevInfoListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevInfoListReq* internal_default_instance() {
    return reinterpret_cast<const GetDevInfoListReq*>(
               &_GetDevInfoListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetDevInfoListReq& a, GetDevInfoListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevInfoListReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevInfoListReq* New() const final {
    return CreateMaybeMessage<GetDevInfoListReq>(nullptr);
  }

  GetDevInfoListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevInfoListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevInfoListReq& from);
  void MergeFrom(const GetDevInfoListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevInfoListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevInfoListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kDevaddrFieldNumber = 3,
    kPublicNetIpFieldNumber = 4,
    kIsShowFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string devaddr = 3;
  void clear_devaddr();
  const std::string& devaddr() const;
  void set_devaddr(const std::string& value);
  void set_devaddr(std::string&& value);
  void set_devaddr(const char* value);
  void set_devaddr(const char* value, size_t size);
  std::string* mutable_devaddr();
  std::string* release_devaddr();
  void set_allocated_devaddr(std::string* devaddr);
  private:
  const std::string& _internal_devaddr() const;
  void _internal_set_devaddr(const std::string& value);
  std::string* _internal_mutable_devaddr();
  public:

  // string public_net_ip = 4;
  void clear_public_net_ip();
  const std::string& public_net_ip() const;
  void set_public_net_ip(const std::string& value);
  void set_public_net_ip(std::string&& value);
  void set_public_net_ip(const char* value);
  void set_public_net_ip(const char* value, size_t size);
  std::string* mutable_public_net_ip();
  std::string* release_public_net_ip();
  void set_allocated_public_net_ip(std::string* public_net_ip);
  private:
  const std::string& _internal_public_net_ip() const;
  void _internal_set_public_net_ip(const std::string& value);
  std::string* _internal_mutable_public_net_ip();
  public:

  // bool is_show = 5;
  void clear_is_show();
  bool is_show() const;
  void set_is_show(bool value);
  private:
  bool _internal_is_show() const;
  void _internal_set_is_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GetDevInfoListReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_net_ip_;
  bool is_show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetDevInfoListAcK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevInfoListAcK) */ {
 public:
  GetDevInfoListAcK();
  virtual ~GetDevInfoListAcK();

  GetDevInfoListAcK(const GetDevInfoListAcK& from);
  GetDevInfoListAcK(GetDevInfoListAcK&& from) noexcept
    : GetDevInfoListAcK() {
    *this = ::std::move(from);
  }

  inline GetDevInfoListAcK& operator=(const GetDevInfoListAcK& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevInfoListAcK& operator=(GetDevInfoListAcK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevInfoListAcK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevInfoListAcK* internal_default_instance() {
    return reinterpret_cast<const GetDevInfoListAcK*>(
               &_GetDevInfoListAcK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetDevInfoListAcK& a, GetDevInfoListAcK& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevInfoListAcK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevInfoListAcK* New() const final {
    return CreateMaybeMessage<GetDevInfoListAcK>(nullptr);
  }

  GetDevInfoListAcK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevInfoListAcK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevInfoListAcK& from);
  void MergeFrom(const GetDevInfoListAcK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevInfoListAcK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevInfoListAcK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFeeInfoFieldNumber = 9,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kMacHashFieldNumber = 4,
    kDeviceaddrFieldNumber = 5,
    kDeviceVersionFieldNumber = 6,
    kCodeFieldNumber = 2,
    kDeviceHeightFieldNumber = 7,
    kPublicNetHeightFieldNumber = 8,
  };
  // repeated .ServiceFee service_fee_info = 9;
  int service_fee_info_size() const;
  private:
  int _internal_service_fee_info_size() const;
  public:
  void clear_service_fee_info();
  ::ServiceFee* mutable_service_fee_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >*
      mutable_service_fee_info();
  private:
  const ::ServiceFee& _internal_service_fee_info(int index) const;
  ::ServiceFee* _internal_add_service_fee_info();
  public:
  const ::ServiceFee& service_fee_info(int index) const;
  ::ServiceFee* add_service_fee_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >&
      service_fee_info() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string mac_hash = 4;
  void clear_mac_hash();
  const std::string& mac_hash() const;
  void set_mac_hash(const std::string& value);
  void set_mac_hash(std::string&& value);
  void set_mac_hash(const char* value);
  void set_mac_hash(const char* value, size_t size);
  std::string* mutable_mac_hash();
  std::string* release_mac_hash();
  void set_allocated_mac_hash(std::string* mac_hash);
  private:
  const std::string& _internal_mac_hash() const;
  void _internal_set_mac_hash(const std::string& value);
  std::string* _internal_mutable_mac_hash();
  public:

  // string deviceaddr = 5;
  void clear_deviceaddr();
  const std::string& deviceaddr() const;
  void set_deviceaddr(const std::string& value);
  void set_deviceaddr(std::string&& value);
  void set_deviceaddr(const char* value);
  void set_deviceaddr(const char* value, size_t size);
  std::string* mutable_deviceaddr();
  std::string* release_deviceaddr();
  void set_allocated_deviceaddr(std::string* deviceaddr);
  private:
  const std::string& _internal_deviceaddr() const;
  void _internal_set_deviceaddr(const std::string& value);
  std::string* _internal_mutable_deviceaddr();
  public:

  // string device_version = 6;
  void clear_device_version();
  const std::string& device_version() const;
  void set_device_version(const std::string& value);
  void set_device_version(std::string&& value);
  void set_device_version(const char* value);
  void set_device_version(const char* value, size_t size);
  std::string* mutable_device_version();
  std::string* release_device_version();
  void set_allocated_device_version(std::string* device_version);
  private:
  const std::string& _internal_device_version() const;
  void _internal_set_device_version(const std::string& value);
  std::string* _internal_mutable_device_version();
  public:

  // sint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 device_height = 7;
  void clear_device_height();
  ::PROTOBUF_NAMESPACE_ID::int32 device_height() const;
  void set_device_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_height() const;
  void _internal_set_device_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 public_net_height = 8;
  void clear_public_net_height();
  ::PROTOBUF_NAMESPACE_ID::int32 public_net_height() const;
  void set_public_net_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_net_height() const;
  void _internal_set_public_net_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetDevInfoListAcK)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee > service_fee_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_net_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetDevPrivateKeyReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevPrivateKeyReq) */ {
 public:
  GetDevPrivateKeyReq();
  virtual ~GetDevPrivateKeyReq();

  GetDevPrivateKeyReq(const GetDevPrivateKeyReq& from);
  GetDevPrivateKeyReq(GetDevPrivateKeyReq&& from) noexcept
    : GetDevPrivateKeyReq() {
    *this = ::std::move(from);
  }

  inline GetDevPrivateKeyReq& operator=(const GetDevPrivateKeyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevPrivateKeyReq& operator=(GetDevPrivateKeyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevPrivateKeyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevPrivateKeyReq* internal_default_instance() {
    return reinterpret_cast<const GetDevPrivateKeyReq*>(
               &_GetDevPrivateKeyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetDevPrivateKeyReq& a, GetDevPrivateKeyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevPrivateKeyReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevPrivateKeyReq* New() const final {
    return CreateMaybeMessage<GetDevPrivateKeyReq>(nullptr);
  }

  GetDevPrivateKeyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevPrivateKeyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevPrivateKeyReq& from);
  void MergeFrom(const GetDevPrivateKeyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevPrivateKeyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevPrivateKeyReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kBs58AddrFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string bs58addr = 3;
  void clear_bs58addr();
  const std::string& bs58addr() const;
  void set_bs58addr(const std::string& value);
  void set_bs58addr(std::string&& value);
  void set_bs58addr(const char* value);
  void set_bs58addr(const char* value, size_t size);
  std::string* mutable_bs58addr();
  std::string* release_bs58addr();
  void set_allocated_bs58addr(std::string* bs58addr);
  private:
  const std::string& _internal_bs58addr() const;
  void _internal_set_bs58addr(const std::string& value);
  std::string* _internal_mutable_bs58addr();
  public:

  // @@protoc_insertion_point(class_scope:GetDevPrivateKeyReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bs58addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class DevPrivateKeyInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DevPrivateKeyInfo) */ {
 public:
  DevPrivateKeyInfo();
  virtual ~DevPrivateKeyInfo();

  DevPrivateKeyInfo(const DevPrivateKeyInfo& from);
  DevPrivateKeyInfo(DevPrivateKeyInfo&& from) noexcept
    : DevPrivateKeyInfo() {
    *this = ::std::move(from);
  }

  inline DevPrivateKeyInfo& operator=(const DevPrivateKeyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevPrivateKeyInfo& operator=(DevPrivateKeyInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevPrivateKeyInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevPrivateKeyInfo* internal_default_instance() {
    return reinterpret_cast<const DevPrivateKeyInfo*>(
               &_DevPrivateKeyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DevPrivateKeyInfo& a, DevPrivateKeyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DevPrivateKeyInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevPrivateKeyInfo* New() const final {
    return CreateMaybeMessage<DevPrivateKeyInfo>(nullptr);
  }

  DevPrivateKeyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevPrivateKeyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevPrivateKeyInfo& from);
  void MergeFrom(const DevPrivateKeyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevPrivateKeyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DevPrivateKeyInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBase58AddrFieldNumber = 1,
    kKeystoreFieldNumber = 2,
    kMnemonicFieldNumber = 3,
  };
  // string base58addr = 1;
  void clear_base58addr();
  const std::string& base58addr() const;
  void set_base58addr(const std::string& value);
  void set_base58addr(std::string&& value);
  void set_base58addr(const char* value);
  void set_base58addr(const char* value, size_t size);
  std::string* mutable_base58addr();
  std::string* release_base58addr();
  void set_allocated_base58addr(std::string* base58addr);
  private:
  const std::string& _internal_base58addr() const;
  void _internal_set_base58addr(const std::string& value);
  std::string* _internal_mutable_base58addr();
  public:

  // string keystore = 2;
  void clear_keystore();
  const std::string& keystore() const;
  void set_keystore(const std::string& value);
  void set_keystore(std::string&& value);
  void set_keystore(const char* value);
  void set_keystore(const char* value, size_t size);
  std::string* mutable_keystore();
  std::string* release_keystore();
  void set_allocated_keystore(std::string* keystore);
  private:
  const std::string& _internal_keystore() const;
  void _internal_set_keystore(const std::string& value);
  std::string* _internal_mutable_keystore();
  public:

  // string mnemonic = 3;
  void clear_mnemonic();
  const std::string& mnemonic() const;
  void set_mnemonic(const std::string& value);
  void set_mnemonic(std::string&& value);
  void set_mnemonic(const char* value);
  void set_mnemonic(const char* value, size_t size);
  std::string* mutable_mnemonic();
  std::string* release_mnemonic();
  void set_allocated_mnemonic(std::string* mnemonic);
  private:
  const std::string& _internal_mnemonic() const;
  void _internal_set_mnemonic(const std::string& value);
  std::string* _internal_mutable_mnemonic();
  public:

  // @@protoc_insertion_point(class_scope:DevPrivateKeyInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base58addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keystore_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mnemonic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetDevPrivateKeyAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevPrivateKeyAck) */ {
 public:
  GetDevPrivateKeyAck();
  virtual ~GetDevPrivateKeyAck();

  GetDevPrivateKeyAck(const GetDevPrivateKeyAck& from);
  GetDevPrivateKeyAck(GetDevPrivateKeyAck&& from) noexcept
    : GetDevPrivateKeyAck() {
    *this = ::std::move(from);
  }

  inline GetDevPrivateKeyAck& operator=(const GetDevPrivateKeyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevPrivateKeyAck& operator=(GetDevPrivateKeyAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevPrivateKeyAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevPrivateKeyAck* internal_default_instance() {
    return reinterpret_cast<const GetDevPrivateKeyAck*>(
               &_GetDevPrivateKeyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetDevPrivateKeyAck& a, GetDevPrivateKeyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevPrivateKeyAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevPrivateKeyAck* New() const final {
    return CreateMaybeMessage<GetDevPrivateKeyAck>(nullptr);
  }

  GetDevPrivateKeyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevPrivateKeyAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevPrivateKeyAck& from);
  void MergeFrom(const GetDevPrivateKeyAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevPrivateKeyAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevPrivateKeyAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevprivatekeyinfoFieldNumber = 4,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .DevPrivateKeyInfo devprivatekeyinfo = 4;
  int devprivatekeyinfo_size() const;
  private:
  int _internal_devprivatekeyinfo_size() const;
  public:
  void clear_devprivatekeyinfo();
  ::DevPrivateKeyInfo* mutable_devprivatekeyinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DevPrivateKeyInfo >*
      mutable_devprivatekeyinfo();
  private:
  const ::DevPrivateKeyInfo& _internal_devprivatekeyinfo(int index) const;
  ::DevPrivateKeyInfo* _internal_add_devprivatekeyinfo();
  public:
  const ::DevPrivateKeyInfo& devprivatekeyinfo(int index) const;
  ::DevPrivateKeyInfo* add_devprivatekeyinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DevPrivateKeyInfo >&
      devprivatekeyinfo() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetDevPrivateKeyAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DevPrivateKeyInfo > devprivatekeyinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateTxMsgReq) */ {
 public:
  CreateTxMsgReq();
  virtual ~CreateTxMsgReq();

  CreateTxMsgReq(const CreateTxMsgReq& from);
  CreateTxMsgReq(CreateTxMsgReq&& from) noexcept
    : CreateTxMsgReq() {
    *this = ::std::move(from);
  }

  inline CreateTxMsgReq& operator=(const CreateTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTxMsgReq& operator=(CreateTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const CreateTxMsgReq*>(
               &_CreateTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CreateTxMsgReq& a, CreateTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTxMsgReq* New() const final {
    return CreateMaybeMessage<CreateTxMsgReq>(nullptr);
  }

  CreateTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTxMsgReq& from);
  void MergeFrom(const CreateTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kAmtFieldNumber = 4,
    kMinerFeesFieldNumber = 5,
    kNeedVerifyPreHashCountFieldNumber = 6,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 3;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string amt = 4;
  void clear_amt();
  const std::string& amt() const;
  void set_amt(const std::string& value);
  void set_amt(std::string&& value);
  void set_amt(const char* value);
  void set_amt(const char* value, size_t size);
  std::string* mutable_amt();
  std::string* release_amt();
  void set_allocated_amt(std::string* amt);
  private:
  const std::string& _internal_amt() const;
  void _internal_set_amt(const std::string& value);
  std::string* _internal_mutable_amt();
  public:

  // string minerFees = 5;
  void clear_minerfees();
  const std::string& minerfees() const;
  void set_minerfees(const std::string& value);
  void set_minerfees(std::string&& value);
  void set_minerfees(const char* value);
  void set_minerfees(const char* value, size_t size);
  std::string* mutable_minerfees();
  std::string* release_minerfees();
  void set_allocated_minerfees(std::string* minerfees);
  private:
  const std::string& _internal_minerfees() const;
  void _internal_set_minerfees(const std::string& value);
  std::string* _internal_mutable_minerfees();
  public:

  // string needVerifyPreHashCount = 6;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // @@protoc_insertion_point(class_scope:CreateTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minerfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateTxMsgAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateTxMsgAck) */ {
 public:
  CreateTxMsgAck();
  virtual ~CreateTxMsgAck();

  CreateTxMsgAck(const CreateTxMsgAck& from);
  CreateTxMsgAck(CreateTxMsgAck&& from) noexcept
    : CreateTxMsgAck() {
    *this = ::std::move(from);
  }

  inline CreateTxMsgAck& operator=(const CreateTxMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTxMsgAck& operator=(CreateTxMsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTxMsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTxMsgAck* internal_default_instance() {
    return reinterpret_cast<const CreateTxMsgAck*>(
               &_CreateTxMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CreateTxMsgAck& a, CreateTxMsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTxMsgAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTxMsgAck* New() const final {
    return CreateMaybeMessage<CreateTxMsgAck>(nullptr);
  }

  CreateTxMsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTxMsgAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTxMsgAck& from);
  void MergeFrom(const CreateTxMsgAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTxMsgAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateTxMsgAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTxDataFieldNumber = 4,
    kTxEncodeHashFieldNumber = 5,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string txData = 4;
  void clear_txdata();
  const std::string& txdata() const;
  void set_txdata(const std::string& value);
  void set_txdata(std::string&& value);
  void set_txdata(const char* value);
  void set_txdata(const char* value, size_t size);
  std::string* mutable_txdata();
  std::string* release_txdata();
  void set_allocated_txdata(std::string* txdata);
  private:
  const std::string& _internal_txdata() const;
  void _internal_set_txdata(const std::string& value);
  std::string* _internal_mutable_txdata();
  public:

  // string txEncodeHash = 5;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateTxMsgAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxMsgReq) */ {
 public:
  TxMsgReq();
  virtual ~TxMsgReq();

  TxMsgReq(const TxMsgReq& from);
  TxMsgReq(TxMsgReq&& from) noexcept
    : TxMsgReq() {
    *this = ::std::move(from);
  }

  inline TxMsgReq& operator=(const TxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsgReq& operator=(TxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxMsgReq* internal_default_instance() {
    return reinterpret_cast<const TxMsgReq*>(
               &_TxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TxMsgReq& a, TxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxMsgReq* New() const final {
    return CreateMaybeMessage<TxMsgReq>(nullptr);
  }

  TxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxMsgReq& from);
  void MergeFrom(const TxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kSerTxFieldNumber = 2,
    kStrSignatureFieldNumber = 3,
    kStrPubFieldNumber = 4,
    kTxEncodeHashFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string serTx = 2;
  void clear_sertx();
  const std::string& sertx() const;
  void set_sertx(const std::string& value);
  void set_sertx(std::string&& value);
  void set_sertx(const char* value);
  void set_sertx(const char* value, size_t size);
  std::string* mutable_sertx();
  std::string* release_sertx();
  void set_allocated_sertx(std::string* sertx);
  private:
  const std::string& _internal_sertx() const;
  void _internal_set_sertx(const std::string& value);
  std::string* _internal_mutable_sertx();
  public:

  // string strSignature = 3;
  void clear_strsignature();
  const std::string& strsignature() const;
  void set_strsignature(const std::string& value);
  void set_strsignature(std::string&& value);
  void set_strsignature(const char* value);
  void set_strsignature(const char* value, size_t size);
  std::string* mutable_strsignature();
  std::string* release_strsignature();
  void set_allocated_strsignature(std::string* strsignature);
  private:
  const std::string& _internal_strsignature() const;
  void _internal_set_strsignature(const std::string& value);
  std::string* _internal_mutable_strsignature();
  public:

  // string strPub = 4;
  void clear_strpub();
  const std::string& strpub() const;
  void set_strpub(const std::string& value);
  void set_strpub(std::string&& value);
  void set_strpub(const char* value);
  void set_strpub(const char* value, size_t size);
  std::string* mutable_strpub();
  std::string* release_strpub();
  void set_allocated_strpub(std::string* strpub);
  private:
  const std::string& _internal_strpub() const;
  void _internal_set_strpub(const std::string& value);
  std::string* _internal_mutable_strpub();
  public:

  // string txEncodeHash = 5;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // @@protoc_insertion_point(class_scope:TxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sertx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strsignature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strpub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TxMsgAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxMsgAck) */ {
 public:
  TxMsgAck();
  virtual ~TxMsgAck();

  TxMsgAck(const TxMsgAck& from);
  TxMsgAck(TxMsgAck&& from) noexcept
    : TxMsgAck() {
    *this = ::std::move(from);
  }

  inline TxMsgAck& operator=(const TxMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsgAck& operator=(TxMsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxMsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxMsgAck* internal_default_instance() {
    return reinterpret_cast<const TxMsgAck*>(
               &_TxMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TxMsgAck& a, TxMsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMsgAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxMsgAck* New() const final {
    return CreateMaybeMessage<TxMsgAck>(nullptr);
  }

  TxMsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxMsgAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxMsgAck& from);
  void MergeFrom(const TxMsgAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMsgAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxMsgAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTxHashFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string txHash = 4;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TxMsgAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class ToAddr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ToAddr) */ {
 public:
  ToAddr();
  virtual ~ToAddr();

  ToAddr(const ToAddr& from);
  ToAddr(ToAddr&& from) noexcept
    : ToAddr() {
    *this = ::std::move(from);
  }

  inline ToAddr& operator=(const ToAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToAddr& operator=(ToAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToAddr* internal_default_instance() {
    return reinterpret_cast<const ToAddr*>(
               &_ToAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ToAddr& a, ToAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(ToAddr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToAddr* New() const final {
    return CreateMaybeMessage<ToAddr>(nullptr);
  }

  ToAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToAddr& from);
  void MergeFrom(const ToAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ToAddr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToAddrFieldNumber = 1,
    kAmtFieldNumber = 2,
  };
  // string toAddr = 1;
  void clear_toaddr();
  const std::string& toaddr() const;
  void set_toaddr(const std::string& value);
  void set_toaddr(std::string&& value);
  void set_toaddr(const char* value);
  void set_toaddr(const char* value, size_t size);
  std::string* mutable_toaddr();
  std::string* release_toaddr();
  void set_allocated_toaddr(std::string* toaddr);
  private:
  const std::string& _internal_toaddr() const;
  void _internal_set_toaddr(const std::string& value);
  std::string* _internal_mutable_toaddr();
  public:

  // string amt = 2;
  void clear_amt();
  const std::string& amt() const;
  void set_amt(const std::string& value);
  void set_amt(std::string&& value);
  void set_amt(const char* value);
  void set_amt(const char* value, size_t size);
  std::string* mutable_amt();
  std::string* release_amt();
  void set_allocated_amt(std::string* amt);
  private:
  const std::string& _internal_amt() const;
  void _internal_set_amt(const std::string& value);
  std::string* _internal_mutable_amt();
  public:

  // @@protoc_insertion_point(class_scope:ToAddr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateMultiTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateMultiTxMsgReq) */ {
 public:
  CreateMultiTxMsgReq();
  virtual ~CreateMultiTxMsgReq();

  CreateMultiTxMsgReq(const CreateMultiTxMsgReq& from);
  CreateMultiTxMsgReq(CreateMultiTxMsgReq&& from) noexcept
    : CreateMultiTxMsgReq() {
    *this = ::std::move(from);
  }

  inline CreateMultiTxMsgReq& operator=(const CreateMultiTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMultiTxMsgReq& operator=(CreateMultiTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMultiTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMultiTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const CreateMultiTxMsgReq*>(
               &_CreateMultiTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CreateMultiTxMsgReq& a, CreateMultiTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMultiTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMultiTxMsgReq* New() const final {
    return CreateMaybeMessage<CreateMultiTxMsgReq>(nullptr);
  }

  CreateMultiTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMultiTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMultiTxMsgReq& from);
  void MergeFrom(const CreateMultiTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMultiTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateMultiTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kVersionFieldNumber = 1,
    kMinerFeesFieldNumber = 5,
    kNeedVerifyPreHashCountFieldNumber = 6,
  };
  // repeated string from = 2;
  int from_size() const;
  private:
  int _internal_from_size() const;
  public:
  void clear_from();
  const std::string& from(int index) const;
  std::string* mutable_from(int index);
  void set_from(int index, const std::string& value);
  void set_from(int index, std::string&& value);
  void set_from(int index, const char* value);
  void set_from(int index, const char* value, size_t size);
  std::string* add_from();
  void add_from(const std::string& value);
  void add_from(std::string&& value);
  void add_from(const char* value);
  void add_from(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& from() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_from();
  private:
  const std::string& _internal_from(int index) const;
  std::string* _internal_add_from();
  public:

  // repeated .ToAddr to = 3;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  ::ToAddr* mutable_to(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >*
      mutable_to();
  private:
  const ::ToAddr& _internal_to(int index) const;
  ::ToAddr* _internal_add_to();
  public:
  const ::ToAddr& to(int index) const;
  ::ToAddr* add_to();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >&
      to() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string minerFees = 5;
  void clear_minerfees();
  const std::string& minerfees() const;
  void set_minerfees(const std::string& value);
  void set_minerfees(std::string&& value);
  void set_minerfees(const char* value);
  void set_minerfees(const char* value, size_t size);
  std::string* mutable_minerfees();
  std::string* release_minerfees();
  void set_allocated_minerfees(std::string* minerfees);
  private:
  const std::string& _internal_minerfees() const;
  void _internal_set_minerfees(const std::string& value);
  std::string* _internal_mutable_minerfees();
  public:

  // string needVerifyPreHashCount = 6;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // @@protoc_insertion_point(class_scope:CreateMultiTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> from_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr > to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minerfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateMultiTxMsgAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateMultiTxMsgAck) */ {
 public:
  CreateMultiTxMsgAck();
  virtual ~CreateMultiTxMsgAck();

  CreateMultiTxMsgAck(const CreateMultiTxMsgAck& from);
  CreateMultiTxMsgAck(CreateMultiTxMsgAck&& from) noexcept
    : CreateMultiTxMsgAck() {
    *this = ::std::move(from);
  }

  inline CreateMultiTxMsgAck& operator=(const CreateMultiTxMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMultiTxMsgAck& operator=(CreateMultiTxMsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMultiTxMsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMultiTxMsgAck* internal_default_instance() {
    return reinterpret_cast<const CreateMultiTxMsgAck*>(
               &_CreateMultiTxMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CreateMultiTxMsgAck& a, CreateMultiTxMsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMultiTxMsgAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMultiTxMsgAck* New() const final {
    return CreateMaybeMessage<CreateMultiTxMsgAck>(nullptr);
  }

  CreateMultiTxMsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMultiTxMsgAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMultiTxMsgAck& from);
  void MergeFrom(const CreateMultiTxMsgAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMultiTxMsgAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateMultiTxMsgAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTxDataFieldNumber = 4,
    kTxEncodeHashFieldNumber = 5,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string txData = 4;
  void clear_txdata();
  const std::string& txdata() const;
  void set_txdata(const std::string& value);
  void set_txdata(std::string&& value);
  void set_txdata(const char* value);
  void set_txdata(const char* value, size_t size);
  std::string* mutable_txdata();
  std::string* release_txdata();
  void set_allocated_txdata(std::string* txdata);
  private:
  const std::string& _internal_txdata() const;
  void _internal_set_txdata(const std::string& value);
  std::string* _internal_mutable_txdata();
  public:

  // string txEncodeHash = 5;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateMultiTxMsgAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class SignInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SignInfo) */ {
 public:
  SignInfo();
  virtual ~SignInfo();

  SignInfo(const SignInfo& from);
  SignInfo(SignInfo&& from) noexcept
    : SignInfo() {
    *this = ::std::move(from);
  }

  inline SignInfo& operator=(const SignInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignInfo& operator=(SignInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignInfo* internal_default_instance() {
    return reinterpret_cast<const SignInfo*>(
               &_SignInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SignInfo& a, SignInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SignInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignInfo* New() const final {
    return CreateMaybeMessage<SignInfo>(nullptr);
  }

  SignInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignInfo& from);
  void MergeFrom(const SignInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SignInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignStrFieldNumber = 1,
    kPubStrFieldNumber = 2,
  };
  // string signStr = 1;
  void clear_signstr();
  const std::string& signstr() const;
  void set_signstr(const std::string& value);
  void set_signstr(std::string&& value);
  void set_signstr(const char* value);
  void set_signstr(const char* value, size_t size);
  std::string* mutable_signstr();
  std::string* release_signstr();
  void set_allocated_signstr(std::string* signstr);
  private:
  const std::string& _internal_signstr() const;
  void _internal_set_signstr(const std::string& value);
  std::string* _internal_mutable_signstr();
  public:

  // string pubStr = 2;
  void clear_pubstr();
  const std::string& pubstr() const;
  void set_pubstr(const std::string& value);
  void set_pubstr(std::string&& value);
  void set_pubstr(const char* value);
  void set_pubstr(const char* value, size_t size);
  std::string* mutable_pubstr();
  std::string* release_pubstr();
  void set_allocated_pubstr(std::string* pubstr);
  private:
  const std::string& _internal_pubstr() const;
  void _internal_set_pubstr(const std::string& value);
  std::string* _internal_mutable_pubstr();
  public:

  // @@protoc_insertion_point(class_scope:SignInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signstr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubstr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class MultiTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MultiTxMsgReq) */ {
 public:
  MultiTxMsgReq();
  virtual ~MultiTxMsgReq();

  MultiTxMsgReq(const MultiTxMsgReq& from);
  MultiTxMsgReq(MultiTxMsgReq&& from) noexcept
    : MultiTxMsgReq() {
    *this = ::std::move(from);
  }

  inline MultiTxMsgReq& operator=(const MultiTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiTxMsgReq& operator=(MultiTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const MultiTxMsgReq*>(
               &_MultiTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MultiTxMsgReq& a, MultiTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiTxMsgReq* New() const final {
    return CreateMaybeMessage<MultiTxMsgReq>(nullptr);
  }

  MultiTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiTxMsgReq& from);
  void MergeFrom(const MultiTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MultiTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignInfoFieldNumber = 3,
    kVersionFieldNumber = 1,
    kSerTxFieldNumber = 2,
    kTxEncodeHashFieldNumber = 4,
  };
  // repeated .SignInfo signInfo = 3;
  int signinfo_size() const;
  private:
  int _internal_signinfo_size() const;
  public:
  void clear_signinfo();
  ::SignInfo* mutable_signinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignInfo >*
      mutable_signinfo();
  private:
  const ::SignInfo& _internal_signinfo(int index) const;
  ::SignInfo* _internal_add_signinfo();
  public:
  const ::SignInfo& signinfo(int index) const;
  ::SignInfo* add_signinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignInfo >&
      signinfo() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string serTx = 2;
  void clear_sertx();
  const std::string& sertx() const;
  void set_sertx(const std::string& value);
  void set_sertx(std::string&& value);
  void set_sertx(const char* value);
  void set_sertx(const char* value, size_t size);
  std::string* mutable_sertx();
  std::string* release_sertx();
  void set_allocated_sertx(std::string* sertx);
  private:
  const std::string& _internal_sertx() const;
  void _internal_set_sertx(const std::string& value);
  std::string* _internal_mutable_sertx();
  public:

  // string txEncodeHash = 4;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // @@protoc_insertion_point(class_scope:MultiTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignInfo > signinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sertx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class VerifyDevicePasswordReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerifyDevicePasswordReq) */ {
 public:
  VerifyDevicePasswordReq();
  virtual ~VerifyDevicePasswordReq();

  VerifyDevicePasswordReq(const VerifyDevicePasswordReq& from);
  VerifyDevicePasswordReq(VerifyDevicePasswordReq&& from) noexcept
    : VerifyDevicePasswordReq() {
    *this = ::std::move(from);
  }

  inline VerifyDevicePasswordReq& operator=(const VerifyDevicePasswordReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyDevicePasswordReq& operator=(VerifyDevicePasswordReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyDevicePasswordReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyDevicePasswordReq* internal_default_instance() {
    return reinterpret_cast<const VerifyDevicePasswordReq*>(
               &_VerifyDevicePasswordReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(VerifyDevicePasswordReq& a, VerifyDevicePasswordReq& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyDevicePasswordReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyDevicePasswordReq* New() const final {
    return CreateMaybeMessage<VerifyDevicePasswordReq>(nullptr);
  }

  VerifyDevicePasswordReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyDevicePasswordReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyDevicePasswordReq& from);
  void MergeFrom(const VerifyDevicePasswordReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyDevicePasswordReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerifyDevicePasswordReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:VerifyDevicePasswordReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class VerifyDevicePasswordAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerifyDevicePasswordAck) */ {
 public:
  VerifyDevicePasswordAck();
  virtual ~VerifyDevicePasswordAck();

  VerifyDevicePasswordAck(const VerifyDevicePasswordAck& from);
  VerifyDevicePasswordAck(VerifyDevicePasswordAck&& from) noexcept
    : VerifyDevicePasswordAck() {
    *this = ::std::move(from);
  }

  inline VerifyDevicePasswordAck& operator=(const VerifyDevicePasswordAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyDevicePasswordAck& operator=(VerifyDevicePasswordAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyDevicePasswordAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyDevicePasswordAck* internal_default_instance() {
    return reinterpret_cast<const VerifyDevicePasswordAck*>(
               &_VerifyDevicePasswordAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(VerifyDevicePasswordAck& a, VerifyDevicePasswordAck& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyDevicePasswordAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyDevicePasswordAck* New() const final {
    return CreateMaybeMessage<VerifyDevicePasswordAck>(nullptr);
  }

  VerifyDevicePasswordAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyDevicePasswordAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyDevicePasswordAck& from);
  void MergeFrom(const VerifyDevicePasswordAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyDevicePasswordAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerifyDevicePasswordAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:VerifyDevicePasswordAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateDeviceTxMsgReq) */ {
 public:
  CreateDeviceTxMsgReq();
  virtual ~CreateDeviceTxMsgReq();

  CreateDeviceTxMsgReq(const CreateDeviceTxMsgReq& from);
  CreateDeviceTxMsgReq(CreateDeviceTxMsgReq&& from) noexcept
    : CreateDeviceTxMsgReq() {
    *this = ::std::move(from);
  }

  inline CreateDeviceTxMsgReq& operator=(const CreateDeviceTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceTxMsgReq& operator=(CreateDeviceTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeviceTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceTxMsgReq*>(
               &_CreateDeviceTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CreateDeviceTxMsgReq& a, CreateDeviceTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceTxMsgReq* New() const final {
    return CreateMaybeMessage<CreateDeviceTxMsgReq>(nullptr);
  }

  CreateDeviceTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceTxMsgReq& from);
  void MergeFrom(const CreateDeviceTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateDeviceTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kAmtFieldNumber = 4,
    kMinerFeesFieldNumber = 5,
    kNeedVerifyPreHashCountFieldNumber = 6,
    kPasswordFieldNumber = 7,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string from = 2;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 3;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string amt = 4;
  void clear_amt();
  const std::string& amt() const;
  void set_amt(const std::string& value);
  void set_amt(std::string&& value);
  void set_amt(const char* value);
  void set_amt(const char* value, size_t size);
  std::string* mutable_amt();
  std::string* release_amt();
  void set_allocated_amt(std::string* amt);
  private:
  const std::string& _internal_amt() const;
  void _internal_set_amt(const std::string& value);
  std::string* _internal_mutable_amt();
  public:

  // string minerFees = 5;
  void clear_minerfees();
  const std::string& minerfees() const;
  void set_minerfees(const std::string& value);
  void set_minerfees(std::string&& value);
  void set_minerfees(const char* value);
  void set_minerfees(const char* value, size_t size);
  std::string* mutable_minerfees();
  std::string* release_minerfees();
  void set_allocated_minerfees(std::string* minerfees);
  private:
  const std::string& _internal_minerfees() const;
  void _internal_set_minerfees(const std::string& value);
  std::string* _internal_mutable_minerfees();
  public:

  // string needVerifyPreHashCount = 6;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // string password = 7;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:CreateDeviceTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minerfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceMultiTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateDeviceMultiTxMsgReq) */ {
 public:
  CreateDeviceMultiTxMsgReq();
  virtual ~CreateDeviceMultiTxMsgReq();

  CreateDeviceMultiTxMsgReq(const CreateDeviceMultiTxMsgReq& from);
  CreateDeviceMultiTxMsgReq(CreateDeviceMultiTxMsgReq&& from) noexcept
    : CreateDeviceMultiTxMsgReq() {
    *this = ::std::move(from);
  }

  inline CreateDeviceMultiTxMsgReq& operator=(const CreateDeviceMultiTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceMultiTxMsgReq& operator=(CreateDeviceMultiTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceMultiTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeviceMultiTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceMultiTxMsgReq*>(
               &_CreateDeviceMultiTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CreateDeviceMultiTxMsgReq& a, CreateDeviceMultiTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceMultiTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceMultiTxMsgReq* New() const final {
    return CreateMaybeMessage<CreateDeviceMultiTxMsgReq>(nullptr);
  }

  CreateDeviceMultiTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceMultiTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceMultiTxMsgReq& from);
  void MergeFrom(const CreateDeviceMultiTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceMultiTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateDeviceMultiTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kVersionFieldNumber = 1,
    kGasFeesFieldNumber = 4,
    kNeedVerifyPreHashCountFieldNumber = 5,
    kPasswordFieldNumber = 6,
  };
  // repeated string from = 2;
  int from_size() const;
  private:
  int _internal_from_size() const;
  public:
  void clear_from();
  const std::string& from(int index) const;
  std::string* mutable_from(int index);
  void set_from(int index, const std::string& value);
  void set_from(int index, std::string&& value);
  void set_from(int index, const char* value);
  void set_from(int index, const char* value, size_t size);
  std::string* add_from();
  void add_from(const std::string& value);
  void add_from(std::string&& value);
  void add_from(const char* value);
  void add_from(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& from() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_from();
  private:
  const std::string& _internal_from(int index) const;
  std::string* _internal_add_from();
  public:

  // repeated .ToAddr to = 3;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  ::ToAddr* mutable_to(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >*
      mutable_to();
  private:
  const ::ToAddr& _internal_to(int index) const;
  ::ToAddr* _internal_add_to();
  public:
  const ::ToAddr& to(int index) const;
  ::ToAddr* add_to();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >&
      to() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string gasFees = 4;
  void clear_gasfees();
  const std::string& gasfees() const;
  void set_gasfees(const std::string& value);
  void set_gasfees(std::string&& value);
  void set_gasfees(const char* value);
  void set_gasfees(const char* value, size_t size);
  std::string* mutable_gasfees();
  std::string* release_gasfees();
  void set_allocated_gasfees(std::string* gasfees);
  private:
  const std::string& _internal_gasfees() const;
  void _internal_set_gasfees(const std::string& value);
  std::string* _internal_mutable_gasfees();
  public:

  // string needVerifyPreHashCount = 5;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // string password = 6;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:CreateDeviceMultiTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> from_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr > to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreatePledgeTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreatePledgeTxMsgReq) */ {
 public:
  CreatePledgeTxMsgReq();
  virtual ~CreatePledgeTxMsgReq();

  CreatePledgeTxMsgReq(const CreatePledgeTxMsgReq& from);
  CreatePledgeTxMsgReq(CreatePledgeTxMsgReq&& from) noexcept
    : CreatePledgeTxMsgReq() {
    *this = ::std::move(from);
  }

  inline CreatePledgeTxMsgReq& operator=(const CreatePledgeTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePledgeTxMsgReq& operator=(CreatePledgeTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePledgeTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePledgeTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const CreatePledgeTxMsgReq*>(
               &_CreatePledgeTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CreatePledgeTxMsgReq& a, CreatePledgeTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePledgeTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePledgeTxMsgReq* New() const final {
    return CreateMaybeMessage<CreatePledgeTxMsgReq>(nullptr);
  }

  CreatePledgeTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePledgeTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePledgeTxMsgReq& from);
  void MergeFrom(const CreatePledgeTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePledgeTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreatePledgeTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddrFieldNumber = 2,
    kAmtFieldNumber = 3,
    kNeedVerifyPreHashCountFieldNumber = 4,
    kGasFeesFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string amt = 3;
  void clear_amt();
  const std::string& amt() const;
  void set_amt(const std::string& value);
  void set_amt(std::string&& value);
  void set_amt(const char* value);
  void set_amt(const char* value, size_t size);
  std::string* mutable_amt();
  std::string* release_amt();
  void set_allocated_amt(std::string* amt);
  private:
  const std::string& _internal_amt() const;
  void _internal_set_amt(const std::string& value);
  std::string* _internal_mutable_amt();
  public:

  // string needVerifyPreHashCount = 4;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // string gasFees = 5;
  void clear_gasfees();
  const std::string& gasfees() const;
  void set_gasfees(const std::string& value);
  void set_gasfees(std::string&& value);
  void set_gasfees(const char* value);
  void set_gasfees(const char* value, size_t size);
  std::string* mutable_gasfees();
  std::string* release_gasfees();
  void set_allocated_gasfees(std::string* gasfees);
  private:
  const std::string& _internal_gasfees() const;
  void _internal_set_gasfees(const std::string& value);
  std::string* _internal_mutable_gasfees();
  public:

  // @@protoc_insertion_point(class_scope:CreatePledgeTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasfees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreatePledgeTxMsgAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreatePledgeTxMsgAck) */ {
 public:
  CreatePledgeTxMsgAck();
  virtual ~CreatePledgeTxMsgAck();

  CreatePledgeTxMsgAck(const CreatePledgeTxMsgAck& from);
  CreatePledgeTxMsgAck(CreatePledgeTxMsgAck&& from) noexcept
    : CreatePledgeTxMsgAck() {
    *this = ::std::move(from);
  }

  inline CreatePledgeTxMsgAck& operator=(const CreatePledgeTxMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePledgeTxMsgAck& operator=(CreatePledgeTxMsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePledgeTxMsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePledgeTxMsgAck* internal_default_instance() {
    return reinterpret_cast<const CreatePledgeTxMsgAck*>(
               &_CreatePledgeTxMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CreatePledgeTxMsgAck& a, CreatePledgeTxMsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePledgeTxMsgAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePledgeTxMsgAck* New() const final {
    return CreateMaybeMessage<CreatePledgeTxMsgAck>(nullptr);
  }

  CreatePledgeTxMsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePledgeTxMsgAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePledgeTxMsgAck& from);
  void MergeFrom(const CreatePledgeTxMsgAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePledgeTxMsgAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreatePledgeTxMsgAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kTxDataFieldNumber = 4,
    kTxEncodeHashFieldNumber = 5,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string txData = 4;
  void clear_txdata();
  const std::string& txdata() const;
  void set_txdata(const std::string& value);
  void set_txdata(std::string&& value);
  void set_txdata(const char* value);
  void set_txdata(const char* value, size_t size);
  std::string* mutable_txdata();
  std::string* release_txdata();
  void set_allocated_txdata(std::string* txdata);
  private:
  const std::string& _internal_txdata() const;
  void _internal_set_txdata(const std::string& value);
  std::string* _internal_mutable_txdata();
  public:

  // string txEncodeHash = 5;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreatePledgeTxMsgAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class PledgeTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PledgeTxMsgReq) */ {
 public:
  PledgeTxMsgReq();
  virtual ~PledgeTxMsgReq();

  PledgeTxMsgReq(const PledgeTxMsgReq& from);
  PledgeTxMsgReq(PledgeTxMsgReq&& from) noexcept
    : PledgeTxMsgReq() {
    *this = ::std::move(from);
  }

  inline PledgeTxMsgReq& operator=(const PledgeTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PledgeTxMsgReq& operator=(PledgeTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PledgeTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PledgeTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const PledgeTxMsgReq*>(
               &_PledgeTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PledgeTxMsgReq& a, PledgeTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PledgeTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PledgeTxMsgReq* New() const final {
    return CreateMaybeMessage<PledgeTxMsgReq>(nullptr);
  }

  PledgeTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PledgeTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PledgeTxMsgReq& from);
  void MergeFrom(const PledgeTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PledgeTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PledgeTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kSerTxFieldNumber = 2,
    kStrSignatureFieldNumber = 3,
    kStrPubFieldNumber = 4,
    kTxEncodeHashFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string serTx = 2;
  void clear_sertx();
  const std::string& sertx() const;
  void set_sertx(const std::string& value);
  void set_sertx(std::string&& value);
  void set_sertx(const char* value);
  void set_sertx(const char* value, size_t size);
  std::string* mutable_sertx();
  std::string* release_sertx();
  void set_allocated_sertx(std::string* sertx);
  private:
  const std::string& _internal_sertx() const;
  void _internal_set_sertx(const std::string& value);
  std::string* _internal_mutable_sertx();
  public:

  // string strSignature = 3;
  void clear_strsignature();
  const std::string& strsignature() const;
  void set_strsignature(const std::string& value);
  void set_strsignature(std::string&& value);
  void set_strsignature(const char* value);
  void set_strsignature(const char* value, size_t size);
  std::string* mutable_strsignature();
  std::string* release_strsignature();
  void set_allocated_strsignature(std::string* strsignature);
  private:
  const std::string& _internal_strsignature() const;
  void _internal_set_strsignature(const std::string& value);
  std::string* _internal_mutable_strsignature();
  public:

  // string strPub = 4;
  void clear_strpub();
  const std::string& strpub() const;
  void set_strpub(const std::string& value);
  void set_strpub(std::string&& value);
  void set_strpub(const char* value);
  void set_strpub(const char* value, size_t size);
  std::string* mutable_strpub();
  std::string* release_strpub();
  void set_allocated_strpub(std::string* strpub);
  private:
  const std::string& _internal_strpub() const;
  void _internal_set_strpub(const std::string& value);
  std::string* _internal_mutable_strpub();
  public:

  // string txEncodeHash = 5;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // @@protoc_insertion_point(class_scope:PledgeTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sertx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strsignature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strpub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateRedeemTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRedeemTxMsgReq) */ {
 public:
  CreateRedeemTxMsgReq();
  virtual ~CreateRedeemTxMsgReq();

  CreateRedeemTxMsgReq(const CreateRedeemTxMsgReq& from);
  CreateRedeemTxMsgReq(CreateRedeemTxMsgReq&& from) noexcept
    : CreateRedeemTxMsgReq() {
    *this = ::std::move(from);
  }

  inline CreateRedeemTxMsgReq& operator=(const CreateRedeemTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRedeemTxMsgReq& operator=(CreateRedeemTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRedeemTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRedeemTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const CreateRedeemTxMsgReq*>(
               &_CreateRedeemTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CreateRedeemTxMsgReq& a, CreateRedeemTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRedeemTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRedeemTxMsgReq* New() const final {
    return CreateMaybeMessage<CreateRedeemTxMsgReq>(nullptr);
  }

  CreateRedeemTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRedeemTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRedeemTxMsgReq& from);
  void MergeFrom(const CreateRedeemTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRedeemTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRedeemTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddrFieldNumber = 2,
    kAmtFieldNumber = 3,
    kNeedVerifyPreHashCountFieldNumber = 4,
    kGasFeesFieldNumber = 5,
    kTxHashFieldNumber = 6,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string amt = 3;
  void clear_amt();
  const std::string& amt() const;
  void set_amt(const std::string& value);
  void set_amt(std::string&& value);
  void set_amt(const char* value);
  void set_amt(const char* value, size_t size);
  std::string* mutable_amt();
  std::string* release_amt();
  void set_allocated_amt(std::string* amt);
  private:
  const std::string& _internal_amt() const;
  void _internal_set_amt(const std::string& value);
  std::string* _internal_mutable_amt();
  public:

  // string needVerifyPreHashCount = 4;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // string gasFees = 5;
  void clear_gasfees();
  const std::string& gasfees() const;
  void set_gasfees(const std::string& value);
  void set_gasfees(std::string&& value);
  void set_gasfees(const char* value);
  void set_gasfees(const char* value, size_t size);
  std::string* mutable_gasfees();
  std::string* release_gasfees();
  void set_allocated_gasfees(std::string* gasfees);
  private:
  const std::string& _internal_gasfees() const;
  void _internal_set_gasfees(const std::string& value);
  std::string* _internal_mutable_gasfees();
  public:

  // string txHash = 6;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // @@protoc_insertion_point(class_scope:CreateRedeemTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateRedeemTxMsgAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRedeemTxMsgAck) */ {
 public:
  CreateRedeemTxMsgAck();
  virtual ~CreateRedeemTxMsgAck();

  CreateRedeemTxMsgAck(const CreateRedeemTxMsgAck& from);
  CreateRedeemTxMsgAck(CreateRedeemTxMsgAck&& from) noexcept
    : CreateRedeemTxMsgAck() {
    *this = ::std::move(from);
  }

  inline CreateRedeemTxMsgAck& operator=(const CreateRedeemTxMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRedeemTxMsgAck& operator=(CreateRedeemTxMsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRedeemTxMsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRedeemTxMsgAck* internal_default_instance() {
    return reinterpret_cast<const CreateRedeemTxMsgAck*>(
               &_CreateRedeemTxMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CreateRedeemTxMsgAck& a, CreateRedeemTxMsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRedeemTxMsgAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRedeemTxMsgAck* New() const final {
    return CreateMaybeMessage<CreateRedeemTxMsgAck>(nullptr);
  }

  CreateRedeemTxMsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRedeemTxMsgAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRedeemTxMsgAck& from);
  void MergeFrom(const CreateRedeemTxMsgAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRedeemTxMsgAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRedeemTxMsgAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kTxDataFieldNumber = 4,
    kTxEncodeHashFieldNumber = 5,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string txData = 4;
  void clear_txdata();
  const std::string& txdata() const;
  void set_txdata(const std::string& value);
  void set_txdata(std::string&& value);
  void set_txdata(const char* value);
  void set_txdata(const char* value, size_t size);
  std::string* mutable_txdata();
  std::string* release_txdata();
  void set_allocated_txdata(std::string* txdata);
  private:
  const std::string& _internal_txdata() const;
  void _internal_set_txdata(const std::string& value);
  std::string* _internal_mutable_txdata();
  public:

  // string txEncodeHash = 5;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateRedeemTxMsgAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class RedeemTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedeemTxMsgReq) */ {
 public:
  RedeemTxMsgReq();
  virtual ~RedeemTxMsgReq();

  RedeemTxMsgReq(const RedeemTxMsgReq& from);
  RedeemTxMsgReq(RedeemTxMsgReq&& from) noexcept
    : RedeemTxMsgReq() {
    *this = ::std::move(from);
  }

  inline RedeemTxMsgReq& operator=(const RedeemTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedeemTxMsgReq& operator=(RedeemTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RedeemTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RedeemTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const RedeemTxMsgReq*>(
               &_RedeemTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(RedeemTxMsgReq& a, RedeemTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RedeemTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RedeemTxMsgReq* New() const final {
    return CreateMaybeMessage<RedeemTxMsgReq>(nullptr);
  }

  RedeemTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RedeemTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RedeemTxMsgReq& from);
  void MergeFrom(const RedeemTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedeemTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedeemTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kSerTxFieldNumber = 2,
    kStrSignatureFieldNumber = 3,
    kStrPubFieldNumber = 4,
    kTxEncodeHashFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string serTx = 2;
  void clear_sertx();
  const std::string& sertx() const;
  void set_sertx(const std::string& value);
  void set_sertx(std::string&& value);
  void set_sertx(const char* value);
  void set_sertx(const char* value, size_t size);
  std::string* mutable_sertx();
  std::string* release_sertx();
  void set_allocated_sertx(std::string* sertx);
  private:
  const std::string& _internal_sertx() const;
  void _internal_set_sertx(const std::string& value);
  std::string* _internal_mutable_sertx();
  public:

  // string strSignature = 3;
  void clear_strsignature();
  const std::string& strsignature() const;
  void set_strsignature(const std::string& value);
  void set_strsignature(std::string&& value);
  void set_strsignature(const char* value);
  void set_strsignature(const char* value, size_t size);
  std::string* mutable_strsignature();
  std::string* release_strsignature();
  void set_allocated_strsignature(std::string* strsignature);
  private:
  const std::string& _internal_strsignature() const;
  void _internal_set_strsignature(const std::string& value);
  std::string* _internal_mutable_strsignature();
  public:

  // string strPub = 4;
  void clear_strpub();
  const std::string& strpub() const;
  void set_strpub(const std::string& value);
  void set_strpub(std::string&& value);
  void set_strpub(const char* value);
  void set_strpub(const char* value, size_t size);
  std::string* mutable_strpub();
  std::string* release_strpub();
  void set_allocated_strpub(std::string* strpub);
  private:
  const std::string& _internal_strpub() const;
  void _internal_set_strpub(const std::string& value);
  std::string* _internal_mutable_strpub();
  public:

  // string txEncodeHash = 5;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // @@protoc_insertion_point(class_scope:RedeemTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sertx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strsignature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strpub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateDevicePledgeTxMsgReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateDevicePledgeTxMsgReq) */ {
 public:
  CreateDevicePledgeTxMsgReq();
  virtual ~CreateDevicePledgeTxMsgReq();

  CreateDevicePledgeTxMsgReq(const CreateDevicePledgeTxMsgReq& from);
  CreateDevicePledgeTxMsgReq(CreateDevicePledgeTxMsgReq&& from) noexcept
    : CreateDevicePledgeTxMsgReq() {
    *this = ::std::move(from);
  }

  inline CreateDevicePledgeTxMsgReq& operator=(const CreateDevicePledgeTxMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDevicePledgeTxMsgReq& operator=(CreateDevicePledgeTxMsgReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDevicePledgeTxMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDevicePledgeTxMsgReq* internal_default_instance() {
    return reinterpret_cast<const CreateDevicePledgeTxMsgReq*>(
               &_CreateDevicePledgeTxMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CreateDevicePledgeTxMsgReq& a, CreateDevicePledgeTxMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDevicePledgeTxMsgReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDevicePledgeTxMsgReq* New() const final {
    return CreateMaybeMessage<CreateDevicePledgeTxMsgReq>(nullptr);
  }

  CreateDevicePledgeTxMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDevicePledgeTxMsgReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDevicePledgeTxMsgReq& from);
  void MergeFrom(const CreateDevicePledgeTxMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDevicePledgeTxMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateDevicePledgeTxMsgReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddrFieldNumber = 2,
    kAmtFieldNumber = 3,
    kNeedVerifyPreHashCountFieldNumber = 4,
    kGasFeesFieldNumber = 5,
    kPasswordFieldNumber = 6,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string amt = 3;
  void clear_amt();
  const std::string& amt() const;
  void set_amt(const std::string& value);
  void set_amt(std::string&& value);
  void set_amt(const char* value);
  void set_amt(const char* value, size_t size);
  std::string* mutable_amt();
  std::string* release_amt();
  void set_allocated_amt(std::string* amt);
  private:
  const std::string& _internal_amt() const;
  void _internal_set_amt(const std::string& value);
  std::string* _internal_mutable_amt();
  public:

  // string needVerifyPreHashCount = 4;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // string gasFees = 5;
  void clear_gasfees();
  const std::string& gasfees() const;
  void set_gasfees(const std::string& value);
  void set_gasfees(std::string&& value);
  void set_gasfees(const char* value);
  void set_gasfees(const char* value, size_t size);
  std::string* mutable_gasfees();
  std::string* release_gasfees();
  void set_allocated_gasfees(std::string* gasfees);
  private:
  const std::string& _internal_gasfees() const;
  void _internal_set_gasfees(const std::string& value);
  std::string* _internal_mutable_gasfees();
  public:

  // string password = 6;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:CreateDevicePledgeTxMsgReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class CreateDeviceRedeemTxReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateDeviceRedeemTxReq) */ {
 public:
  CreateDeviceRedeemTxReq();
  virtual ~CreateDeviceRedeemTxReq();

  CreateDeviceRedeemTxReq(const CreateDeviceRedeemTxReq& from);
  CreateDeviceRedeemTxReq(CreateDeviceRedeemTxReq&& from) noexcept
    : CreateDeviceRedeemTxReq() {
    *this = ::std::move(from);
  }

  inline CreateDeviceRedeemTxReq& operator=(const CreateDeviceRedeemTxReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDeviceRedeemTxReq& operator=(CreateDeviceRedeemTxReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDeviceRedeemTxReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDeviceRedeemTxReq* internal_default_instance() {
    return reinterpret_cast<const CreateDeviceRedeemTxReq*>(
               &_CreateDeviceRedeemTxReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CreateDeviceRedeemTxReq& a, CreateDeviceRedeemTxReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDeviceRedeemTxReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDeviceRedeemTxReq* New() const final {
    return CreateMaybeMessage<CreateDeviceRedeemTxReq>(nullptr);
  }

  CreateDeviceRedeemTxReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDeviceRedeemTxReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDeviceRedeemTxReq& from);
  void MergeFrom(const CreateDeviceRedeemTxReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDeviceRedeemTxReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateDeviceRedeemTxReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddrFieldNumber = 2,
    kNeedVerifyPreHashCountFieldNumber = 3,
    kGasFeesFieldNumber = 4,
    kUtxoFieldNumber = 5,
    kPasswordFieldNumber = 6,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string needVerifyPreHashCount = 3;
  void clear_needverifyprehashcount();
  const std::string& needverifyprehashcount() const;
  void set_needverifyprehashcount(const std::string& value);
  void set_needverifyprehashcount(std::string&& value);
  void set_needverifyprehashcount(const char* value);
  void set_needverifyprehashcount(const char* value, size_t size);
  std::string* mutable_needverifyprehashcount();
  std::string* release_needverifyprehashcount();
  void set_allocated_needverifyprehashcount(std::string* needverifyprehashcount);
  private:
  const std::string& _internal_needverifyprehashcount() const;
  void _internal_set_needverifyprehashcount(const std::string& value);
  std::string* _internal_mutable_needverifyprehashcount();
  public:

  // string gasFees = 4;
  void clear_gasfees();
  const std::string& gasfees() const;
  void set_gasfees(const std::string& value);
  void set_gasfees(std::string&& value);
  void set_gasfees(const char* value);
  void set_gasfees(const char* value, size_t size);
  std::string* mutable_gasfees();
  std::string* release_gasfees();
  void set_allocated_gasfees(std::string* gasfees);
  private:
  const std::string& _internal_gasfees() const;
  void _internal_set_gasfees(const std::string& value);
  std::string* _internal_mutable_gasfees();
  public:

  // string utxo = 5;
  void clear_utxo();
  const std::string& utxo() const;
  void set_utxo(const std::string& value);
  void set_utxo(std::string&& value);
  void set_utxo(const char* value);
  void set_utxo(const char* value, size_t size);
  std::string* mutable_utxo();
  std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // string password = 6;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:CreateDeviceRedeemTxReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr needverifyprehashcount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetPledgeListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPledgeListReq) */ {
 public:
  GetPledgeListReq();
  virtual ~GetPledgeListReq();

  GetPledgeListReq(const GetPledgeListReq& from);
  GetPledgeListReq(GetPledgeListReq&& from) noexcept
    : GetPledgeListReq() {
    *this = ::std::move(from);
  }

  inline GetPledgeListReq& operator=(const GetPledgeListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPledgeListReq& operator=(GetPledgeListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPledgeListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPledgeListReq* internal_default_instance() {
    return reinterpret_cast<const GetPledgeListReq*>(
               &_GetPledgeListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetPledgeListReq& a, GetPledgeListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPledgeListReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPledgeListReq* New() const final {
    return CreateMaybeMessage<GetPledgeListReq>(nullptr);
  }

  GetPledgeListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPledgeListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPledgeListReq& from);
  void MergeFrom(const GetPledgeListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPledgeListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPledgeListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddrFieldNumber = 2,
    kIndexFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetPledgeListReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class PledgeItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PledgeItem) */ {
 public:
  PledgeItem();
  virtual ~PledgeItem();

  PledgeItem(const PledgeItem& from);
  PledgeItem(PledgeItem&& from) noexcept
    : PledgeItem() {
    *this = ::std::move(from);
  }

  inline PledgeItem& operator=(const PledgeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PledgeItem& operator=(PledgeItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PledgeItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PledgeItem* internal_default_instance() {
    return reinterpret_cast<const PledgeItem*>(
               &_PledgeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(PledgeItem& a, PledgeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PledgeItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PledgeItem* New() const final {
    return CreateMaybeMessage<PledgeItem>(nullptr);
  }

  PledgeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PledgeItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PledgeItem& from);
  void MergeFrom(const PledgeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PledgeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PledgeItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockhashFieldNumber = 1,
    kUtxoFieldNumber = 3,
    kAmountFieldNumber = 4,
    kFromaddrFieldNumber = 6,
    kToaddrFieldNumber = 7,
    kDetailFieldNumber = 8,
    kTimeFieldNumber = 5,
    kBlockheightFieldNumber = 2,
  };
  // string blockhash = 1;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const char* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // string utxo = 3;
  void clear_utxo();
  const std::string& utxo() const;
  void set_utxo(const std::string& value);
  void set_utxo(std::string&& value);
  void set_utxo(const char* value);
  void set_utxo(const char* value, size_t size);
  std::string* mutable_utxo();
  std::string* release_utxo();
  void set_allocated_utxo(std::string* utxo);
  private:
  const std::string& _internal_utxo() const;
  void _internal_set_utxo(const std::string& value);
  std::string* _internal_mutable_utxo();
  public:

  // string amount = 4;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string fromaddr = 6;
  void clear_fromaddr();
  const std::string& fromaddr() const;
  void set_fromaddr(const std::string& value);
  void set_fromaddr(std::string&& value);
  void set_fromaddr(const char* value);
  void set_fromaddr(const char* value, size_t size);
  std::string* mutable_fromaddr();
  std::string* release_fromaddr();
  void set_allocated_fromaddr(std::string* fromaddr);
  private:
  const std::string& _internal_fromaddr() const;
  void _internal_set_fromaddr(const std::string& value);
  std::string* _internal_mutable_fromaddr();
  public:

  // string toaddr = 7;
  void clear_toaddr();
  const std::string& toaddr() const;
  void set_toaddr(const std::string& value);
  void set_toaddr(std::string&& value);
  void set_toaddr(const char* value);
  void set_toaddr(const char* value, size_t size);
  std::string* mutable_toaddr();
  std::string* release_toaddr();
  void set_allocated_toaddr(std::string* toaddr);
  private:
  const std::string& _internal_toaddr() const;
  void _internal_set_toaddr(const std::string& value);
  std::string* _internal_mutable_toaddr();
  public:

  // string detail = 8;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // uint64 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 blockheight = 2;
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PledgeItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utxo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fromaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetPledgeListAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPledgeListAck) */ {
 public:
  GetPledgeListAck();
  virtual ~GetPledgeListAck();

  GetPledgeListAck(const GetPledgeListAck& from);
  GetPledgeListAck(GetPledgeListAck&& from) noexcept
    : GetPledgeListAck() {
    *this = ::std::move(from);
  }

  inline GetPledgeListAck& operator=(const GetPledgeListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPledgeListAck& operator=(GetPledgeListAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPledgeListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPledgeListAck* internal_default_instance() {
    return reinterpret_cast<const GetPledgeListAck*>(
               &_GetPledgeListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetPledgeListAck& a, GetPledgeListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPledgeListAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPledgeListAck* New() const final {
    return CreateMaybeMessage<GetPledgeListAck>(nullptr);
  }

  GetPledgeListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPledgeListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPledgeListAck& from);
  void MergeFrom(const GetPledgeListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPledgeListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPledgeListAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
    kTotalFieldNumber = 5,
  };
  // repeated .PledgeItem list = 4;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::PledgeItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PledgeItem >*
      mutable_list();
  private:
  const ::PledgeItem& _internal_list(int index) const;
  ::PledgeItem* _internal_add_list();
  public:
  const ::PledgeItem& list(int index) const;
  ::PledgeItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PledgeItem >&
      list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 total = 5;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetPledgeListAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PledgeItem > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetTxInfoListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTxInfoListReq) */ {
 public:
  GetTxInfoListReq();
  virtual ~GetTxInfoListReq();

  GetTxInfoListReq(const GetTxInfoListReq& from);
  GetTxInfoListReq(GetTxInfoListReq&& from) noexcept
    : GetTxInfoListReq() {
    *this = ::std::move(from);
  }

  inline GetTxInfoListReq& operator=(const GetTxInfoListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxInfoListReq& operator=(GetTxInfoListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxInfoListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxInfoListReq* internal_default_instance() {
    return reinterpret_cast<const GetTxInfoListReq*>(
               &_GetTxInfoListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetTxInfoListReq& a, GetTxInfoListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxInfoListReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxInfoListReq* New() const final {
    return CreateMaybeMessage<GetTxInfoListReq>(nullptr);
  }

  GetTxInfoListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxInfoListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxInfoListReq& from);
  void MergeFrom(const GetTxInfoListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxInfoListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTxInfoListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kAddrFieldNumber = 2,
    kIndexFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetTxInfoListReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TxInfoItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxInfoItem) */ {
 public:
  TxInfoItem();
  virtual ~TxInfoItem();

  TxInfoItem(const TxInfoItem& from);
  TxInfoItem(TxInfoItem&& from) noexcept
    : TxInfoItem() {
    *this = ::std::move(from);
  }

  inline TxInfoItem& operator=(const TxInfoItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxInfoItem& operator=(TxInfoItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxInfoItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxInfoItem* internal_default_instance() {
    return reinterpret_cast<const TxInfoItem*>(
               &_TxInfoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(TxInfoItem& a, TxInfoItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TxInfoItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxInfoItem* New() const final {
    return CreateMaybeMessage<TxInfoItem>(nullptr);
  }

  TxInfoItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxInfoItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxInfoItem& from);
  void MergeFrom(const TxInfoItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxInfoItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxInfoItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxhashFieldNumber = 2,
    kAmountFieldNumber = 4,
    kTimeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string txhash = 2;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // string amount = 4;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // uint64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .TxInfoType type = 1;
  void clear_type();
  ::TxInfoType type() const;
  void set_type(::TxInfoType value);
  private:
  ::TxInfoType _internal_type() const;
  void _internal_set_type(::TxInfoType value);
  public:

  // @@protoc_insertion_point(class_scope:TxInfoItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetTxInfoListAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTxInfoListAck) */ {
 public:
  GetTxInfoListAck();
  virtual ~GetTxInfoListAck();

  GetTxInfoListAck(const GetTxInfoListAck& from);
  GetTxInfoListAck(GetTxInfoListAck&& from) noexcept
    : GetTxInfoListAck() {
    *this = ::std::move(from);
  }

  inline GetTxInfoListAck& operator=(const GetTxInfoListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxInfoListAck& operator=(GetTxInfoListAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxInfoListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxInfoListAck* internal_default_instance() {
    return reinterpret_cast<const GetTxInfoListAck*>(
               &_GetTxInfoListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetTxInfoListAck& a, GetTxInfoListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxInfoListAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxInfoListAck* New() const final {
    return CreateMaybeMessage<GetTxInfoListAck>(nullptr);
  }

  GetTxInfoListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxInfoListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxInfoListAck& from);
  void MergeFrom(const GetTxInfoListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxInfoListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTxInfoListAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
    kTotalFieldNumber = 5,
    kIndexFieldNumber = 6,
  };
  // repeated .TxInfoItem list = 4;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::TxInfoItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfoItem >*
      mutable_list();
  private:
  const ::TxInfoItem& _internal_list(int index) const;
  ::TxInfoItem* _internal_add_list();
  public:
  const ::TxInfoItem& list(int index) const;
  ::TxInfoItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfoItem >&
      list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 total = 5;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 index = 6;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetTxInfoListAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfoItem > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetTxInfoDetailReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTxInfoDetailReq) */ {
 public:
  GetTxInfoDetailReq();
  virtual ~GetTxInfoDetailReq();

  GetTxInfoDetailReq(const GetTxInfoDetailReq& from);
  GetTxInfoDetailReq(GetTxInfoDetailReq&& from) noexcept
    : GetTxInfoDetailReq() {
    *this = ::std::move(from);
  }

  inline GetTxInfoDetailReq& operator=(const GetTxInfoDetailReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxInfoDetailReq& operator=(GetTxInfoDetailReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxInfoDetailReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxInfoDetailReq* internal_default_instance() {
    return reinterpret_cast<const GetTxInfoDetailReq*>(
               &_GetTxInfoDetailReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetTxInfoDetailReq& a, GetTxInfoDetailReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxInfoDetailReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxInfoDetailReq* New() const final {
    return CreateMaybeMessage<GetTxInfoDetailReq>(nullptr);
  }

  GetTxInfoDetailReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxInfoDetailReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxInfoDetailReq& from);
  void MergeFrom(const GetTxInfoDetailReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxInfoDetailReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTxInfoDetailReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTxhashFieldNumber = 2,
    kAddrFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string txhash = 2;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // string addr = 3;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // @@protoc_insertion_point(class_scope:GetTxInfoDetailReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetTxInfoDetailAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTxInfoDetailAck) */ {
 public:
  GetTxInfoDetailAck();
  virtual ~GetTxInfoDetailAck();

  GetTxInfoDetailAck(const GetTxInfoDetailAck& from);
  GetTxInfoDetailAck(GetTxInfoDetailAck&& from) noexcept
    : GetTxInfoDetailAck() {
    *this = ::std::move(from);
  }

  inline GetTxInfoDetailAck& operator=(const GetTxInfoDetailAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxInfoDetailAck& operator=(GetTxInfoDetailAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxInfoDetailAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxInfoDetailAck* internal_default_instance() {
    return reinterpret_cast<const GetTxInfoDetailAck*>(
               &_GetTxInfoDetailAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetTxInfoDetailAck& a, GetTxInfoDetailAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxInfoDetailAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxInfoDetailAck* New() const final {
    return CreateMaybeMessage<GetTxInfoDetailAck>(nullptr);
  }

  GetTxInfoDetailAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxInfoDetailAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxInfoDetailAck& from);
  void MergeFrom(const GetTxInfoDetailAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxInfoDetailAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTxInfoDetailAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromaddrFieldNumber = 8,
    kToaddrFieldNumber = 9,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kBlockhashFieldNumber = 4,
    kTxhashFieldNumber = 6,
    kGasFieldNumber = 10,
    kAmountFieldNumber = 11,
    kAwardFieldNumber = 12,
    kAwardGasFieldNumber = 13,
    kAwardAmountFieldNumber = 14,
    kCodeFieldNumber = 2,
    kBlockheightFieldNumber = 5,
    kTimeFieldNumber = 7,
  };
  // repeated string fromaddr = 8;
  int fromaddr_size() const;
  private:
  int _internal_fromaddr_size() const;
  public:
  void clear_fromaddr();
  const std::string& fromaddr(int index) const;
  std::string* mutable_fromaddr(int index);
  void set_fromaddr(int index, const std::string& value);
  void set_fromaddr(int index, std::string&& value);
  void set_fromaddr(int index, const char* value);
  void set_fromaddr(int index, const char* value, size_t size);
  std::string* add_fromaddr();
  void add_fromaddr(const std::string& value);
  void add_fromaddr(std::string&& value);
  void add_fromaddr(const char* value);
  void add_fromaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fromaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fromaddr();
  private:
  const std::string& _internal_fromaddr(int index) const;
  std::string* _internal_add_fromaddr();
  public:

  // repeated .ToAddr toaddr = 9;
  int toaddr_size() const;
  private:
  int _internal_toaddr_size() const;
  public:
  void clear_toaddr();
  ::ToAddr* mutable_toaddr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >*
      mutable_toaddr();
  private:
  const ::ToAddr& _internal_toaddr(int index) const;
  ::ToAddr* _internal_add_toaddr();
  public:
  const ::ToAddr& toaddr(int index) const;
  ::ToAddr* add_toaddr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >&
      toaddr() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string blockhash = 4;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const char* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // string txhash = 6;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // string gas = 10;
  void clear_gas();
  const std::string& gas() const;
  void set_gas(const std::string& value);
  void set_gas(std::string&& value);
  void set_gas(const char* value);
  void set_gas(const char* value, size_t size);
  std::string* mutable_gas();
  std::string* release_gas();
  void set_allocated_gas(std::string* gas);
  private:
  const std::string& _internal_gas() const;
  void _internal_set_gas(const std::string& value);
  std::string* _internal_mutable_gas();
  public:

  // string amount = 11;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string award = 12;
  void clear_award();
  const std::string& award() const;
  void set_award(const std::string& value);
  void set_award(std::string&& value);
  void set_award(const char* value);
  void set_award(const char* value, size_t size);
  std::string* mutable_award();
  std::string* release_award();
  void set_allocated_award(std::string* award);
  private:
  const std::string& _internal_award() const;
  void _internal_set_award(const std::string& value);
  std::string* _internal_mutable_award();
  public:

  // string awardGas = 13;
  void clear_awardgas();
  const std::string& awardgas() const;
  void set_awardgas(const std::string& value);
  void set_awardgas(std::string&& value);
  void set_awardgas(const char* value);
  void set_awardgas(const char* value, size_t size);
  std::string* mutable_awardgas();
  std::string* release_awardgas();
  void set_allocated_awardgas(std::string* awardgas);
  private:
  const std::string& _internal_awardgas() const;
  void _internal_set_awardgas(const std::string& value);
  std::string* _internal_mutable_awardgas();
  public:

  // string awardAmount = 14;
  void clear_awardamount();
  const std::string& awardamount() const;
  void set_awardamount(const std::string& value);
  void set_awardamount(std::string&& value);
  void set_awardamount(const char* value);
  void set_awardamount(const char* value, size_t size);
  std::string* mutable_awardamount();
  std::string* release_awardamount();
  void set_allocated_awardamount(std::string* awardamount);
  private:
  const std::string& _internal_awardamount() const;
  void _internal_set_awardamount(const std::string& value);
  std::string* _internal_mutable_awardamount();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 blockheight = 5;
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 time = 7;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:GetTxInfoDetailAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fromaddr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr > toaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr award_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awardgas_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awardamount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockInfoListReq) */ {
 public:
  GetBlockInfoListReq();
  virtual ~GetBlockInfoListReq();

  GetBlockInfoListReq(const GetBlockInfoListReq& from);
  GetBlockInfoListReq(GetBlockInfoListReq&& from) noexcept
    : GetBlockInfoListReq() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoListReq& operator=(const GetBlockInfoListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoListReq& operator=(GetBlockInfoListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoListReq* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoListReq*>(
               &_GetBlockInfoListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetBlockInfoListReq& a, GetBlockInfoListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoListReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoListReq* New() const final {
    return CreateMaybeMessage<GetBlockInfoListReq>(nullptr);
  }

  GetBlockInfoListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoListReq& from);
  void MergeFrom(const GetBlockInfoListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockInfoListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // uint32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetBlockInfoListReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class BlockInfoItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockInfoItem) */ {
 public:
  BlockInfoItem();
  virtual ~BlockInfoItem();

  BlockInfoItem(const BlockInfoItem& from);
  BlockInfoItem(BlockInfoItem&& from) noexcept
    : BlockInfoItem() {
    *this = ::std::move(from);
  }

  inline BlockInfoItem& operator=(const BlockInfoItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInfoItem& operator=(BlockInfoItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInfoItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInfoItem* internal_default_instance() {
    return reinterpret_cast<const BlockInfoItem*>(
               &_BlockInfoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(BlockInfoItem& a, BlockInfoItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInfoItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInfoItem* New() const final {
    return CreateMaybeMessage<BlockInfoItem>(nullptr);
  }

  BlockInfoItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfoItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInfoItem& from);
  void MergeFrom(const BlockInfoItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfoItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockInfoItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAddrFieldNumber = 5,
    kToAddrFieldNumber = 6,
    kBlockhashFieldNumber = 1,
    kTxHashFieldNumber = 4,
    kAmountFieldNumber = 7,
    kTimeFieldNumber = 3,
    kBlockheightFieldNumber = 2,
  };
  // repeated string fromAddr = 5;
  int fromaddr_size() const;
  private:
  int _internal_fromaddr_size() const;
  public:
  void clear_fromaddr();
  const std::string& fromaddr(int index) const;
  std::string* mutable_fromaddr(int index);
  void set_fromaddr(int index, const std::string& value);
  void set_fromaddr(int index, std::string&& value);
  void set_fromaddr(int index, const char* value);
  void set_fromaddr(int index, const char* value, size_t size);
  std::string* add_fromaddr();
  void add_fromaddr(const std::string& value);
  void add_fromaddr(std::string&& value);
  void add_fromaddr(const char* value);
  void add_fromaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fromaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fromaddr();
  private:
  const std::string& _internal_fromaddr(int index) const;
  std::string* _internal_add_fromaddr();
  public:

  // repeated string toAddr = 6;
  int toaddr_size() const;
  private:
  int _internal_toaddr_size() const;
  public:
  void clear_toaddr();
  const std::string& toaddr(int index) const;
  std::string* mutable_toaddr(int index);
  void set_toaddr(int index, const std::string& value);
  void set_toaddr(int index, std::string&& value);
  void set_toaddr(int index, const char* value);
  void set_toaddr(int index, const char* value, size_t size);
  std::string* add_toaddr();
  void add_toaddr(const std::string& value);
  void add_toaddr(std::string&& value);
  void add_toaddr(const char* value);
  void add_toaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& toaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_toaddr();
  private:
  const std::string& _internal_toaddr(int index) const;
  std::string* _internal_add_toaddr();
  public:

  // string blockhash = 1;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const char* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // string txHash = 4;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // string amount = 7;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // uint64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 blockheight = 2;
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:BlockInfoItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fromaddr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> toaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoListAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockInfoListAck) */ {
 public:
  GetBlockInfoListAck();
  virtual ~GetBlockInfoListAck();

  GetBlockInfoListAck(const GetBlockInfoListAck& from);
  GetBlockInfoListAck(GetBlockInfoListAck&& from) noexcept
    : GetBlockInfoListAck() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoListAck& operator=(const GetBlockInfoListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoListAck& operator=(GetBlockInfoListAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoListAck* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoListAck*>(
               &_GetBlockInfoListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GetBlockInfoListAck& a, GetBlockInfoListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoListAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoListAck* New() const final {
    return CreateMaybeMessage<GetBlockInfoListAck>(nullptr);
  }

  GetBlockInfoListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoListAck& from);
  void MergeFrom(const GetBlockInfoListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockInfoListAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 6,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
    kTopFieldNumber = 4,
    kTxcountFieldNumber = 5,
  };
  // repeated .BlockInfoItem list = 6;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::BlockInfoItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoItem >*
      mutable_list();
  private:
  const ::BlockInfoItem& _internal_list(int index) const;
  ::BlockInfoItem* _internal_add_list();
  public:
  const ::BlockInfoItem& list(int index) const;
  ::BlockInfoItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoItem >&
      list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 top = 4;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::uint32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 txcount = 5;
  void clear_txcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 txcount() const;
  void set_txcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_txcount() const;
  void _internal_set_txcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetBlockInfoListAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoItem > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoDetailReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockInfoDetailReq) */ {
 public:
  GetBlockInfoDetailReq();
  virtual ~GetBlockInfoDetailReq();

  GetBlockInfoDetailReq(const GetBlockInfoDetailReq& from);
  GetBlockInfoDetailReq(GetBlockInfoDetailReq&& from) noexcept
    : GetBlockInfoDetailReq() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoDetailReq& operator=(const GetBlockInfoDetailReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoDetailReq& operator=(GetBlockInfoDetailReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoDetailReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoDetailReq* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoDetailReq*>(
               &_GetBlockInfoDetailReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetBlockInfoDetailReq& a, GetBlockInfoDetailReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoDetailReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoDetailReq* New() const final {
    return CreateMaybeMessage<GetBlockInfoDetailReq>(nullptr);
  }

  GetBlockInfoDetailReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoDetailReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoDetailReq& from);
  void MergeFrom(const GetBlockInfoDetailReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoDetailReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockInfoDetailReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kBlockhashFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string blockhash = 2;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const char* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // @@protoc_insertion_point(class_scope:GetBlockInfoDetailReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class BlockInfoOutAddr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BlockInfoOutAddr) */ {
 public:
  BlockInfoOutAddr();
  virtual ~BlockInfoOutAddr();

  BlockInfoOutAddr(const BlockInfoOutAddr& from);
  BlockInfoOutAddr(BlockInfoOutAddr&& from) noexcept
    : BlockInfoOutAddr() {
    *this = ::std::move(from);
  }

  inline BlockInfoOutAddr& operator=(const BlockInfoOutAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInfoOutAddr& operator=(BlockInfoOutAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInfoOutAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInfoOutAddr* internal_default_instance() {
    return reinterpret_cast<const BlockInfoOutAddr*>(
               &_BlockInfoOutAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(BlockInfoOutAddr& a, BlockInfoOutAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInfoOutAddr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInfoOutAddr* New() const final {
    return CreateMaybeMessage<BlockInfoOutAddr>(nullptr);
  }

  BlockInfoOutAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfoOutAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInfoOutAddr& from);
  void MergeFrom(const BlockInfoOutAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfoOutAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BlockInfoOutAddr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:BlockInfoOutAddr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetBlockInfoDetailAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetBlockInfoDetailAck) */ {
 public:
  GetBlockInfoDetailAck();
  virtual ~GetBlockInfoDetailAck();

  GetBlockInfoDetailAck(const GetBlockInfoDetailAck& from);
  GetBlockInfoDetailAck(GetBlockInfoDetailAck&& from) noexcept
    : GetBlockInfoDetailAck() {
    *this = ::std::move(from);
  }

  inline GetBlockInfoDetailAck& operator=(const GetBlockInfoDetailAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockInfoDetailAck& operator=(GetBlockInfoDetailAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockInfoDetailAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockInfoDetailAck* internal_default_instance() {
    return reinterpret_cast<const GetBlockInfoDetailAck*>(
               &_GetBlockInfoDetailAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetBlockInfoDetailAck& a, GetBlockInfoDetailAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockInfoDetailAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockInfoDetailAck* New() const final {
    return CreateMaybeMessage<GetBlockInfoDetailAck>(nullptr);
  }

  GetBlockInfoDetailAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockInfoDetailAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockInfoDetailAck& from);
  void MergeFrom(const GetBlockInfoDetailAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockInfoDetailAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetBlockInfoDetailAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignerFieldNumber = 10,
    kBlockInfoOutAddrFieldNumber = 11,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kBlockhashFieldNumber = 4,
    kMerkleRootFieldNumber = 6,
    kPrevHashFieldNumber = 7,
    kTatalAmountFieldNumber = 9,
    kCodeFieldNumber = 2,
    kBlockheightFieldNumber = 5,
    kTimeFieldNumber = 8,
  };
  // repeated string signer = 10;
  int signer_size() const;
  private:
  int _internal_signer_size() const;
  public:
  void clear_signer();
  const std::string& signer(int index) const;
  std::string* mutable_signer(int index);
  void set_signer(int index, const std::string& value);
  void set_signer(int index, std::string&& value);
  void set_signer(int index, const char* value);
  void set_signer(int index, const char* value, size_t size);
  std::string* add_signer();
  void add_signer(const std::string& value);
  void add_signer(std::string&& value);
  void add_signer(const char* value);
  void add_signer(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signer();
  private:
  const std::string& _internal_signer(int index) const;
  std::string* _internal_add_signer();
  public:

  // repeated .BlockInfoOutAddr blockInfoOutAddr = 11;
  int blockinfooutaddr_size() const;
  private:
  int _internal_blockinfooutaddr_size() const;
  public:
  void clear_blockinfooutaddr();
  ::BlockInfoOutAddr* mutable_blockinfooutaddr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoOutAddr >*
      mutable_blockinfooutaddr();
  private:
  const ::BlockInfoOutAddr& _internal_blockinfooutaddr(int index) const;
  ::BlockInfoOutAddr* _internal_add_blockinfooutaddr();
  public:
  const ::BlockInfoOutAddr& blockinfooutaddr(int index) const;
  ::BlockInfoOutAddr* add_blockinfooutaddr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoOutAddr >&
      blockinfooutaddr() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string blockhash = 4;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const char* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // string merkleRoot = 6;
  void clear_merkleroot();
  const std::string& merkleroot() const;
  void set_merkleroot(const std::string& value);
  void set_merkleroot(std::string&& value);
  void set_merkleroot(const char* value);
  void set_merkleroot(const char* value, size_t size);
  std::string* mutable_merkleroot();
  std::string* release_merkleroot();
  void set_allocated_merkleroot(std::string* merkleroot);
  private:
  const std::string& _internal_merkleroot() const;
  void _internal_set_merkleroot(const std::string& value);
  std::string* _internal_mutable_merkleroot();
  public:

  // string prevHash = 7;
  void clear_prevhash();
  const std::string& prevhash() const;
  void set_prevhash(const std::string& value);
  void set_prevhash(std::string&& value);
  void set_prevhash(const char* value);
  void set_prevhash(const char* value, size_t size);
  std::string* mutable_prevhash();
  std::string* release_prevhash();
  void set_allocated_prevhash(std::string* prevhash);
  private:
  const std::string& _internal_prevhash() const;
  void _internal_set_prevhash(const std::string& value);
  std::string* _internal_mutable_prevhash();
  public:

  // string tatalAmount = 9;
  void clear_tatalamount();
  const std::string& tatalamount() const;
  void set_tatalamount(const std::string& value);
  void set_tatalamount(std::string&& value);
  void set_tatalamount(const char* value);
  void set_tatalamount(const char* value, size_t size);
  std::string* mutable_tatalamount();
  std::string* release_tatalamount();
  void set_allocated_tatalamount(std::string* tatalamount);
  private:
  const std::string& _internal_tatalamount() const;
  void _internal_set_tatalamount(const std::string& value);
  std::string* _internal_mutable_tatalamount();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 blockheight = 5;
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 time = 8;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:GetBlockInfoDetailAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoOutAddr > blockinfooutaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merkleroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tatalamount_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TestConnectReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestConnectReq) */ {
 public:
  TestConnectReq();
  virtual ~TestConnectReq();

  TestConnectReq(const TestConnectReq& from);
  TestConnectReq(TestConnectReq&& from) noexcept
    : TestConnectReq() {
    *this = ::std::move(from);
  }

  inline TestConnectReq& operator=(const TestConnectReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConnectReq& operator=(TestConnectReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConnectReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConnectReq* internal_default_instance() {
    return reinterpret_cast<const TestConnectReq*>(
               &_TestConnectReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(TestConnectReq& a, TestConnectReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConnectReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConnectReq* New() const final {
    return CreateMaybeMessage<TestConnectReq>(nullptr);
  }

  TestConnectReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConnectReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConnectReq& from);
  void MergeFrom(const TestConnectReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConnectReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestConnectReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:TestConnectReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TestConnectAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestConnectAck) */ {
 public:
  TestConnectAck();
  virtual ~TestConnectAck();

  TestConnectAck(const TestConnectAck& from);
  TestConnectAck(TestConnectAck&& from) noexcept
    : TestConnectAck() {
    *this = ::std::move(from);
  }

  inline TestConnectAck& operator=(const TestConnectAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestConnectAck& operator=(TestConnectAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestConnectAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestConnectAck* internal_default_instance() {
    return reinterpret_cast<const TestConnectAck*>(
               &_TestConnectAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(TestConnectAck& a, TestConnectAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TestConnectAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestConnectAck* New() const final {
    return CreateMaybeMessage<TestConnectAck>(nullptr);
  }

  TestConnectAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestConnectAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestConnectAck& from);
  void MergeFrom(const TestConnectAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestConnectAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestConnectAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TestConnectAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Device2PubNetRandomReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Device2PubNetRandomReq) */ {
 public:
  Device2PubNetRandomReq();
  virtual ~Device2PubNetRandomReq();

  Device2PubNetRandomReq(const Device2PubNetRandomReq& from);
  Device2PubNetRandomReq(Device2PubNetRandomReq&& from) noexcept
    : Device2PubNetRandomReq() {
    *this = ::std::move(from);
  }

  inline Device2PubNetRandomReq& operator=(const Device2PubNetRandomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device2PubNetRandomReq& operator=(Device2PubNetRandomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device2PubNetRandomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device2PubNetRandomReq* internal_default_instance() {
    return reinterpret_cast<const Device2PubNetRandomReq*>(
               &_Device2PubNetRandomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(Device2PubNetRandomReq& a, Device2PubNetRandomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Device2PubNetRandomReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device2PubNetRandomReq* New() const final {
    return CreateMaybeMessage<Device2PubNetRandomReq>(nullptr);
  }

  Device2PubNetRandomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device2PubNetRandomReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device2PubNetRandomReq& from);
  void MergeFrom(const Device2PubNetRandomReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device2PubNetRandomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Device2PubNetRandomReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Device2PubNetRandomReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class RandomPubNet2DeviceAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RandomPubNet2DeviceAck) */ {
 public:
  RandomPubNet2DeviceAck();
  virtual ~RandomPubNet2DeviceAck();

  RandomPubNet2DeviceAck(const RandomPubNet2DeviceAck& from);
  RandomPubNet2DeviceAck(RandomPubNet2DeviceAck&& from) noexcept
    : RandomPubNet2DeviceAck() {
    *this = ::std::move(from);
  }

  inline RandomPubNet2DeviceAck& operator=(const RandomPubNet2DeviceAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomPubNet2DeviceAck& operator=(RandomPubNet2DeviceAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomPubNet2DeviceAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RandomPubNet2DeviceAck* internal_default_instance() {
    return reinterpret_cast<const RandomPubNet2DeviceAck*>(
               &_RandomPubNet2DeviceAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(RandomPubNet2DeviceAck& a, RandomPubNet2DeviceAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomPubNet2DeviceAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomPubNet2DeviceAck* New() const final {
    return CreateMaybeMessage<RandomPubNet2DeviceAck>(nullptr);
  }

  RandomPubNet2DeviceAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomPubNet2DeviceAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomPubNet2DeviceAck& from);
  void MergeFrom(const RandomPubNet2DeviceAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomPubNet2DeviceAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RandomPubNet2DeviceAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:RandomPubNet2DeviceAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Device2AllDevReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Device2AllDevReq) */ {
 public:
  Device2AllDevReq();
  virtual ~Device2AllDevReq();

  Device2AllDevReq(const Device2AllDevReq& from);
  Device2AllDevReq(Device2AllDevReq&& from) noexcept
    : Device2AllDevReq() {
    *this = ::std::move(from);
  }

  inline Device2AllDevReq& operator=(const Device2AllDevReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device2AllDevReq& operator=(Device2AllDevReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device2AllDevReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device2AllDevReq* internal_default_instance() {
    return reinterpret_cast<const Device2AllDevReq*>(
               &_Device2AllDevReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Device2AllDevReq& a, Device2AllDevReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Device2AllDevReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device2AllDevReq* New() const final {
    return CreateMaybeMessage<Device2AllDevReq>(nullptr);
  }

  Device2AllDevReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device2AllDevReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device2AllDevReq& from);
  void MergeFrom(const Device2AllDevReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device2AllDevReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Device2AllDevReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Device2AllDevReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class Feedback2DeviceAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Feedback2DeviceAck) */ {
 public:
  Feedback2DeviceAck();
  virtual ~Feedback2DeviceAck();

  Feedback2DeviceAck(const Feedback2DeviceAck& from);
  Feedback2DeviceAck(Feedback2DeviceAck&& from) noexcept
    : Feedback2DeviceAck() {
    *this = ::std::move(from);
  }

  inline Feedback2DeviceAck& operator=(const Feedback2DeviceAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feedback2DeviceAck& operator=(Feedback2DeviceAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feedback2DeviceAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feedback2DeviceAck* internal_default_instance() {
    return reinterpret_cast<const Feedback2DeviceAck*>(
               &_Feedback2DeviceAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(Feedback2DeviceAck& a, Feedback2DeviceAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Feedback2DeviceAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feedback2DeviceAck* New() const final {
    return CreateMaybeMessage<Feedback2DeviceAck>(nullptr);
  }

  Feedback2DeviceAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feedback2DeviceAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feedback2DeviceAck& from);
  void MergeFrom(const Feedback2DeviceAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feedback2DeviceAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Feedback2DeviceAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Feedback2DeviceAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class DataTransReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataTransReq) */ {
 public:
  DataTransReq();
  virtual ~DataTransReq();

  DataTransReq(const DataTransReq& from);
  DataTransReq(DataTransReq&& from) noexcept
    : DataTransReq() {
    *this = ::std::move(from);
  }

  inline DataTransReq& operator=(const DataTransReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataTransReq& operator=(DataTransReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataTransReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataTransReq* internal_default_instance() {
    return reinterpret_cast<const DataTransReq*>(
               &_DataTransReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(DataTransReq& a, DataTransReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DataTransReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataTransReq* New() const final {
    return CreateMaybeMessage<DataTransReq>(nullptr);
  }

  DataTransReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataTransReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataTransReq& from);
  void MergeFrom(const DataTransReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataTransReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataTransReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:DataTransReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TransData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransData) */ {
 public:
  TransData();
  virtual ~TransData();

  TransData(const TransData& from);
  TransData(TransData&& from) noexcept
    : TransData() {
    *this = ::std::move(from);
  }

  inline TransData& operator=(const TransData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransData& operator=(TransData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransData* internal_default_instance() {
    return reinterpret_cast<const TransData*>(
               &_TransData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TransData& a, TransData& b) {
    a.Swap(&b);
  }
  inline void Swap(TransData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransData* New() const final {
    return CreateMaybeMessage<TransData>(nullptr);
  }

  TransData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransData& from);
  void MergeFrom(const TransData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kEncodedataFieldNumber = 3,
    kOrigindataFieldNumber = 4,
    kIdFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes encodedata = 3;
  void clear_encodedata();
  const std::string& encodedata() const;
  void set_encodedata(const std::string& value);
  void set_encodedata(std::string&& value);
  void set_encodedata(const char* value);
  void set_encodedata(const void* value, size_t size);
  std::string* mutable_encodedata();
  std::string* release_encodedata();
  void set_allocated_encodedata(std::string* encodedata);
  private:
  const std::string& _internal_encodedata() const;
  void _internal_set_encodedata(const std::string& value);
  std::string* _internal_mutable_encodedata();
  public:

  // bytes origindata = 4;
  void clear_origindata();
  const std::string& origindata() const;
  void set_origindata(const std::string& value);
  void set_origindata(std::string&& value);
  void set_origindata(const char* value);
  void set_origindata(const void* value, size_t size);
  std::string* mutable_origindata();
  std::string* release_origindata();
  void set_allocated_origindata(std::string* origindata);
  private:
  const std::string& _internal_origindata() const;
  void _internal_set_origindata(const std::string& value);
  std::string* _internal_mutable_origindata();
  public:

  // string id = 5;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:TransData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encodedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origindata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetTxPendingListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTxPendingListReq) */ {
 public:
  GetTxPendingListReq();
  virtual ~GetTxPendingListReq();

  GetTxPendingListReq(const GetTxPendingListReq& from);
  GetTxPendingListReq(GetTxPendingListReq&& from) noexcept
    : GetTxPendingListReq() {
    *this = ::std::move(from);
  }

  inline GetTxPendingListReq& operator=(const GetTxPendingListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxPendingListReq& operator=(GetTxPendingListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxPendingListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxPendingListReq* internal_default_instance() {
    return reinterpret_cast<const GetTxPendingListReq*>(
               &_GetTxPendingListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(GetTxPendingListReq& a, GetTxPendingListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxPendingListReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxPendingListReq* New() const final {
    return CreateMaybeMessage<GetTxPendingListReq>(nullptr);
  }

  GetTxPendingListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxPendingListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxPendingListReq& from);
  void MergeFrom(const GetTxPendingListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxPendingListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTxPendingListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated string addr = 2;
  int addr_size() const;
  private:
  int _internal_addr_size() const;
  public:
  void clear_addr();
  const std::string& addr(int index) const;
  std::string* mutable_addr(int index);
  void set_addr(int index, const std::string& value);
  void set_addr(int index, std::string&& value);
  void set_addr(int index, const char* value);
  void set_addr(int index, const char* value, size_t size);
  std::string* add_addr();
  void add_addr(const std::string& value);
  void add_addr(std::string&& value);
  void add_addr(const char* value);
  void add_addr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addr();
  private:
  const std::string& _internal_addr(int index) const;
  std::string* _internal_add_addr();
  public:

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:GetTxPendingListReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class TxPendingItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxPendingItem) */ {
 public:
  TxPendingItem();
  virtual ~TxPendingItem();

  TxPendingItem(const TxPendingItem& from);
  TxPendingItem(TxPendingItem&& from) noexcept
    : TxPendingItem() {
    *this = ::std::move(from);
  }

  inline TxPendingItem& operator=(const TxPendingItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxPendingItem& operator=(TxPendingItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxPendingItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxPendingItem* internal_default_instance() {
    return reinterpret_cast<const TxPendingItem*>(
               &_TxPendingItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(TxPendingItem& a, TxPendingItem& b) {
    a.Swap(&b);
  }
  inline void Swap(TxPendingItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxPendingItem* New() const final {
    return CreateMaybeMessage<TxPendingItem>(nullptr);
  }

  TxPendingItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxPendingItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxPendingItem& from);
  void MergeFrom(const TxPendingItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxPendingItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxPendingItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVinsFieldNumber = 2,
    kFromaddrFieldNumber = 3,
    kToaddrFieldNumber = 4,
    kTxHashFieldNumber = 1,
    kAmountFieldNumber = 5,
    kDetailFieldNumber = 7,
    kTimeFieldNumber = 6,
  };
  // repeated string vins = 2;
  int vins_size() const;
  private:
  int _internal_vins_size() const;
  public:
  void clear_vins();
  const std::string& vins(int index) const;
  std::string* mutable_vins(int index);
  void set_vins(int index, const std::string& value);
  void set_vins(int index, std::string&& value);
  void set_vins(int index, const char* value);
  void set_vins(int index, const char* value, size_t size);
  std::string* add_vins();
  void add_vins(const std::string& value);
  void add_vins(std::string&& value);
  void add_vins(const char* value);
  void add_vins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vins();
  private:
  const std::string& _internal_vins(int index) const;
  std::string* _internal_add_vins();
  public:

  // repeated string fromaddr = 3;
  int fromaddr_size() const;
  private:
  int _internal_fromaddr_size() const;
  public:
  void clear_fromaddr();
  const std::string& fromaddr(int index) const;
  std::string* mutable_fromaddr(int index);
  void set_fromaddr(int index, const std::string& value);
  void set_fromaddr(int index, std::string&& value);
  void set_fromaddr(int index, const char* value);
  void set_fromaddr(int index, const char* value, size_t size);
  std::string* add_fromaddr();
  void add_fromaddr(const std::string& value);
  void add_fromaddr(std::string&& value);
  void add_fromaddr(const char* value);
  void add_fromaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fromaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fromaddr();
  private:
  const std::string& _internal_fromaddr(int index) const;
  std::string* _internal_add_fromaddr();
  public:

  // repeated string toaddr = 4;
  int toaddr_size() const;
  private:
  int _internal_toaddr_size() const;
  public:
  void clear_toaddr();
  const std::string& toaddr(int index) const;
  std::string* mutable_toaddr(int index);
  void set_toaddr(int index, const std::string& value);
  void set_toaddr(int index, std::string&& value);
  void set_toaddr(int index, const char* value);
  void set_toaddr(int index, const char* value, size_t size);
  std::string* add_toaddr();
  void add_toaddr(const std::string& value);
  void add_toaddr(std::string&& value);
  void add_toaddr(const char* value);
  void add_toaddr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& toaddr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_toaddr();
  private:
  const std::string& _internal_toaddr(int index) const;
  std::string* _internal_add_toaddr();
  public:

  // string txHash = 1;
  void clear_txhash();
  const std::string& txhash() const;
  void set_txhash(const std::string& value);
  void set_txhash(std::string&& value);
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  std::string* mutable_txhash();
  std::string* release_txhash();
  void set_allocated_txhash(std::string* txhash);
  private:
  const std::string& _internal_txhash() const;
  void _internal_set_txhash(const std::string& value);
  std::string* _internal_mutable_txhash();
  public:

  // string amount = 5;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string detail = 7;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // uint64 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TxPendingItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fromaddr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> toaddr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// -------------------------------------------------------------------

class GetTxPendingListAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTxPendingListAck) */ {
 public:
  GetTxPendingListAck();
  virtual ~GetTxPendingListAck();

  GetTxPendingListAck(const GetTxPendingListAck& from);
  GetTxPendingListAck(GetTxPendingListAck&& from) noexcept
    : GetTxPendingListAck() {
    *this = ::std::move(from);
  }

  inline GetTxPendingListAck& operator=(const GetTxPendingListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxPendingListAck& operator=(GetTxPendingListAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTxPendingListAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxPendingListAck* internal_default_instance() {
    return reinterpret_cast<const GetTxPendingListAck*>(
               &_GetTxPendingListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GetTxPendingListAck& a, GetTxPendingListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxPendingListAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTxPendingListAck* New() const final {
    return CreateMaybeMessage<GetTxPendingListAck>(nullptr);
  }

  GetTxPendingListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTxPendingListAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTxPendingListAck& from);
  void MergeFrom(const GetTxPendingListAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxPendingListAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTxPendingListAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_interface_2eproto);
    return ::descriptor_table_interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 4,
    kListFieldNumber = 5,
    kVersionFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated string addr = 4;
  int addr_size() const;
  private:
  int _internal_addr_size() const;
  public:
  void clear_addr();
  const std::string& addr(int index) const;
  std::string* mutable_addr(int index);
  void set_addr(int index, const std::string& value);
  void set_addr(int index, std::string&& value);
  void set_addr(int index, const char* value);
  void set_addr(int index, const char* value, size_t size);
  std::string* add_addr();
  void add_addr(const std::string& value);
  void add_addr(std::string&& value);
  void add_addr(const char* value);
  void add_addr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addr();
  private:
  const std::string& _internal_addr(int index) const;
  std::string* _internal_add_addr();
  public:

  // repeated .TxPendingItem list = 5;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::TxPendingItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxPendingItem >*
      mutable_list();
  private:
  const ::TxPendingItem& _internal_list(int index) const;
  ::TxPendingItem* _internal_add_list();
  public:
  const ::TxPendingItem& list(int index) const;
  ::TxPendingItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxPendingItem >&
      list() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetTxPendingListAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxPendingItem > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_interface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAmountReq

// string version = 1;
inline void GetAmountReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAmountReq::version() const {
  // @@protoc_insertion_point(field_get:GetAmountReq.version)
  return _internal_version();
}
inline void GetAmountReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetAmountReq.version)
}
inline std::string* GetAmountReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetAmountReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetAmountReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetAmountReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAmountReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAmountReq.version)
}
inline void GetAmountReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAmountReq.version)
}
inline void GetAmountReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAmountReq.version)
}
inline std::string* GetAmountReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAmountReq::release_version() {
  // @@protoc_insertion_point(field_release:GetAmountReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAmountReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetAmountReq.version)
}

// string address = 2;
inline void GetAmountReq::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAmountReq::address() const {
  // @@protoc_insertion_point(field_get:GetAmountReq.address)
  return _internal_address();
}
inline void GetAmountReq::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:GetAmountReq.address)
}
inline std::string* GetAmountReq::mutable_address() {
  // @@protoc_insertion_point(field_mutable:GetAmountReq.address)
  return _internal_mutable_address();
}
inline const std::string& GetAmountReq::_internal_address() const {
  return address_.GetNoArena();
}
inline void GetAmountReq::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAmountReq::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAmountReq.address)
}
inline void GetAmountReq::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAmountReq.address)
}
inline void GetAmountReq::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAmountReq.address)
}
inline std::string* GetAmountReq::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAmountReq::release_address() {
  // @@protoc_insertion_point(field_release:GetAmountReq.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAmountReq::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:GetAmountReq.address)
}

// -------------------------------------------------------------------

// GetAmountAck

// string version = 1;
inline void GetAmountAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAmountAck::version() const {
  // @@protoc_insertion_point(field_get:GetAmountAck.version)
  return _internal_version();
}
inline void GetAmountAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetAmountAck.version)
}
inline std::string* GetAmountAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetAmountAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetAmountAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetAmountAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAmountAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAmountAck.version)
}
inline void GetAmountAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAmountAck.version)
}
inline void GetAmountAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAmountAck.version)
}
inline std::string* GetAmountAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAmountAck::release_version() {
  // @@protoc_insertion_point(field_release:GetAmountAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAmountAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetAmountAck.version)
}

// sint32 code = 2;
inline void GetAmountAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAmountAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAmountAck::code() const {
  // @@protoc_insertion_point(field_get:GetAmountAck.code)
  return _internal_code();
}
inline void GetAmountAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetAmountAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetAmountAck.code)
}

// string description = 3;
inline void GetAmountAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAmountAck::description() const {
  // @@protoc_insertion_point(field_get:GetAmountAck.description)
  return _internal_description();
}
inline void GetAmountAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetAmountAck.description)
}
inline std::string* GetAmountAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetAmountAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetAmountAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetAmountAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAmountAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAmountAck.description)
}
inline void GetAmountAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAmountAck.description)
}
inline void GetAmountAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAmountAck.description)
}
inline std::string* GetAmountAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAmountAck::release_description() {
  // @@protoc_insertion_point(field_release:GetAmountAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAmountAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetAmountAck.description)
}

// string address = 4;
inline void GetAmountAck::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAmountAck::address() const {
  // @@protoc_insertion_point(field_get:GetAmountAck.address)
  return _internal_address();
}
inline void GetAmountAck::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:GetAmountAck.address)
}
inline std::string* GetAmountAck::mutable_address() {
  // @@protoc_insertion_point(field_mutable:GetAmountAck.address)
  return _internal_mutable_address();
}
inline const std::string& GetAmountAck::_internal_address() const {
  return address_.GetNoArena();
}
inline void GetAmountAck::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAmountAck::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAmountAck.address)
}
inline void GetAmountAck::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAmountAck.address)
}
inline void GetAmountAck::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAmountAck.address)
}
inline std::string* GetAmountAck::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAmountAck::release_address() {
  // @@protoc_insertion_point(field_release:GetAmountAck.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAmountAck::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:GetAmountAck.address)
}

// string balance = 5;
inline void GetAmountAck::clear_balance() {
  balance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAmountAck::balance() const {
  // @@protoc_insertion_point(field_get:GetAmountAck.balance)
  return _internal_balance();
}
inline void GetAmountAck::set_balance(const std::string& value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:GetAmountAck.balance)
}
inline std::string* GetAmountAck::mutable_balance() {
  // @@protoc_insertion_point(field_mutable:GetAmountAck.balance)
  return _internal_mutable_balance();
}
inline const std::string& GetAmountAck::_internal_balance() const {
  return balance_.GetNoArena();
}
inline void GetAmountAck::_internal_set_balance(const std::string& value) {
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAmountAck::set_balance(std::string&& value) {
  
  balance_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAmountAck.balance)
}
inline void GetAmountAck::set_balance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAmountAck.balance)
}
inline void GetAmountAck::set_balance(const char* value, size_t size) {
  
  balance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAmountAck.balance)
}
inline std::string* GetAmountAck::_internal_mutable_balance() {
  
  return balance_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAmountAck::release_balance() {
  // @@protoc_insertion_point(field_release:GetAmountAck.balance)
  
  return balance_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAmountAck::set_allocated_balance(std::string* balance) {
  if (balance != nullptr) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:GetAmountAck.balance)
}

// -------------------------------------------------------------------

// GetBlockInfoReq

// string version = 1;
inline void GetBlockInfoReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoReq::version() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoReq.version)
  return _internal_version();
}
inline void GetBlockInfoReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoReq.version)
}
inline std::string* GetBlockInfoReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetBlockInfoReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetBlockInfoReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoReq.version)
}
inline void GetBlockInfoReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoReq.version)
}
inline void GetBlockInfoReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoReq.version)
}
inline std::string* GetBlockInfoReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoReq::release_version() {
  // @@protoc_insertion_point(field_release:GetBlockInfoReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoReq.version)
}

// sint32 height = 2;
inline void GetBlockInfoReq::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoReq::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoReq::height() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoReq.height)
  return _internal_height();
}
inline void GetBlockInfoReq::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void GetBlockInfoReq::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoReq.height)
}

// sint32 count = 3;
inline void GetBlockInfoReq::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoReq::count() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoReq.count)
  return _internal_count();
}
inline void GetBlockInfoReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetBlockInfoReq::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoReq.count)
}

// -------------------------------------------------------------------

// TxVinInfo

// string script_sig = 1;
inline void TxVinInfo::clear_script_sig() {
  script_sig_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxVinInfo::script_sig() const {
  // @@protoc_insertion_point(field_get:TxVinInfo.script_sig)
  return _internal_script_sig();
}
inline void TxVinInfo::set_script_sig(const std::string& value) {
  _internal_set_script_sig(value);
  // @@protoc_insertion_point(field_set:TxVinInfo.script_sig)
}
inline std::string* TxVinInfo::mutable_script_sig() {
  // @@protoc_insertion_point(field_mutable:TxVinInfo.script_sig)
  return _internal_mutable_script_sig();
}
inline const std::string& TxVinInfo::_internal_script_sig() const {
  return script_sig_.GetNoArena();
}
inline void TxVinInfo::_internal_set_script_sig(const std::string& value) {
  
  script_sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxVinInfo::set_script_sig(std::string&& value) {
  
  script_sig_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxVinInfo.script_sig)
}
inline void TxVinInfo::set_script_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxVinInfo.script_sig)
}
inline void TxVinInfo::set_script_sig(const char* value, size_t size) {
  
  script_sig_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxVinInfo.script_sig)
}
inline std::string* TxVinInfo::_internal_mutable_script_sig() {
  
  return script_sig_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxVinInfo::release_script_sig() {
  // @@protoc_insertion_point(field_release:TxVinInfo.script_sig)
  
  return script_sig_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxVinInfo::set_allocated_script_sig(std::string* script_sig) {
  if (script_sig != nullptr) {
    
  } else {
    
  }
  script_sig_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script_sig);
  // @@protoc_insertion_point(field_set_allocated:TxVinInfo.script_sig)
}

// string pre_vout_hash = 2;
inline void TxVinInfo::clear_pre_vout_hash() {
  pre_vout_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxVinInfo::pre_vout_hash() const {
  // @@protoc_insertion_point(field_get:TxVinInfo.pre_vout_hash)
  return _internal_pre_vout_hash();
}
inline void TxVinInfo::set_pre_vout_hash(const std::string& value) {
  _internal_set_pre_vout_hash(value);
  // @@protoc_insertion_point(field_set:TxVinInfo.pre_vout_hash)
}
inline std::string* TxVinInfo::mutable_pre_vout_hash() {
  // @@protoc_insertion_point(field_mutable:TxVinInfo.pre_vout_hash)
  return _internal_mutable_pre_vout_hash();
}
inline const std::string& TxVinInfo::_internal_pre_vout_hash() const {
  return pre_vout_hash_.GetNoArena();
}
inline void TxVinInfo::_internal_set_pre_vout_hash(const std::string& value) {
  
  pre_vout_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxVinInfo::set_pre_vout_hash(std::string&& value) {
  
  pre_vout_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxVinInfo.pre_vout_hash)
}
inline void TxVinInfo::set_pre_vout_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pre_vout_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxVinInfo.pre_vout_hash)
}
inline void TxVinInfo::set_pre_vout_hash(const char* value, size_t size) {
  
  pre_vout_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxVinInfo.pre_vout_hash)
}
inline std::string* TxVinInfo::_internal_mutable_pre_vout_hash() {
  
  return pre_vout_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxVinInfo::release_pre_vout_hash() {
  // @@protoc_insertion_point(field_release:TxVinInfo.pre_vout_hash)
  
  return pre_vout_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxVinInfo::set_allocated_pre_vout_hash(std::string* pre_vout_hash) {
  if (pre_vout_hash != nullptr) {
    
  } else {
    
  }
  pre_vout_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_vout_hash);
  // @@protoc_insertion_point(field_set_allocated:TxVinInfo.pre_vout_hash)
}

// uint64 pre_vout_index = 3;
inline void TxVinInfo::clear_pre_vout_index() {
  pre_vout_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxVinInfo::_internal_pre_vout_index() const {
  return pre_vout_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxVinInfo::pre_vout_index() const {
  // @@protoc_insertion_point(field_get:TxVinInfo.pre_vout_index)
  return _internal_pre_vout_index();
}
inline void TxVinInfo::_internal_set_pre_vout_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pre_vout_index_ = value;
}
inline void TxVinInfo::set_pre_vout_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pre_vout_index(value);
  // @@protoc_insertion_point(field_set:TxVinInfo.pre_vout_index)
}

// -------------------------------------------------------------------

// TxVoutInfo

// string script_pubkey = 1;
inline void TxVoutInfo::clear_script_pubkey() {
  script_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxVoutInfo::script_pubkey() const {
  // @@protoc_insertion_point(field_get:TxVoutInfo.script_pubkey)
  return _internal_script_pubkey();
}
inline void TxVoutInfo::set_script_pubkey(const std::string& value) {
  _internal_set_script_pubkey(value);
  // @@protoc_insertion_point(field_set:TxVoutInfo.script_pubkey)
}
inline std::string* TxVoutInfo::mutable_script_pubkey() {
  // @@protoc_insertion_point(field_mutable:TxVoutInfo.script_pubkey)
  return _internal_mutable_script_pubkey();
}
inline const std::string& TxVoutInfo::_internal_script_pubkey() const {
  return script_pubkey_.GetNoArena();
}
inline void TxVoutInfo::_internal_set_script_pubkey(const std::string& value) {
  
  script_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxVoutInfo::set_script_pubkey(std::string&& value) {
  
  script_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxVoutInfo.script_pubkey)
}
inline void TxVoutInfo::set_script_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxVoutInfo.script_pubkey)
}
inline void TxVoutInfo::set_script_pubkey(const char* value, size_t size) {
  
  script_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxVoutInfo.script_pubkey)
}
inline std::string* TxVoutInfo::_internal_mutable_script_pubkey() {
  
  return script_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxVoutInfo::release_script_pubkey() {
  // @@protoc_insertion_point(field_release:TxVoutInfo.script_pubkey)
  
  return script_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxVoutInfo::set_allocated_script_pubkey(std::string* script_pubkey) {
  if (script_pubkey != nullptr) {
    
  } else {
    
  }
  script_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script_pubkey);
  // @@protoc_insertion_point(field_set_allocated:TxVoutInfo.script_pubkey)
}

// string amount = 2;
inline void TxVoutInfo::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxVoutInfo::amount() const {
  // @@protoc_insertion_point(field_get:TxVoutInfo.amount)
  return _internal_amount();
}
inline void TxVoutInfo::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TxVoutInfo.amount)
}
inline std::string* TxVoutInfo::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TxVoutInfo.amount)
  return _internal_mutable_amount();
}
inline const std::string& TxVoutInfo::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void TxVoutInfo::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxVoutInfo::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxVoutInfo.amount)
}
inline void TxVoutInfo::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxVoutInfo.amount)
}
inline void TxVoutInfo::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxVoutInfo.amount)
}
inline std::string* TxVoutInfo::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxVoutInfo::release_amount() {
  // @@protoc_insertion_point(field_release:TxVoutInfo.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxVoutInfo::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:TxVoutInfo.amount)
}

// -------------------------------------------------------------------

// TxInfo

// string tx_hash = 1;
inline void TxInfo::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxInfo::tx_hash() const {
  // @@protoc_insertion_point(field_get:TxInfo.tx_hash)
  return _internal_tx_hash();
}
inline void TxInfo::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:TxInfo.tx_hash)
}
inline std::string* TxInfo::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:TxInfo.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& TxInfo::_internal_tx_hash() const {
  return tx_hash_.GetNoArena();
}
inline void TxInfo::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxInfo::set_tx_hash(std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxInfo.tx_hash)
}
inline void TxInfo::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxInfo.tx_hash)
}
inline void TxInfo::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxInfo.tx_hash)
}
inline std::string* TxInfo::_internal_mutable_tx_hash() {
  
  return tx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxInfo::release_tx_hash() {
  // @@protoc_insertion_point(field_release:TxInfo.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:TxInfo.tx_hash)
}

// repeated string transaction_signer = 2;
inline int TxInfo::_internal_transaction_signer_size() const {
  return transaction_signer_.size();
}
inline int TxInfo::transaction_signer_size() const {
  return _internal_transaction_signer_size();
}
inline void TxInfo::clear_transaction_signer() {
  transaction_signer_.Clear();
}
inline std::string* TxInfo::add_transaction_signer() {
  // @@protoc_insertion_point(field_add_mutable:TxInfo.transaction_signer)
  return _internal_add_transaction_signer();
}
inline const std::string& TxInfo::_internal_transaction_signer(int index) const {
  return transaction_signer_.Get(index);
}
inline const std::string& TxInfo::transaction_signer(int index) const {
  // @@protoc_insertion_point(field_get:TxInfo.transaction_signer)
  return _internal_transaction_signer(index);
}
inline std::string* TxInfo::mutable_transaction_signer(int index) {
  // @@protoc_insertion_point(field_mutable:TxInfo.transaction_signer)
  return transaction_signer_.Mutable(index);
}
inline void TxInfo::set_transaction_signer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TxInfo.transaction_signer)
  transaction_signer_.Mutable(index)->assign(value);
}
inline void TxInfo::set_transaction_signer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TxInfo.transaction_signer)
  transaction_signer_.Mutable(index)->assign(std::move(value));
}
inline void TxInfo::set_transaction_signer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_signer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxInfo.transaction_signer)
}
inline void TxInfo::set_transaction_signer(int index, const char* value, size_t size) {
  transaction_signer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxInfo.transaction_signer)
}
inline std::string* TxInfo::_internal_add_transaction_signer() {
  return transaction_signer_.Add();
}
inline void TxInfo::add_transaction_signer(const std::string& value) {
  transaction_signer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxInfo.transaction_signer)
}
inline void TxInfo::add_transaction_signer(std::string&& value) {
  transaction_signer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxInfo.transaction_signer)
}
inline void TxInfo::add_transaction_signer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_signer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxInfo.transaction_signer)
}
inline void TxInfo::add_transaction_signer(const char* value, size_t size) {
  transaction_signer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxInfo.transaction_signer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxInfo::transaction_signer() const {
  // @@protoc_insertion_point(field_list:TxInfo.transaction_signer)
  return transaction_signer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxInfo::mutable_transaction_signer() {
  // @@protoc_insertion_point(field_mutable_list:TxInfo.transaction_signer)
  return &transaction_signer_;
}

// repeated .TxVinInfo vin_list = 3;
inline int TxInfo::_internal_vin_list_size() const {
  return vin_list_.size();
}
inline int TxInfo::vin_list_size() const {
  return _internal_vin_list_size();
}
inline void TxInfo::clear_vin_list() {
  vin_list_.Clear();
}
inline ::TxVinInfo* TxInfo::mutable_vin_list(int index) {
  // @@protoc_insertion_point(field_mutable:TxInfo.vin_list)
  return vin_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVinInfo >*
TxInfo::mutable_vin_list() {
  // @@protoc_insertion_point(field_mutable_list:TxInfo.vin_list)
  return &vin_list_;
}
inline const ::TxVinInfo& TxInfo::_internal_vin_list(int index) const {
  return vin_list_.Get(index);
}
inline const ::TxVinInfo& TxInfo::vin_list(int index) const {
  // @@protoc_insertion_point(field_get:TxInfo.vin_list)
  return _internal_vin_list(index);
}
inline ::TxVinInfo* TxInfo::_internal_add_vin_list() {
  return vin_list_.Add();
}
inline ::TxVinInfo* TxInfo::add_vin_list() {
  // @@protoc_insertion_point(field_add:TxInfo.vin_list)
  return _internal_add_vin_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVinInfo >&
TxInfo::vin_list() const {
  // @@protoc_insertion_point(field_list:TxInfo.vin_list)
  return vin_list_;
}

// repeated .TxVoutInfo vout_list = 4;
inline int TxInfo::_internal_vout_list_size() const {
  return vout_list_.size();
}
inline int TxInfo::vout_list_size() const {
  return _internal_vout_list_size();
}
inline void TxInfo::clear_vout_list() {
  vout_list_.Clear();
}
inline ::TxVoutInfo* TxInfo::mutable_vout_list(int index) {
  // @@protoc_insertion_point(field_mutable:TxInfo.vout_list)
  return vout_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVoutInfo >*
TxInfo::mutable_vout_list() {
  // @@protoc_insertion_point(field_mutable_list:TxInfo.vout_list)
  return &vout_list_;
}
inline const ::TxVoutInfo& TxInfo::_internal_vout_list(int index) const {
  return vout_list_.Get(index);
}
inline const ::TxVoutInfo& TxInfo::vout_list(int index) const {
  // @@protoc_insertion_point(field_get:TxInfo.vout_list)
  return _internal_vout_list(index);
}
inline ::TxVoutInfo* TxInfo::_internal_add_vout_list() {
  return vout_list_.Add();
}
inline ::TxVoutInfo* TxInfo::add_vout_list() {
  // @@protoc_insertion_point(field_add:TxInfo.vout_list)
  return _internal_add_vout_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxVoutInfo >&
TxInfo::vout_list() const {
  // @@protoc_insertion_point(field_list:TxInfo.vout_list)
  return vout_list_;
}

// uint64 nlock_time = 5;
inline void TxInfo::clear_nlock_time() {
  nlock_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxInfo::_internal_nlock_time() const {
  return nlock_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxInfo::nlock_time() const {
  // @@protoc_insertion_point(field_get:TxInfo.nlock_time)
  return _internal_nlock_time();
}
inline void TxInfo::_internal_set_nlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nlock_time_ = value;
}
inline void TxInfo::set_nlock_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nlock_time(value);
  // @@protoc_insertion_point(field_set:TxInfo.nlock_time)
}

// string stx_owner = 6;
inline void TxInfo::clear_stx_owner() {
  stx_owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxInfo::stx_owner() const {
  // @@protoc_insertion_point(field_get:TxInfo.stx_owner)
  return _internal_stx_owner();
}
inline void TxInfo::set_stx_owner(const std::string& value) {
  _internal_set_stx_owner(value);
  // @@protoc_insertion_point(field_set:TxInfo.stx_owner)
}
inline std::string* TxInfo::mutable_stx_owner() {
  // @@protoc_insertion_point(field_mutable:TxInfo.stx_owner)
  return _internal_mutable_stx_owner();
}
inline const std::string& TxInfo::_internal_stx_owner() const {
  return stx_owner_.GetNoArena();
}
inline void TxInfo::_internal_set_stx_owner(const std::string& value) {
  
  stx_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxInfo::set_stx_owner(std::string&& value) {
  
  stx_owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxInfo.stx_owner)
}
inline void TxInfo::set_stx_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stx_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxInfo.stx_owner)
}
inline void TxInfo::set_stx_owner(const char* value, size_t size) {
  
  stx_owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxInfo.stx_owner)
}
inline std::string* TxInfo::_internal_mutable_stx_owner() {
  
  return stx_owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxInfo::release_stx_owner() {
  // @@protoc_insertion_point(field_release:TxInfo.stx_owner)
  
  return stx_owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfo::set_allocated_stx_owner(std::string* stx_owner) {
  if (stx_owner != nullptr) {
    
  } else {
    
  }
  stx_owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stx_owner);
  // @@protoc_insertion_point(field_set_allocated:TxInfo.stx_owner)
}

// uint64 stx_owner_index = 7;
inline void TxInfo::clear_stx_owner_index() {
  stx_owner_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxInfo::_internal_stx_owner_index() const {
  return stx_owner_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxInfo::stx_owner_index() const {
  // @@protoc_insertion_point(field_get:TxInfo.stx_owner_index)
  return _internal_stx_owner_index();
}
inline void TxInfo::_internal_set_stx_owner_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stx_owner_index_ = value;
}
inline void TxInfo::set_stx_owner_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stx_owner_index(value);
  // @@protoc_insertion_point(field_set:TxInfo.stx_owner_index)
}

// uint32 version = 8;
inline void TxInfo::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TxInfo::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TxInfo::version() const {
  // @@protoc_insertion_point(field_get:TxInfo.version)
  return _internal_version();
}
inline void TxInfo::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void TxInfo::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TxInfo.version)
}

// -------------------------------------------------------------------

// BlockInfo

// sint32 height = 1;
inline void BlockInfo::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockInfo::height() const {
  // @@protoc_insertion_point(field_get:BlockInfo.height)
  return _internal_height();
}
inline void BlockInfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void BlockInfo::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:BlockInfo.height)
}

// string hash_merkle_root = 2;
inline void BlockInfo::clear_hash_merkle_root() {
  hash_merkle_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfo::hash_merkle_root() const {
  // @@protoc_insertion_point(field_get:BlockInfo.hash_merkle_root)
  return _internal_hash_merkle_root();
}
inline void BlockInfo::set_hash_merkle_root(const std::string& value) {
  _internal_set_hash_merkle_root(value);
  // @@protoc_insertion_point(field_set:BlockInfo.hash_merkle_root)
}
inline std::string* BlockInfo::mutable_hash_merkle_root() {
  // @@protoc_insertion_point(field_mutable:BlockInfo.hash_merkle_root)
  return _internal_mutable_hash_merkle_root();
}
inline const std::string& BlockInfo::_internal_hash_merkle_root() const {
  return hash_merkle_root_.GetNoArena();
}
inline void BlockInfo::_internal_set_hash_merkle_root(const std::string& value) {
  
  hash_merkle_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfo::set_hash_merkle_root(std::string&& value) {
  
  hash_merkle_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfo.hash_merkle_root)
}
inline void BlockInfo::set_hash_merkle_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_merkle_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfo.hash_merkle_root)
}
inline void BlockInfo::set_hash_merkle_root(const char* value, size_t size) {
  
  hash_merkle_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfo.hash_merkle_root)
}
inline std::string* BlockInfo::_internal_mutable_hash_merkle_root() {
  
  return hash_merkle_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfo::release_hash_merkle_root() {
  // @@protoc_insertion_point(field_release:BlockInfo.hash_merkle_root)
  
  return hash_merkle_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfo::set_allocated_hash_merkle_root(std::string* hash_merkle_root) {
  if (hash_merkle_root != nullptr) {
    
  } else {
    
  }
  hash_merkle_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_merkle_root);
  // @@protoc_insertion_point(field_set_allocated:BlockInfo.hash_merkle_root)
}

// string hash_prev_block = 3;
inline void BlockInfo::clear_hash_prev_block() {
  hash_prev_block_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfo::hash_prev_block() const {
  // @@protoc_insertion_point(field_get:BlockInfo.hash_prev_block)
  return _internal_hash_prev_block();
}
inline void BlockInfo::set_hash_prev_block(const std::string& value) {
  _internal_set_hash_prev_block(value);
  // @@protoc_insertion_point(field_set:BlockInfo.hash_prev_block)
}
inline std::string* BlockInfo::mutable_hash_prev_block() {
  // @@protoc_insertion_point(field_mutable:BlockInfo.hash_prev_block)
  return _internal_mutable_hash_prev_block();
}
inline const std::string& BlockInfo::_internal_hash_prev_block() const {
  return hash_prev_block_.GetNoArena();
}
inline void BlockInfo::_internal_set_hash_prev_block(const std::string& value) {
  
  hash_prev_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfo::set_hash_prev_block(std::string&& value) {
  
  hash_prev_block_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfo.hash_prev_block)
}
inline void BlockInfo::set_hash_prev_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_prev_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfo.hash_prev_block)
}
inline void BlockInfo::set_hash_prev_block(const char* value, size_t size) {
  
  hash_prev_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfo.hash_prev_block)
}
inline std::string* BlockInfo::_internal_mutable_hash_prev_block() {
  
  return hash_prev_block_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfo::release_hash_prev_block() {
  // @@protoc_insertion_point(field_release:BlockInfo.hash_prev_block)
  
  return hash_prev_block_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfo::set_allocated_hash_prev_block(std::string* hash_prev_block) {
  if (hash_prev_block != nullptr) {
    
  } else {
    
  }
  hash_prev_block_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_prev_block);
  // @@protoc_insertion_point(field_set_allocated:BlockInfo.hash_prev_block)
}

// string block_hash = 4;
inline void BlockInfo::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfo::block_hash() const {
  // @@protoc_insertion_point(field_get:BlockInfo.block_hash)
  return _internal_block_hash();
}
inline void BlockInfo::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:BlockInfo.block_hash)
}
inline std::string* BlockInfo::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:BlockInfo.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& BlockInfo::_internal_block_hash() const {
  return block_hash_.GetNoArena();
}
inline void BlockInfo::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfo::set_block_hash(std::string&& value) {
  
  block_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfo.block_hash)
}
inline void BlockInfo::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfo.block_hash)
}
inline void BlockInfo::set_block_hash(const char* value, size_t size) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfo.block_hash)
}
inline std::string* BlockInfo::_internal_mutable_block_hash() {
  
  return block_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfo::release_block_hash() {
  // @@protoc_insertion_point(field_release:BlockInfo.block_hash)
  
  return block_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfo::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:BlockInfo.block_hash)
}

// uint64 ntime = 5;
inline void BlockInfo::clear_ntime() {
  ntime_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::_internal_ntime() const {
  return ntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::ntime() const {
  // @@protoc_insertion_point(field_get:BlockInfo.ntime)
  return _internal_ntime();
}
inline void BlockInfo::_internal_set_ntime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ntime_ = value;
}
inline void BlockInfo::set_ntime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ntime(value);
  // @@protoc_insertion_point(field_set:BlockInfo.ntime)
}

// repeated .TxInfo tx_info_list = 6;
inline int BlockInfo::_internal_tx_info_list_size() const {
  return tx_info_list_.size();
}
inline int BlockInfo::tx_info_list_size() const {
  return _internal_tx_info_list_size();
}
inline void BlockInfo::clear_tx_info_list() {
  tx_info_list_.Clear();
}
inline ::TxInfo* BlockInfo::mutable_tx_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:BlockInfo.tx_info_list)
  return tx_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfo >*
BlockInfo::mutable_tx_info_list() {
  // @@protoc_insertion_point(field_mutable_list:BlockInfo.tx_info_list)
  return &tx_info_list_;
}
inline const ::TxInfo& BlockInfo::_internal_tx_info_list(int index) const {
  return tx_info_list_.Get(index);
}
inline const ::TxInfo& BlockInfo::tx_info_list(int index) const {
  // @@protoc_insertion_point(field_get:BlockInfo.tx_info_list)
  return _internal_tx_info_list(index);
}
inline ::TxInfo* BlockInfo::_internal_add_tx_info_list() {
  return tx_info_list_.Add();
}
inline ::TxInfo* BlockInfo::add_tx_info_list() {
  // @@protoc_insertion_point(field_add:BlockInfo.tx_info_list)
  return _internal_add_tx_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfo >&
BlockInfo::tx_info_list() const {
  // @@protoc_insertion_point(field_list:BlockInfo.tx_info_list)
  return tx_info_list_;
}

// string packet_fee = 7;
inline void BlockInfo::clear_packet_fee() {
  packet_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfo::packet_fee() const {
  // @@protoc_insertion_point(field_get:BlockInfo.packet_fee)
  return _internal_packet_fee();
}
inline void BlockInfo::set_packet_fee(const std::string& value) {
  _internal_set_packet_fee(value);
  // @@protoc_insertion_point(field_set:BlockInfo.packet_fee)
}
inline std::string* BlockInfo::mutable_packet_fee() {
  // @@protoc_insertion_point(field_mutable:BlockInfo.packet_fee)
  return _internal_mutable_packet_fee();
}
inline const std::string& BlockInfo::_internal_packet_fee() const {
  return packet_fee_.GetNoArena();
}
inline void BlockInfo::_internal_set_packet_fee(const std::string& value) {
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfo::set_packet_fee(std::string&& value) {
  
  packet_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfo.packet_fee)
}
inline void BlockInfo::set_packet_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfo.packet_fee)
}
inline void BlockInfo::set_packet_fee(const char* value, size_t size) {
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfo.packet_fee)
}
inline std::string* BlockInfo::_internal_mutable_packet_fee() {
  
  return packet_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfo::release_packet_fee() {
  // @@protoc_insertion_point(field_release:BlockInfo.packet_fee)
  
  return packet_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfo::set_allocated_packet_fee(std::string* packet_fee) {
  if (packet_fee != nullptr) {
    
  } else {
    
  }
  packet_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_fee);
  // @@protoc_insertion_point(field_set_allocated:BlockInfo.packet_fee)
}

// string packet_ip = 8;
inline void BlockInfo::clear_packet_ip() {
  packet_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfo::packet_ip() const {
  // @@protoc_insertion_point(field_get:BlockInfo.packet_ip)
  return _internal_packet_ip();
}
inline void BlockInfo::set_packet_ip(const std::string& value) {
  _internal_set_packet_ip(value);
  // @@protoc_insertion_point(field_set:BlockInfo.packet_ip)
}
inline std::string* BlockInfo::mutable_packet_ip() {
  // @@protoc_insertion_point(field_mutable:BlockInfo.packet_ip)
  return _internal_mutable_packet_ip();
}
inline const std::string& BlockInfo::_internal_packet_ip() const {
  return packet_ip_.GetNoArena();
}
inline void BlockInfo::_internal_set_packet_ip(const std::string& value) {
  
  packet_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfo::set_packet_ip(std::string&& value) {
  
  packet_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfo.packet_ip)
}
inline void BlockInfo::set_packet_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfo.packet_ip)
}
inline void BlockInfo::set_packet_ip(const char* value, size_t size) {
  
  packet_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfo.packet_ip)
}
inline std::string* BlockInfo::_internal_mutable_packet_ip() {
  
  return packet_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfo::release_packet_ip() {
  // @@protoc_insertion_point(field_release:BlockInfo.packet_ip)
  
  return packet_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfo::set_allocated_packet_ip(std::string* packet_ip) {
  if (packet_ip != nullptr) {
    
  } else {
    
  }
  packet_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_ip);
  // @@protoc_insertion_point(field_set_allocated:BlockInfo.packet_ip)
}

// -------------------------------------------------------------------

// GetBlockInfoAck

// string version = 1;
inline void GetBlockInfoAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoAck::version() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoAck.version)
  return _internal_version();
}
inline void GetBlockInfoAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoAck.version)
}
inline std::string* GetBlockInfoAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetBlockInfoAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetBlockInfoAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoAck.version)
}
inline void GetBlockInfoAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoAck.version)
}
inline void GetBlockInfoAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoAck.version)
}
inline std::string* GetBlockInfoAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoAck::release_version() {
  // @@protoc_insertion_point(field_release:GetBlockInfoAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoAck.version)
}

// sint32 code = 2;
inline void GetBlockInfoAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoAck::code() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoAck.code)
  return _internal_code();
}
inline void GetBlockInfoAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetBlockInfoAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoAck.code)
}

// string description = 3;
inline void GetBlockInfoAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoAck::description() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoAck.description)
  return _internal_description();
}
inline void GetBlockInfoAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoAck.description)
}
inline std::string* GetBlockInfoAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetBlockInfoAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetBlockInfoAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoAck.description)
}
inline void GetBlockInfoAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoAck.description)
}
inline void GetBlockInfoAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoAck.description)
}
inline std::string* GetBlockInfoAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoAck::release_description() {
  // @@protoc_insertion_point(field_release:GetBlockInfoAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoAck.description)
}

// uint64 top = 4;
inline void GetBlockInfoAck::clear_top() {
  top_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockInfoAck::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockInfoAck::top() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoAck.top)
  return _internal_top();
}
inline void GetBlockInfoAck::_internal_set_top(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  top_ = value;
}
inline void GetBlockInfoAck::set_top(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoAck.top)
}

// repeated .BlockInfo block_info_list = 5;
inline int GetBlockInfoAck::_internal_block_info_list_size() const {
  return block_info_list_.size();
}
inline int GetBlockInfoAck::block_info_list_size() const {
  return _internal_block_info_list_size();
}
inline void GetBlockInfoAck::clear_block_info_list() {
  block_info_list_.Clear();
}
inline ::BlockInfo* GetBlockInfoAck::mutable_block_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoAck.block_info_list)
  return block_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >*
GetBlockInfoAck::mutable_block_info_list() {
  // @@protoc_insertion_point(field_mutable_list:GetBlockInfoAck.block_info_list)
  return &block_info_list_;
}
inline const ::BlockInfo& GetBlockInfoAck::_internal_block_info_list(int index) const {
  return block_info_list_.Get(index);
}
inline const ::BlockInfo& GetBlockInfoAck::block_info_list(int index) const {
  // @@protoc_insertion_point(field_get:GetBlockInfoAck.block_info_list)
  return _internal_block_info_list(index);
}
inline ::BlockInfo* GetBlockInfoAck::_internal_add_block_info_list() {
  return block_info_list_.Add();
}
inline ::BlockInfo* GetBlockInfoAck::add_block_info_list() {
  // @@protoc_insertion_point(field_add:GetBlockInfoAck.block_info_list)
  return _internal_add_block_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >&
GetBlockInfoAck::block_info_list() const {
  // @@protoc_insertion_point(field_list:GetBlockInfoAck.block_info_list)
  return block_info_list_;
}

// uint64 tx_count = 6;
inline void GetBlockInfoAck::clear_tx_count() {
  tx_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockInfoAck::_internal_tx_count() const {
  return tx_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockInfoAck::tx_count() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoAck.tx_count)
  return _internal_tx_count();
}
inline void GetBlockInfoAck::_internal_set_tx_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_count_ = value;
}
inline void GetBlockInfoAck::set_tx_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_count(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoAck.tx_count)
}

// -------------------------------------------------------------------

// GetAddrInfoReq

// string version = 1;
inline void GetAddrInfoReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAddrInfoReq::version() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoReq.version)
  return _internal_version();
}
inline void GetAddrInfoReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoReq.version)
}
inline std::string* GetAddrInfoReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetAddrInfoReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetAddrInfoReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetAddrInfoReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAddrInfoReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAddrInfoReq.version)
}
inline void GetAddrInfoReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAddrInfoReq.version)
}
inline void GetAddrInfoReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAddrInfoReq.version)
}
inline std::string* GetAddrInfoReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAddrInfoReq::release_version() {
  // @@protoc_insertion_point(field_release:GetAddrInfoReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddrInfoReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetAddrInfoReq.version)
}

// string address = 2;
inline void GetAddrInfoReq::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAddrInfoReq::address() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoReq.address)
  return _internal_address();
}
inline void GetAddrInfoReq::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoReq.address)
}
inline std::string* GetAddrInfoReq::mutable_address() {
  // @@protoc_insertion_point(field_mutable:GetAddrInfoReq.address)
  return _internal_mutable_address();
}
inline const std::string& GetAddrInfoReq::_internal_address() const {
  return address_.GetNoArena();
}
inline void GetAddrInfoReq::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAddrInfoReq::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAddrInfoReq.address)
}
inline void GetAddrInfoReq::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAddrInfoReq.address)
}
inline void GetAddrInfoReq::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAddrInfoReq.address)
}
inline std::string* GetAddrInfoReq::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAddrInfoReq::release_address() {
  // @@protoc_insertion_point(field_release:GetAddrInfoReq.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddrInfoReq::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:GetAddrInfoReq.address)
}

// uint32 index = 3;
inline void GetAddrInfoReq::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddrInfoReq::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddrInfoReq::index() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoReq.index)
  return _internal_index();
}
inline void GetAddrInfoReq::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void GetAddrInfoReq::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoReq.index)
}

// uint32 count = 4;
inline void GetAddrInfoReq::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddrInfoReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetAddrInfoReq::count() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoReq.count)
  return _internal_count();
}
inline void GetAddrInfoReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void GetAddrInfoReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoReq.count)
}

// -------------------------------------------------------------------

// GetAddrInfoAck

// string version = 1;
inline void GetAddrInfoAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAddrInfoAck::version() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoAck.version)
  return _internal_version();
}
inline void GetAddrInfoAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoAck.version)
}
inline std::string* GetAddrInfoAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetAddrInfoAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetAddrInfoAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetAddrInfoAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAddrInfoAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAddrInfoAck.version)
}
inline void GetAddrInfoAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAddrInfoAck.version)
}
inline void GetAddrInfoAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAddrInfoAck.version)
}
inline std::string* GetAddrInfoAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAddrInfoAck::release_version() {
  // @@protoc_insertion_point(field_release:GetAddrInfoAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddrInfoAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetAddrInfoAck.version)
}

// sint32 code = 2;
inline void GetAddrInfoAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAddrInfoAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAddrInfoAck::code() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoAck.code)
  return _internal_code();
}
inline void GetAddrInfoAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetAddrInfoAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoAck.code)
}

// string description = 3;
inline void GetAddrInfoAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAddrInfoAck::description() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoAck.description)
  return _internal_description();
}
inline void GetAddrInfoAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoAck.description)
}
inline std::string* GetAddrInfoAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetAddrInfoAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetAddrInfoAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetAddrInfoAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetAddrInfoAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAddrInfoAck.description)
}
inline void GetAddrInfoAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAddrInfoAck.description)
}
inline void GetAddrInfoAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAddrInfoAck.description)
}
inline std::string* GetAddrInfoAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAddrInfoAck::release_description() {
  // @@protoc_insertion_point(field_release:GetAddrInfoAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddrInfoAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetAddrInfoAck.description)
}

// uint64 total = 4;
inline void GetAddrInfoAck::clear_total() {
  total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAddrInfoAck::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetAddrInfoAck::total() const {
  // @@protoc_insertion_point(field_get:GetAddrInfoAck.total)
  return _internal_total();
}
inline void GetAddrInfoAck::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_ = value;
}
inline void GetAddrInfoAck::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:GetAddrInfoAck.total)
}

// repeated .BlockInfo block_info_list = 5;
inline int GetAddrInfoAck::_internal_block_info_list_size() const {
  return block_info_list_.size();
}
inline int GetAddrInfoAck::block_info_list_size() const {
  return _internal_block_info_list_size();
}
inline void GetAddrInfoAck::clear_block_info_list() {
  block_info_list_.Clear();
}
inline ::BlockInfo* GetAddrInfoAck::mutable_block_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:GetAddrInfoAck.block_info_list)
  return block_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >*
GetAddrInfoAck::mutable_block_info_list() {
  // @@protoc_insertion_point(field_mutable_list:GetAddrInfoAck.block_info_list)
  return &block_info_list_;
}
inline const ::BlockInfo& GetAddrInfoAck::_internal_block_info_list(int index) const {
  return block_info_list_.Get(index);
}
inline const ::BlockInfo& GetAddrInfoAck::block_info_list(int index) const {
  // @@protoc_insertion_point(field_get:GetAddrInfoAck.block_info_list)
  return _internal_block_info_list(index);
}
inline ::BlockInfo* GetAddrInfoAck::_internal_add_block_info_list() {
  return block_info_list_.Add();
}
inline ::BlockInfo* GetAddrInfoAck::add_block_info_list() {
  // @@protoc_insertion_point(field_add:GetAddrInfoAck.block_info_list)
  return _internal_add_block_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfo >&
GetAddrInfoAck::block_info_list() const {
  // @@protoc_insertion_point(field_list:GetAddrInfoAck.block_info_list)
  return block_info_list_;
}

// -------------------------------------------------------------------

// SetDevPasswordReq

// string version = 1;
inline void SetDevPasswordReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDevPasswordReq::version() const {
  // @@protoc_insertion_point(field_get:SetDevPasswordReq.version)
  return _internal_version();
}
inline void SetDevPasswordReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SetDevPasswordReq.version)
}
inline std::string* SetDevPasswordReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SetDevPasswordReq.version)
  return _internal_mutable_version();
}
inline const std::string& SetDevPasswordReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void SetDevPasswordReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetDevPasswordReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetDevPasswordReq.version)
}
inline void SetDevPasswordReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetDevPasswordReq.version)
}
inline void SetDevPasswordReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetDevPasswordReq.version)
}
inline std::string* SetDevPasswordReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDevPasswordReq::release_version() {
  // @@protoc_insertion_point(field_release:SetDevPasswordReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDevPasswordReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SetDevPasswordReq.version)
}

// string old_pass = 2;
inline void SetDevPasswordReq::clear_old_pass() {
  old_pass_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDevPasswordReq::old_pass() const {
  // @@protoc_insertion_point(field_get:SetDevPasswordReq.old_pass)
  return _internal_old_pass();
}
inline void SetDevPasswordReq::set_old_pass(const std::string& value) {
  _internal_set_old_pass(value);
  // @@protoc_insertion_point(field_set:SetDevPasswordReq.old_pass)
}
inline std::string* SetDevPasswordReq::mutable_old_pass() {
  // @@protoc_insertion_point(field_mutable:SetDevPasswordReq.old_pass)
  return _internal_mutable_old_pass();
}
inline const std::string& SetDevPasswordReq::_internal_old_pass() const {
  return old_pass_.GetNoArena();
}
inline void SetDevPasswordReq::_internal_set_old_pass(const std::string& value) {
  
  old_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetDevPasswordReq::set_old_pass(std::string&& value) {
  
  old_pass_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetDevPasswordReq.old_pass)
}
inline void SetDevPasswordReq::set_old_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetDevPasswordReq.old_pass)
}
inline void SetDevPasswordReq::set_old_pass(const char* value, size_t size) {
  
  old_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetDevPasswordReq.old_pass)
}
inline std::string* SetDevPasswordReq::_internal_mutable_old_pass() {
  
  return old_pass_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDevPasswordReq::release_old_pass() {
  // @@protoc_insertion_point(field_release:SetDevPasswordReq.old_pass)
  
  return old_pass_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDevPasswordReq::set_allocated_old_pass(std::string* old_pass) {
  if (old_pass != nullptr) {
    
  } else {
    
  }
  old_pass_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_pass);
  // @@protoc_insertion_point(field_set_allocated:SetDevPasswordReq.old_pass)
}

// string new_pass = 3;
inline void SetDevPasswordReq::clear_new_pass() {
  new_pass_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDevPasswordReq::new_pass() const {
  // @@protoc_insertion_point(field_get:SetDevPasswordReq.new_pass)
  return _internal_new_pass();
}
inline void SetDevPasswordReq::set_new_pass(const std::string& value) {
  _internal_set_new_pass(value);
  // @@protoc_insertion_point(field_set:SetDevPasswordReq.new_pass)
}
inline std::string* SetDevPasswordReq::mutable_new_pass() {
  // @@protoc_insertion_point(field_mutable:SetDevPasswordReq.new_pass)
  return _internal_mutable_new_pass();
}
inline const std::string& SetDevPasswordReq::_internal_new_pass() const {
  return new_pass_.GetNoArena();
}
inline void SetDevPasswordReq::_internal_set_new_pass(const std::string& value) {
  
  new_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetDevPasswordReq::set_new_pass(std::string&& value) {
  
  new_pass_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetDevPasswordReq.new_pass)
}
inline void SetDevPasswordReq::set_new_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetDevPasswordReq.new_pass)
}
inline void SetDevPasswordReq::set_new_pass(const char* value, size_t size) {
  
  new_pass_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetDevPasswordReq.new_pass)
}
inline std::string* SetDevPasswordReq::_internal_mutable_new_pass() {
  
  return new_pass_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDevPasswordReq::release_new_pass() {
  // @@protoc_insertion_point(field_release:SetDevPasswordReq.new_pass)
  
  return new_pass_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDevPasswordReq::set_allocated_new_pass(std::string* new_pass) {
  if (new_pass != nullptr) {
    
  } else {
    
  }
  new_pass_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_pass);
  // @@protoc_insertion_point(field_set_allocated:SetDevPasswordReq.new_pass)
}

// -------------------------------------------------------------------

// SetDevPasswordAck

// string version = 1;
inline void SetDevPasswordAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDevPasswordAck::version() const {
  // @@protoc_insertion_point(field_get:SetDevPasswordAck.version)
  return _internal_version();
}
inline void SetDevPasswordAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SetDevPasswordAck.version)
}
inline std::string* SetDevPasswordAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SetDevPasswordAck.version)
  return _internal_mutable_version();
}
inline const std::string& SetDevPasswordAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void SetDevPasswordAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetDevPasswordAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetDevPasswordAck.version)
}
inline void SetDevPasswordAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetDevPasswordAck.version)
}
inline void SetDevPasswordAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetDevPasswordAck.version)
}
inline std::string* SetDevPasswordAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDevPasswordAck::release_version() {
  // @@protoc_insertion_point(field_release:SetDevPasswordAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDevPasswordAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SetDevPasswordAck.version)
}

// sint32 code = 2;
inline void SetDevPasswordAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDevPasswordAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDevPasswordAck::code() const {
  // @@protoc_insertion_point(field_get:SetDevPasswordAck.code)
  return _internal_code();
}
inline void SetDevPasswordAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SetDevPasswordAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SetDevPasswordAck.code)
}

// string description = 3;
inline void SetDevPasswordAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDevPasswordAck::description() const {
  // @@protoc_insertion_point(field_get:SetDevPasswordAck.description)
  return _internal_description();
}
inline void SetDevPasswordAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:SetDevPasswordAck.description)
}
inline std::string* SetDevPasswordAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:SetDevPasswordAck.description)
  return _internal_mutable_description();
}
inline const std::string& SetDevPasswordAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void SetDevPasswordAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetDevPasswordAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetDevPasswordAck.description)
}
inline void SetDevPasswordAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetDevPasswordAck.description)
}
inline void SetDevPasswordAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetDevPasswordAck.description)
}
inline std::string* SetDevPasswordAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDevPasswordAck::release_description() {
  // @@protoc_insertion_point(field_release:SetDevPasswordAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDevPasswordAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:SetDevPasswordAck.description)
}

// -------------------------------------------------------------------

// GetDevPasswordReq

// string version = 1;
inline void GetDevPasswordReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPasswordReq::version() const {
  // @@protoc_insertion_point(field_get:GetDevPasswordReq.version)
  return _internal_version();
}
inline void GetDevPasswordReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevPasswordReq.version)
}
inline std::string* GetDevPasswordReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevPasswordReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevPasswordReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevPasswordReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPasswordReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPasswordReq.version)
}
inline void GetDevPasswordReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPasswordReq.version)
}
inline void GetDevPasswordReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPasswordReq.version)
}
inline std::string* GetDevPasswordReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPasswordReq::release_version() {
  // @@protoc_insertion_point(field_release:GetDevPasswordReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPasswordReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevPasswordReq.version)
}

// string password = 2;
inline void GetDevPasswordReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPasswordReq::password() const {
  // @@protoc_insertion_point(field_get:GetDevPasswordReq.password)
  return _internal_password();
}
inline void GetDevPasswordReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GetDevPasswordReq.password)
}
inline std::string* GetDevPasswordReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GetDevPasswordReq.password)
  return _internal_mutable_password();
}
inline const std::string& GetDevPasswordReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void GetDevPasswordReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPasswordReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPasswordReq.password)
}
inline void GetDevPasswordReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPasswordReq.password)
}
inline void GetDevPasswordReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPasswordReq.password)
}
inline std::string* GetDevPasswordReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPasswordReq::release_password() {
  // @@protoc_insertion_point(field_release:GetDevPasswordReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPasswordReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GetDevPasswordReq.password)
}

// -------------------------------------------------------------------

// GetDevPasswordAck

// string version = 1;
inline void GetDevPasswordAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPasswordAck::version() const {
  // @@protoc_insertion_point(field_get:GetDevPasswordAck.version)
  return _internal_version();
}
inline void GetDevPasswordAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevPasswordAck.version)
}
inline std::string* GetDevPasswordAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevPasswordAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevPasswordAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevPasswordAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPasswordAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPasswordAck.version)
}
inline void GetDevPasswordAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPasswordAck.version)
}
inline void GetDevPasswordAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPasswordAck.version)
}
inline std::string* GetDevPasswordAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPasswordAck::release_version() {
  // @@protoc_insertion_point(field_release:GetDevPasswordAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPasswordAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevPasswordAck.version)
}

// sint32 code = 2;
inline void GetDevPasswordAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevPasswordAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevPasswordAck::code() const {
  // @@protoc_insertion_point(field_get:GetDevPasswordAck.code)
  return _internal_code();
}
inline void GetDevPasswordAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetDevPasswordAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetDevPasswordAck.code)
}

// string description = 3;
inline void GetDevPasswordAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPasswordAck::description() const {
  // @@protoc_insertion_point(field_get:GetDevPasswordAck.description)
  return _internal_description();
}
inline void GetDevPasswordAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetDevPasswordAck.description)
}
inline std::string* GetDevPasswordAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetDevPasswordAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetDevPasswordAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetDevPasswordAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPasswordAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPasswordAck.description)
}
inline void GetDevPasswordAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPasswordAck.description)
}
inline void GetDevPasswordAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPasswordAck.description)
}
inline std::string* GetDevPasswordAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPasswordAck::release_description() {
  // @@protoc_insertion_point(field_release:GetDevPasswordAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPasswordAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetDevPasswordAck.description)
}

// string address = 4;
inline void GetDevPasswordAck::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPasswordAck::address() const {
  // @@protoc_insertion_point(field_get:GetDevPasswordAck.address)
  return _internal_address();
}
inline void GetDevPasswordAck::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:GetDevPasswordAck.address)
}
inline std::string* GetDevPasswordAck::mutable_address() {
  // @@protoc_insertion_point(field_mutable:GetDevPasswordAck.address)
  return _internal_mutable_address();
}
inline const std::string& GetDevPasswordAck::_internal_address() const {
  return address_.GetNoArena();
}
inline void GetDevPasswordAck::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPasswordAck::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPasswordAck.address)
}
inline void GetDevPasswordAck::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPasswordAck.address)
}
inline void GetDevPasswordAck::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPasswordAck.address)
}
inline std::string* GetDevPasswordAck::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPasswordAck::release_address() {
  // @@protoc_insertion_point(field_release:GetDevPasswordAck.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPasswordAck::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:GetDevPasswordAck.address)
}

// -------------------------------------------------------------------

// GetClientInfoReq

// string version = 1;
inline void GetClientInfoReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoReq::version() const {
  // @@protoc_insertion_point(field_get:GetClientInfoReq.version)
  return _internal_version();
}
inline void GetClientInfoReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetClientInfoReq.version)
}
inline std::string* GetClientInfoReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetClientInfoReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetClientInfoReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoReq.version)
}
inline void GetClientInfoReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoReq.version)
}
inline void GetClientInfoReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoReq.version)
}
inline std::string* GetClientInfoReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoReq::release_version() {
  // @@protoc_insertion_point(field_release:GetClientInfoReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoReq.version)
}

// .DeviceType phone_type = 2;
inline void GetClientInfoReq::clear_phone_type() {
  phone_type_ = 0;
}
inline ::DeviceType GetClientInfoReq::_internal_phone_type() const {
  return static_cast< ::DeviceType >(phone_type_);
}
inline ::DeviceType GetClientInfoReq::phone_type() const {
  // @@protoc_insertion_point(field_get:GetClientInfoReq.phone_type)
  return _internal_phone_type();
}
inline void GetClientInfoReq::_internal_set_phone_type(::DeviceType value) {
  
  phone_type_ = value;
}
inline void GetClientInfoReq::set_phone_type(::DeviceType value) {
  _internal_set_phone_type(value);
  // @@protoc_insertion_point(field_set:GetClientInfoReq.phone_type)
}

// .DeviceLang phone_lang = 3;
inline void GetClientInfoReq::clear_phone_lang() {
  phone_lang_ = 0;
}
inline ::DeviceLang GetClientInfoReq::_internal_phone_lang() const {
  return static_cast< ::DeviceLang >(phone_lang_);
}
inline ::DeviceLang GetClientInfoReq::phone_lang() const {
  // @@protoc_insertion_point(field_get:GetClientInfoReq.phone_lang)
  return _internal_phone_lang();
}
inline void GetClientInfoReq::_internal_set_phone_lang(::DeviceLang value) {
  
  phone_lang_ = value;
}
inline void GetClientInfoReq::set_phone_lang(::DeviceLang value) {
  _internal_set_phone_lang(value);
  // @@protoc_insertion_point(field_set:GetClientInfoReq.phone_lang)
}

// string phone_version = 4;
inline void GetClientInfoReq::clear_phone_version() {
  phone_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoReq::phone_version() const {
  // @@protoc_insertion_point(field_get:GetClientInfoReq.phone_version)
  return _internal_phone_version();
}
inline void GetClientInfoReq::set_phone_version(const std::string& value) {
  _internal_set_phone_version(value);
  // @@protoc_insertion_point(field_set:GetClientInfoReq.phone_version)
}
inline std::string* GetClientInfoReq::mutable_phone_version() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoReq.phone_version)
  return _internal_mutable_phone_version();
}
inline const std::string& GetClientInfoReq::_internal_phone_version() const {
  return phone_version_.GetNoArena();
}
inline void GetClientInfoReq::_internal_set_phone_version(const std::string& value) {
  
  phone_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoReq::set_phone_version(std::string&& value) {
  
  phone_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoReq.phone_version)
}
inline void GetClientInfoReq::set_phone_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoReq.phone_version)
}
inline void GetClientInfoReq::set_phone_version(const char* value, size_t size) {
  
  phone_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoReq.phone_version)
}
inline std::string* GetClientInfoReq::_internal_mutable_phone_version() {
  
  return phone_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoReq::release_phone_version() {
  // @@protoc_insertion_point(field_release:GetClientInfoReq.phone_version)
  
  return phone_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoReq::set_allocated_phone_version(std::string* phone_version) {
  if (phone_version != nullptr) {
    
  } else {
    
  }
  phone_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_version);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoReq.phone_version)
}

// -------------------------------------------------------------------

// GetClientInfoAck

// string version = 1;
inline void GetClientInfoAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoAck::version() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.version)
  return _internal_version();
}
inline void GetClientInfoAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.version)
}
inline std::string* GetClientInfoAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetClientInfoAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetClientInfoAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoAck.version)
}
inline void GetClientInfoAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoAck.version)
}
inline void GetClientInfoAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoAck.version)
}
inline std::string* GetClientInfoAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoAck::release_version() {
  // @@protoc_insertion_point(field_release:GetClientInfoAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoAck.version)
}

// sint32 code = 2;
inline void GetClientInfoAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetClientInfoAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetClientInfoAck::code() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.code)
  return _internal_code();
}
inline void GetClientInfoAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetClientInfoAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.code)
}

// string description = 3;
inline void GetClientInfoAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoAck::description() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.description)
  return _internal_description();
}
inline void GetClientInfoAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.description)
}
inline std::string* GetClientInfoAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetClientInfoAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetClientInfoAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoAck.description)
}
inline void GetClientInfoAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoAck.description)
}
inline void GetClientInfoAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoAck.description)
}
inline std::string* GetClientInfoAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoAck::release_description() {
  // @@protoc_insertion_point(field_release:GetClientInfoAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoAck.description)
}

// string min_version = 4;
inline void GetClientInfoAck::clear_min_version() {
  min_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoAck::min_version() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.min_version)
  return _internal_min_version();
}
inline void GetClientInfoAck::set_min_version(const std::string& value) {
  _internal_set_min_version(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.min_version)
}
inline std::string* GetClientInfoAck::mutable_min_version() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoAck.min_version)
  return _internal_mutable_min_version();
}
inline const std::string& GetClientInfoAck::_internal_min_version() const {
  return min_version_.GetNoArena();
}
inline void GetClientInfoAck::_internal_set_min_version(const std::string& value) {
  
  min_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoAck::set_min_version(std::string&& value) {
  
  min_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoAck.min_version)
}
inline void GetClientInfoAck::set_min_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoAck.min_version)
}
inline void GetClientInfoAck::set_min_version(const char* value, size_t size) {
  
  min_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoAck.min_version)
}
inline std::string* GetClientInfoAck::_internal_mutable_min_version() {
  
  return min_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoAck::release_min_version() {
  // @@protoc_insertion_point(field_release:GetClientInfoAck.min_version)
  
  return min_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoAck::set_allocated_min_version(std::string* min_version) {
  if (min_version != nullptr) {
    
  } else {
    
  }
  min_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_version);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoAck.min_version)
}

// string is_update = 5;
inline void GetClientInfoAck::clear_is_update() {
  is_update_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoAck::is_update() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.is_update)
  return _internal_is_update();
}
inline void GetClientInfoAck::set_is_update(const std::string& value) {
  _internal_set_is_update(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.is_update)
}
inline std::string* GetClientInfoAck::mutable_is_update() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoAck.is_update)
  return _internal_mutable_is_update();
}
inline const std::string& GetClientInfoAck::_internal_is_update() const {
  return is_update_.GetNoArena();
}
inline void GetClientInfoAck::_internal_set_is_update(const std::string& value) {
  
  is_update_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoAck::set_is_update(std::string&& value) {
  
  is_update_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoAck.is_update)
}
inline void GetClientInfoAck::set_is_update(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  is_update_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoAck.is_update)
}
inline void GetClientInfoAck::set_is_update(const char* value, size_t size) {
  
  is_update_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoAck.is_update)
}
inline std::string* GetClientInfoAck::_internal_mutable_is_update() {
  
  return is_update_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoAck::release_is_update() {
  // @@protoc_insertion_point(field_release:GetClientInfoAck.is_update)
  
  return is_update_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoAck::set_allocated_is_update(std::string* is_update) {
  if (is_update != nullptr) {
    
  } else {
    
  }
  is_update_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), is_update);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoAck.is_update)
}

// string ver = 6;
inline void GetClientInfoAck::clear_ver() {
  ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoAck::ver() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.ver)
  return _internal_ver();
}
inline void GetClientInfoAck::set_ver(const std::string& value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.ver)
}
inline std::string* GetClientInfoAck::mutable_ver() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoAck.ver)
  return _internal_mutable_ver();
}
inline const std::string& GetClientInfoAck::_internal_ver() const {
  return ver_.GetNoArena();
}
inline void GetClientInfoAck::_internal_set_ver(const std::string& value) {
  
  ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoAck::set_ver(std::string&& value) {
  
  ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoAck.ver)
}
inline void GetClientInfoAck::set_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoAck.ver)
}
inline void GetClientInfoAck::set_ver(const char* value, size_t size) {
  
  ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoAck.ver)
}
inline std::string* GetClientInfoAck::_internal_mutable_ver() {
  
  return ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoAck::release_ver() {
  // @@protoc_insertion_point(field_release:GetClientInfoAck.ver)
  
  return ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoAck::set_allocated_ver(std::string* ver) {
  if (ver != nullptr) {
    
  } else {
    
  }
  ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ver);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoAck.ver)
}

// string desc = 7;
inline void GetClientInfoAck::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoAck::desc() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.desc)
  return _internal_desc();
}
inline void GetClientInfoAck::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.desc)
}
inline std::string* GetClientInfoAck::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoAck.desc)
  return _internal_mutable_desc();
}
inline const std::string& GetClientInfoAck::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void GetClientInfoAck::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoAck::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoAck.desc)
}
inline void GetClientInfoAck::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoAck.desc)
}
inline void GetClientInfoAck::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoAck.desc)
}
inline std::string* GetClientInfoAck::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoAck::release_desc() {
  // @@protoc_insertion_point(field_release:GetClientInfoAck.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoAck::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoAck.desc)
}

// string dl = 8;
inline void GetClientInfoAck::clear_dl() {
  dl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetClientInfoAck::dl() const {
  // @@protoc_insertion_point(field_get:GetClientInfoAck.dl)
  return _internal_dl();
}
inline void GetClientInfoAck::set_dl(const std::string& value) {
  _internal_set_dl(value);
  // @@protoc_insertion_point(field_set:GetClientInfoAck.dl)
}
inline std::string* GetClientInfoAck::mutable_dl() {
  // @@protoc_insertion_point(field_mutable:GetClientInfoAck.dl)
  return _internal_mutable_dl();
}
inline const std::string& GetClientInfoAck::_internal_dl() const {
  return dl_.GetNoArena();
}
inline void GetClientInfoAck::_internal_set_dl(const std::string& value) {
  
  dl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetClientInfoAck::set_dl(std::string&& value) {
  
  dl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetClientInfoAck.dl)
}
inline void GetClientInfoAck::set_dl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetClientInfoAck.dl)
}
inline void GetClientInfoAck::set_dl(const char* value, size_t size) {
  
  dl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetClientInfoAck.dl)
}
inline std::string* GetClientInfoAck::_internal_mutable_dl() {
  
  return dl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetClientInfoAck::release_dl() {
  // @@protoc_insertion_point(field_release:GetClientInfoAck.dl)
  
  return dl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetClientInfoAck::set_allocated_dl(std::string* dl) {
  if (dl != nullptr) {
    
  } else {
    
  }
  dl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dl);
  // @@protoc_insertion_point(field_set_allocated:GetClientInfoAck.dl)
}

// -------------------------------------------------------------------

// GetNodeInfoReq

// string version = 1;
inline void GetNodeInfoReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeInfoReq::version() const {
  // @@protoc_insertion_point(field_get:GetNodeInfoReq.version)
  return _internal_version();
}
inline void GetNodeInfoReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetNodeInfoReq.version)
}
inline std::string* GetNodeInfoReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetNodeInfoReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetNodeInfoReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetNodeInfoReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeInfoReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetNodeInfoReq.version)
}
inline void GetNodeInfoReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetNodeInfoReq.version)
}
inline void GetNodeInfoReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetNodeInfoReq.version)
}
inline std::string* GetNodeInfoReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeInfoReq::release_version() {
  // @@protoc_insertion_point(field_release:GetNodeInfoReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeInfoReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetNodeInfoReq.version)
}

// -------------------------------------------------------------------

// NodeInfos

// string enable = 1;
inline void NodeInfos::clear_enable() {
  enable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfos::enable() const {
  // @@protoc_insertion_point(field_get:NodeInfos.enable)
  return _internal_enable();
}
inline void NodeInfos::set_enable(const std::string& value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:NodeInfos.enable)
}
inline std::string* NodeInfos::mutable_enable() {
  // @@protoc_insertion_point(field_mutable:NodeInfos.enable)
  return _internal_mutable_enable();
}
inline const std::string& NodeInfos::_internal_enable() const {
  return enable_.GetNoArena();
}
inline void NodeInfos::_internal_set_enable(const std::string& value) {
  
  enable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfos::set_enable(std::string&& value) {
  
  enable_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfos.enable)
}
inline void NodeInfos::set_enable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfos.enable)
}
inline void NodeInfos::set_enable(const char* value, size_t size) {
  
  enable_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfos.enable)
}
inline std::string* NodeInfos::_internal_mutable_enable() {
  
  return enable_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfos::release_enable() {
  // @@protoc_insertion_point(field_release:NodeInfos.enable)
  
  return enable_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfos::set_allocated_enable(std::string* enable) {
  if (enable != nullptr) {
    
  } else {
    
  }
  enable_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enable);
  // @@protoc_insertion_point(field_set_allocated:NodeInfos.enable)
}

// string ip = 2;
inline void NodeInfos::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfos::ip() const {
  // @@protoc_insertion_point(field_get:NodeInfos.ip)
  return _internal_ip();
}
inline void NodeInfos::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:NodeInfos.ip)
}
inline std::string* NodeInfos::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:NodeInfos.ip)
  return _internal_mutable_ip();
}
inline const std::string& NodeInfos::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void NodeInfos::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfos::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfos.ip)
}
inline void NodeInfos::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfos.ip)
}
inline void NodeInfos::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfos.ip)
}
inline std::string* NodeInfos::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfos::release_ip() {
  // @@protoc_insertion_point(field_release:NodeInfos.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfos::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NodeInfos.ip)
}

// string name = 3;
inline void NodeInfos::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfos::name() const {
  // @@protoc_insertion_point(field_get:NodeInfos.name)
  return _internal_name();
}
inline void NodeInfos::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NodeInfos.name)
}
inline std::string* NodeInfos::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NodeInfos.name)
  return _internal_mutable_name();
}
inline const std::string& NodeInfos::_internal_name() const {
  return name_.GetNoArena();
}
inline void NodeInfos::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfos::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfos.name)
}
inline void NodeInfos::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfos.name)
}
inline void NodeInfos::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfos.name)
}
inline std::string* NodeInfos::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfos::release_name() {
  // @@protoc_insertion_point(field_release:NodeInfos.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfos::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NodeInfos.name)
}

// string port = 4;
inline void NodeInfos::clear_port() {
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfos::port() const {
  // @@protoc_insertion_point(field_get:NodeInfos.port)
  return _internal_port();
}
inline void NodeInfos::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:NodeInfos.port)
}
inline std::string* NodeInfos::mutable_port() {
  // @@protoc_insertion_point(field_mutable:NodeInfos.port)
  return _internal_mutable_port();
}
inline const std::string& NodeInfos::_internal_port() const {
  return port_.GetNoArena();
}
inline void NodeInfos::_internal_set_port(const std::string& value) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfos::set_port(std::string&& value) {
  
  port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfos.port)
}
inline void NodeInfos::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfos.port)
}
inline void NodeInfos::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfos.port)
}
inline std::string* NodeInfos::_internal_mutable_port() {
  
  return port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfos::release_port() {
  // @@protoc_insertion_point(field_release:NodeInfos.port)
  
  return port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfos::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:NodeInfos.port)
}

// string price = 5;
inline void NodeInfos::clear_price() {
  price_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfos::price() const {
  // @@protoc_insertion_point(field_get:NodeInfos.price)
  return _internal_price();
}
inline void NodeInfos::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:NodeInfos.price)
}
inline std::string* NodeInfos::mutable_price() {
  // @@protoc_insertion_point(field_mutable:NodeInfos.price)
  return _internal_mutable_price();
}
inline const std::string& NodeInfos::_internal_price() const {
  return price_.GetNoArena();
}
inline void NodeInfos::_internal_set_price(const std::string& value) {
  
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfos::set_price(std::string&& value) {
  
  price_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeInfos.price)
}
inline void NodeInfos::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeInfos.price)
}
inline void NodeInfos::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeInfos.price)
}
inline std::string* NodeInfos::_internal_mutable_price() {
  
  return price_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfos::release_price() {
  // @@protoc_insertion_point(field_release:NodeInfos.price)
  
  return price_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfos::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:NodeInfos.price)
}

// -------------------------------------------------------------------

// NodeList

// repeated .NodeInfos node_info = 1;
inline int NodeList::_internal_node_info_size() const {
  return node_info_.size();
}
inline int NodeList::node_info_size() const {
  return _internal_node_info_size();
}
inline void NodeList::clear_node_info() {
  node_info_.Clear();
}
inline ::NodeInfos* NodeList::mutable_node_info(int index) {
  // @@protoc_insertion_point(field_mutable:NodeList.node_info)
  return node_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfos >*
NodeList::mutable_node_info() {
  // @@protoc_insertion_point(field_mutable_list:NodeList.node_info)
  return &node_info_;
}
inline const ::NodeInfos& NodeList::_internal_node_info(int index) const {
  return node_info_.Get(index);
}
inline const ::NodeInfos& NodeList::node_info(int index) const {
  // @@protoc_insertion_point(field_get:NodeList.node_info)
  return _internal_node_info(index);
}
inline ::NodeInfos* NodeList::_internal_add_node_info() {
  return node_info_.Add();
}
inline ::NodeInfos* NodeList::add_node_info() {
  // @@protoc_insertion_point(field_add:NodeList.node_info)
  return _internal_add_node_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeInfos >&
NodeList::node_info() const {
  // @@protoc_insertion_point(field_list:NodeList.node_info)
  return node_info_;
}

// string local = 2;
inline void NodeList::clear_local() {
  local_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeList::local() const {
  // @@protoc_insertion_point(field_get:NodeList.local)
  return _internal_local();
}
inline void NodeList::set_local(const std::string& value) {
  _internal_set_local(value);
  // @@protoc_insertion_point(field_set:NodeList.local)
}
inline std::string* NodeList::mutable_local() {
  // @@protoc_insertion_point(field_mutable:NodeList.local)
  return _internal_mutable_local();
}
inline const std::string& NodeList::_internal_local() const {
  return local_.GetNoArena();
}
inline void NodeList::_internal_set_local(const std::string& value) {
  
  local_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeList::set_local(std::string&& value) {
  
  local_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeList.local)
}
inline void NodeList::set_local(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeList.local)
}
inline void NodeList::set_local(const char* value, size_t size) {
  
  local_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeList.local)
}
inline std::string* NodeList::_internal_mutable_local() {
  
  return local_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeList::release_local() {
  // @@protoc_insertion_point(field_release:NodeList.local)
  
  return local_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeList::set_allocated_local(std::string* local) {
  if (local != nullptr) {
    
  } else {
    
  }
  local_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local);
  // @@protoc_insertion_point(field_set_allocated:NodeList.local)
}

// -------------------------------------------------------------------

// GetNodeInfoAck

// string version = 1;
inline void GetNodeInfoAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeInfoAck::version() const {
  // @@protoc_insertion_point(field_get:GetNodeInfoAck.version)
  return _internal_version();
}
inline void GetNodeInfoAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetNodeInfoAck.version)
}
inline std::string* GetNodeInfoAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetNodeInfoAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetNodeInfoAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetNodeInfoAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeInfoAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetNodeInfoAck.version)
}
inline void GetNodeInfoAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetNodeInfoAck.version)
}
inline void GetNodeInfoAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetNodeInfoAck.version)
}
inline std::string* GetNodeInfoAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeInfoAck::release_version() {
  // @@protoc_insertion_point(field_release:GetNodeInfoAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeInfoAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetNodeInfoAck.version)
}

// sint32 code = 2;
inline void GetNodeInfoAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetNodeInfoAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetNodeInfoAck::code() const {
  // @@protoc_insertion_point(field_get:GetNodeInfoAck.code)
  return _internal_code();
}
inline void GetNodeInfoAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetNodeInfoAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetNodeInfoAck.code)
}

// string description = 3;
inline void GetNodeInfoAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeInfoAck::description() const {
  // @@protoc_insertion_point(field_get:GetNodeInfoAck.description)
  return _internal_description();
}
inline void GetNodeInfoAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetNodeInfoAck.description)
}
inline std::string* GetNodeInfoAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetNodeInfoAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetNodeInfoAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetNodeInfoAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeInfoAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetNodeInfoAck.description)
}
inline void GetNodeInfoAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetNodeInfoAck.description)
}
inline void GetNodeInfoAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetNodeInfoAck.description)
}
inline std::string* GetNodeInfoAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeInfoAck::release_description() {
  // @@protoc_insertion_point(field_release:GetNodeInfoAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeInfoAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetNodeInfoAck.description)
}

// repeated .NodeList node_list = 4;
inline int GetNodeInfoAck::_internal_node_list_size() const {
  return node_list_.size();
}
inline int GetNodeInfoAck::node_list_size() const {
  return _internal_node_list_size();
}
inline void GetNodeInfoAck::clear_node_list() {
  node_list_.Clear();
}
inline ::NodeList* GetNodeInfoAck::mutable_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:GetNodeInfoAck.node_list)
  return node_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeList >*
GetNodeInfoAck::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable_list:GetNodeInfoAck.node_list)
  return &node_list_;
}
inline const ::NodeList& GetNodeInfoAck::_internal_node_list(int index) const {
  return node_list_.Get(index);
}
inline const ::NodeList& GetNodeInfoAck::node_list(int index) const {
  // @@protoc_insertion_point(field_get:GetNodeInfoAck.node_list)
  return _internal_node_list(index);
}
inline ::NodeList* GetNodeInfoAck::_internal_add_node_list() {
  return node_list_.Add();
}
inline ::NodeList* GetNodeInfoAck::add_node_list() {
  // @@protoc_insertion_point(field_add:GetNodeInfoAck.node_list)
  return _internal_add_node_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeList >&
GetNodeInfoAck::node_list() const {
  // @@protoc_insertion_point(field_list:GetNodeInfoAck.node_list)
  return node_list_;
}

// -------------------------------------------------------------------

// GetServiceInfoReq

// string version = 1;
inline void GetServiceInfoReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServiceInfoReq::version() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoReq.version)
  return _internal_version();
}
inline void GetServiceInfoReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoReq.version)
}
inline std::string* GetServiceInfoReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetServiceInfoReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetServiceInfoReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServiceInfoReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceInfoReq.version)
}
inline void GetServiceInfoReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceInfoReq.version)
}
inline void GetServiceInfoReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceInfoReq.version)
}
inline std::string* GetServiceInfoReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServiceInfoReq::release_version() {
  // @@protoc_insertion_point(field_release:GetServiceInfoReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetServiceInfoReq.version)
}

// string password = 2;
inline void GetServiceInfoReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServiceInfoReq::password() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoReq.password)
  return _internal_password();
}
inline void GetServiceInfoReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoReq.password)
}
inline std::string* GetServiceInfoReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoReq.password)
  return _internal_mutable_password();
}
inline const std::string& GetServiceInfoReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void GetServiceInfoReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServiceInfoReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceInfoReq.password)
}
inline void GetServiceInfoReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceInfoReq.password)
}
inline void GetServiceInfoReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceInfoReq.password)
}
inline std::string* GetServiceInfoReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServiceInfoReq::release_password() {
  // @@protoc_insertion_point(field_release:GetServiceInfoReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GetServiceInfoReq.password)
}

// string public_net_ip = 3;
inline void GetServiceInfoReq::clear_public_net_ip() {
  public_net_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServiceInfoReq::public_net_ip() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoReq.public_net_ip)
  return _internal_public_net_ip();
}
inline void GetServiceInfoReq::set_public_net_ip(const std::string& value) {
  _internal_set_public_net_ip(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoReq.public_net_ip)
}
inline std::string* GetServiceInfoReq::mutable_public_net_ip() {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoReq.public_net_ip)
  return _internal_mutable_public_net_ip();
}
inline const std::string& GetServiceInfoReq::_internal_public_net_ip() const {
  return public_net_ip_.GetNoArena();
}
inline void GetServiceInfoReq::_internal_set_public_net_ip(const std::string& value) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServiceInfoReq::set_public_net_ip(std::string&& value) {
  
  public_net_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceInfoReq.public_net_ip)
}
inline void GetServiceInfoReq::set_public_net_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceInfoReq.public_net_ip)
}
inline void GetServiceInfoReq::set_public_net_ip(const char* value, size_t size) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceInfoReq.public_net_ip)
}
inline std::string* GetServiceInfoReq::_internal_mutable_public_net_ip() {
  
  return public_net_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServiceInfoReq::release_public_net_ip() {
  // @@protoc_insertion_point(field_release:GetServiceInfoReq.public_net_ip)
  
  return public_net_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoReq::set_allocated_public_net_ip(std::string* public_net_ip) {
  if (public_net_ip != nullptr) {
    
  } else {
    
  }
  public_net_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_net_ip);
  // @@protoc_insertion_point(field_set_allocated:GetServiceInfoReq.public_net_ip)
}

// bool is_show = 4;
inline void GetServiceInfoReq::clear_is_show() {
  is_show_ = false;
}
inline bool GetServiceInfoReq::_internal_is_show() const {
  return is_show_;
}
inline bool GetServiceInfoReq::is_show() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoReq.is_show)
  return _internal_is_show();
}
inline void GetServiceInfoReq::_internal_set_is_show(bool value) {
  
  is_show_ = value;
}
inline void GetServiceInfoReq::set_is_show(bool value) {
  _internal_set_is_show(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoReq.is_show)
}

// uint32 sequence_number = 5;
inline void GetServiceInfoReq::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServiceInfoReq::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServiceInfoReq::sequence_number() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoReq.sequence_number)
  return _internal_sequence_number();
}
inline void GetServiceInfoReq::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void GetServiceInfoReq::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoReq.sequence_number)
}

// -------------------------------------------------------------------

// ServiceFee

// string max_fee = 1;
inline void ServiceFee::clear_max_fee() {
  max_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceFee::max_fee() const {
  // @@protoc_insertion_point(field_get:ServiceFee.max_fee)
  return _internal_max_fee();
}
inline void ServiceFee::set_max_fee(const std::string& value) {
  _internal_set_max_fee(value);
  // @@protoc_insertion_point(field_set:ServiceFee.max_fee)
}
inline std::string* ServiceFee::mutable_max_fee() {
  // @@protoc_insertion_point(field_mutable:ServiceFee.max_fee)
  return _internal_mutable_max_fee();
}
inline const std::string& ServiceFee::_internal_max_fee() const {
  return max_fee_.GetNoArena();
}
inline void ServiceFee::_internal_set_max_fee(const std::string& value) {
  
  max_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceFee::set_max_fee(std::string&& value) {
  
  max_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceFee.max_fee)
}
inline void ServiceFee::set_max_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceFee.max_fee)
}
inline void ServiceFee::set_max_fee(const char* value, size_t size) {
  
  max_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceFee.max_fee)
}
inline std::string* ServiceFee::_internal_mutable_max_fee() {
  
  return max_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceFee::release_max_fee() {
  // @@protoc_insertion_point(field_release:ServiceFee.max_fee)
  
  return max_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceFee::set_allocated_max_fee(std::string* max_fee) {
  if (max_fee != nullptr) {
    
  } else {
    
  }
  max_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_fee);
  // @@protoc_insertion_point(field_set_allocated:ServiceFee.max_fee)
}

// string min_fee = 2;
inline void ServiceFee::clear_min_fee() {
  min_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceFee::min_fee() const {
  // @@protoc_insertion_point(field_get:ServiceFee.min_fee)
  return _internal_min_fee();
}
inline void ServiceFee::set_min_fee(const std::string& value) {
  _internal_set_min_fee(value);
  // @@protoc_insertion_point(field_set:ServiceFee.min_fee)
}
inline std::string* ServiceFee::mutable_min_fee() {
  // @@protoc_insertion_point(field_mutable:ServiceFee.min_fee)
  return _internal_mutable_min_fee();
}
inline const std::string& ServiceFee::_internal_min_fee() const {
  return min_fee_.GetNoArena();
}
inline void ServiceFee::_internal_set_min_fee(const std::string& value) {
  
  min_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceFee::set_min_fee(std::string&& value) {
  
  min_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceFee.min_fee)
}
inline void ServiceFee::set_min_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceFee.min_fee)
}
inline void ServiceFee::set_min_fee(const char* value, size_t size) {
  
  min_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceFee.min_fee)
}
inline std::string* ServiceFee::_internal_mutable_min_fee() {
  
  return min_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceFee::release_min_fee() {
  // @@protoc_insertion_point(field_release:ServiceFee.min_fee)
  
  return min_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceFee::set_allocated_min_fee(std::string* min_fee) {
  if (min_fee != nullptr) {
    
  } else {
    
  }
  min_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min_fee);
  // @@protoc_insertion_point(field_set_allocated:ServiceFee.min_fee)
}

// string service_fee = 3;
inline void ServiceFee::clear_service_fee() {
  service_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceFee::service_fee() const {
  // @@protoc_insertion_point(field_get:ServiceFee.service_fee)
  return _internal_service_fee();
}
inline void ServiceFee::set_service_fee(const std::string& value) {
  _internal_set_service_fee(value);
  // @@protoc_insertion_point(field_set:ServiceFee.service_fee)
}
inline std::string* ServiceFee::mutable_service_fee() {
  // @@protoc_insertion_point(field_mutable:ServiceFee.service_fee)
  return _internal_mutable_service_fee();
}
inline const std::string& ServiceFee::_internal_service_fee() const {
  return service_fee_.GetNoArena();
}
inline void ServiceFee::_internal_set_service_fee(const std::string& value) {
  
  service_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceFee::set_service_fee(std::string&& value) {
  
  service_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceFee.service_fee)
}
inline void ServiceFee::set_service_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceFee.service_fee)
}
inline void ServiceFee::set_service_fee(const char* value, size_t size) {
  
  service_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceFee.service_fee)
}
inline std::string* ServiceFee::_internal_mutable_service_fee() {
  
  return service_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceFee::release_service_fee() {
  // @@protoc_insertion_point(field_release:ServiceFee.service_fee)
  
  return service_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceFee::set_allocated_service_fee(std::string* service_fee) {
  if (service_fee != nullptr) {
    
  } else {
    
  }
  service_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_fee);
  // @@protoc_insertion_point(field_set_allocated:ServiceFee.service_fee)
}

// string avg_fee = 4;
inline void ServiceFee::clear_avg_fee() {
  avg_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServiceFee::avg_fee() const {
  // @@protoc_insertion_point(field_get:ServiceFee.avg_fee)
  return _internal_avg_fee();
}
inline void ServiceFee::set_avg_fee(const std::string& value) {
  _internal_set_avg_fee(value);
  // @@protoc_insertion_point(field_set:ServiceFee.avg_fee)
}
inline std::string* ServiceFee::mutable_avg_fee() {
  // @@protoc_insertion_point(field_mutable:ServiceFee.avg_fee)
  return _internal_mutable_avg_fee();
}
inline const std::string& ServiceFee::_internal_avg_fee() const {
  return avg_fee_.GetNoArena();
}
inline void ServiceFee::_internal_set_avg_fee(const std::string& value) {
  
  avg_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ServiceFee::set_avg_fee(std::string&& value) {
  
  avg_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServiceFee.avg_fee)
}
inline void ServiceFee::set_avg_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avg_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServiceFee.avg_fee)
}
inline void ServiceFee::set_avg_fee(const char* value, size_t size) {
  
  avg_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServiceFee.avg_fee)
}
inline std::string* ServiceFee::_internal_mutable_avg_fee() {
  
  return avg_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServiceFee::release_avg_fee() {
  // @@protoc_insertion_point(field_release:ServiceFee.avg_fee)
  
  return avg_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceFee::set_allocated_avg_fee(std::string* avg_fee) {
  if (avg_fee != nullptr) {
    
  } else {
    
  }
  avg_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avg_fee);
  // @@protoc_insertion_point(field_set_allocated:ServiceFee.avg_fee)
}

// -------------------------------------------------------------------

// GetServiceInfoAck

// string version = 1;
inline void GetServiceInfoAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServiceInfoAck::version() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.version)
  return _internal_version();
}
inline void GetServiceInfoAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.version)
}
inline std::string* GetServiceInfoAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetServiceInfoAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetServiceInfoAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServiceInfoAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceInfoAck.version)
}
inline void GetServiceInfoAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceInfoAck.version)
}
inline void GetServiceInfoAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceInfoAck.version)
}
inline std::string* GetServiceInfoAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServiceInfoAck::release_version() {
  // @@protoc_insertion_point(field_release:GetServiceInfoAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetServiceInfoAck.version)
}

// sint32 code = 2;
inline void GetServiceInfoAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceInfoAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceInfoAck::code() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.code)
  return _internal_code();
}
inline void GetServiceInfoAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetServiceInfoAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.code)
}

// string description = 3;
inline void GetServiceInfoAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServiceInfoAck::description() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.description)
  return _internal_description();
}
inline void GetServiceInfoAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.description)
}
inline std::string* GetServiceInfoAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetServiceInfoAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetServiceInfoAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServiceInfoAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceInfoAck.description)
}
inline void GetServiceInfoAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceInfoAck.description)
}
inline void GetServiceInfoAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceInfoAck.description)
}
inline std::string* GetServiceInfoAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServiceInfoAck::release_description() {
  // @@protoc_insertion_point(field_release:GetServiceInfoAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetServiceInfoAck.description)
}

// string mac_hash = 4;
inline void GetServiceInfoAck::clear_mac_hash() {
  mac_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServiceInfoAck::mac_hash() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.mac_hash)
  return _internal_mac_hash();
}
inline void GetServiceInfoAck::set_mac_hash(const std::string& value) {
  _internal_set_mac_hash(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.mac_hash)
}
inline std::string* GetServiceInfoAck::mutable_mac_hash() {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoAck.mac_hash)
  return _internal_mutable_mac_hash();
}
inline const std::string& GetServiceInfoAck::_internal_mac_hash() const {
  return mac_hash_.GetNoArena();
}
inline void GetServiceInfoAck::_internal_set_mac_hash(const std::string& value) {
  
  mac_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServiceInfoAck::set_mac_hash(std::string&& value) {
  
  mac_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceInfoAck.mac_hash)
}
inline void GetServiceInfoAck::set_mac_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceInfoAck.mac_hash)
}
inline void GetServiceInfoAck::set_mac_hash(const char* value, size_t size) {
  
  mac_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceInfoAck.mac_hash)
}
inline std::string* GetServiceInfoAck::_internal_mutable_mac_hash() {
  
  return mac_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServiceInfoAck::release_mac_hash() {
  // @@protoc_insertion_point(field_release:GetServiceInfoAck.mac_hash)
  
  return mac_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoAck::set_allocated_mac_hash(std::string* mac_hash) {
  if (mac_hash != nullptr) {
    
  } else {
    
  }
  mac_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_hash);
  // @@protoc_insertion_point(field_set_allocated:GetServiceInfoAck.mac_hash)
}

// string device_version = 5;
inline void GetServiceInfoAck::clear_device_version() {
  device_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetServiceInfoAck::device_version() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.device_version)
  return _internal_device_version();
}
inline void GetServiceInfoAck::set_device_version(const std::string& value) {
  _internal_set_device_version(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.device_version)
}
inline std::string* GetServiceInfoAck::mutable_device_version() {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoAck.device_version)
  return _internal_mutable_device_version();
}
inline const std::string& GetServiceInfoAck::_internal_device_version() const {
  return device_version_.GetNoArena();
}
inline void GetServiceInfoAck::_internal_set_device_version(const std::string& value) {
  
  device_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetServiceInfoAck::set_device_version(std::string&& value) {
  
  device_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetServiceInfoAck.device_version)
}
inline void GetServiceInfoAck::set_device_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetServiceInfoAck.device_version)
}
inline void GetServiceInfoAck::set_device_version(const char* value, size_t size) {
  
  device_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetServiceInfoAck.device_version)
}
inline std::string* GetServiceInfoAck::_internal_mutable_device_version() {
  
  return device_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetServiceInfoAck::release_device_version() {
  // @@protoc_insertion_point(field_release:GetServiceInfoAck.device_version)
  
  return device_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoAck::set_allocated_device_version(std::string* device_version) {
  if (device_version != nullptr) {
    
  } else {
    
  }
  device_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_version);
  // @@protoc_insertion_point(field_set_allocated:GetServiceInfoAck.device_version)
}

// repeated .ServiceFee service_fee_info = 6;
inline int GetServiceInfoAck::_internal_service_fee_info_size() const {
  return service_fee_info_.size();
}
inline int GetServiceInfoAck::service_fee_info_size() const {
  return _internal_service_fee_info_size();
}
inline void GetServiceInfoAck::clear_service_fee_info() {
  service_fee_info_.Clear();
}
inline ::ServiceFee* GetServiceInfoAck::mutable_service_fee_info(int index) {
  // @@protoc_insertion_point(field_mutable:GetServiceInfoAck.service_fee_info)
  return service_fee_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >*
GetServiceInfoAck::mutable_service_fee_info() {
  // @@protoc_insertion_point(field_mutable_list:GetServiceInfoAck.service_fee_info)
  return &service_fee_info_;
}
inline const ::ServiceFee& GetServiceInfoAck::_internal_service_fee_info(int index) const {
  return service_fee_info_.Get(index);
}
inline const ::ServiceFee& GetServiceInfoAck::service_fee_info(int index) const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.service_fee_info)
  return _internal_service_fee_info(index);
}
inline ::ServiceFee* GetServiceInfoAck::_internal_add_service_fee_info() {
  return service_fee_info_.Add();
}
inline ::ServiceFee* GetServiceInfoAck::add_service_fee_info() {
  // @@protoc_insertion_point(field_add:GetServiceInfoAck.service_fee_info)
  return _internal_add_service_fee_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >&
GetServiceInfoAck::service_fee_info() const {
  // @@protoc_insertion_point(field_list:GetServiceInfoAck.service_fee_info)
  return service_fee_info_;
}

// .GetServiceInfoAck.SyncStatus is_sync = 7;
inline void GetServiceInfoAck::clear_is_sync() {
  is_sync_ = 0;
}
inline ::GetServiceInfoAck_SyncStatus GetServiceInfoAck::_internal_is_sync() const {
  return static_cast< ::GetServiceInfoAck_SyncStatus >(is_sync_);
}
inline ::GetServiceInfoAck_SyncStatus GetServiceInfoAck::is_sync() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.is_sync)
  return _internal_is_sync();
}
inline void GetServiceInfoAck::_internal_set_is_sync(::GetServiceInfoAck_SyncStatus value) {
  
  is_sync_ = value;
}
inline void GetServiceInfoAck::set_is_sync(::GetServiceInfoAck_SyncStatus value) {
  _internal_set_is_sync(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.is_sync)
}

// sint32 height = 8;
inline void GetServiceInfoAck::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceInfoAck::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetServiceInfoAck::height() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.height)
  return _internal_height();
}
inline void GetServiceInfoAck::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void GetServiceInfoAck::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.height)
}

// uint32 sequence = 9;
inline void GetServiceInfoAck::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServiceInfoAck::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetServiceInfoAck::sequence() const {
  // @@protoc_insertion_point(field_get:GetServiceInfoAck.sequence)
  return _internal_sequence();
}
inline void GetServiceInfoAck::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void GetServiceInfoAck::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:GetServiceInfoAck.sequence)
}

// -------------------------------------------------------------------

// SetServiceFeeReq

// string version = 1;
inline void SetServiceFeeReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetServiceFeeReq::version() const {
  // @@protoc_insertion_point(field_get:SetServiceFeeReq.version)
  return _internal_version();
}
inline void SetServiceFeeReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SetServiceFeeReq.version)
}
inline std::string* SetServiceFeeReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SetServiceFeeReq.version)
  return _internal_mutable_version();
}
inline const std::string& SetServiceFeeReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void SetServiceFeeReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetServiceFeeReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetServiceFeeReq.version)
}
inline void SetServiceFeeReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetServiceFeeReq.version)
}
inline void SetServiceFeeReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetServiceFeeReq.version)
}
inline std::string* SetServiceFeeReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetServiceFeeReq::release_version() {
  // @@protoc_insertion_point(field_release:SetServiceFeeReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetServiceFeeReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SetServiceFeeReq.version)
}

// string password = 2;
inline void SetServiceFeeReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetServiceFeeReq::password() const {
  // @@protoc_insertion_point(field_get:SetServiceFeeReq.password)
  return _internal_password();
}
inline void SetServiceFeeReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:SetServiceFeeReq.password)
}
inline std::string* SetServiceFeeReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:SetServiceFeeReq.password)
  return _internal_mutable_password();
}
inline const std::string& SetServiceFeeReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void SetServiceFeeReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetServiceFeeReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetServiceFeeReq.password)
}
inline void SetServiceFeeReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetServiceFeeReq.password)
}
inline void SetServiceFeeReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetServiceFeeReq.password)
}
inline std::string* SetServiceFeeReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetServiceFeeReq::release_password() {
  // @@protoc_insertion_point(field_release:SetServiceFeeReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetServiceFeeReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:SetServiceFeeReq.password)
}

// string service_fee = 3;
inline void SetServiceFeeReq::clear_service_fee() {
  service_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetServiceFeeReq::service_fee() const {
  // @@protoc_insertion_point(field_get:SetServiceFeeReq.service_fee)
  return _internal_service_fee();
}
inline void SetServiceFeeReq::set_service_fee(const std::string& value) {
  _internal_set_service_fee(value);
  // @@protoc_insertion_point(field_set:SetServiceFeeReq.service_fee)
}
inline std::string* SetServiceFeeReq::mutable_service_fee() {
  // @@protoc_insertion_point(field_mutable:SetServiceFeeReq.service_fee)
  return _internal_mutable_service_fee();
}
inline const std::string& SetServiceFeeReq::_internal_service_fee() const {
  return service_fee_.GetNoArena();
}
inline void SetServiceFeeReq::_internal_set_service_fee(const std::string& value) {
  
  service_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetServiceFeeReq::set_service_fee(std::string&& value) {
  
  service_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetServiceFeeReq.service_fee)
}
inline void SetServiceFeeReq::set_service_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetServiceFeeReq.service_fee)
}
inline void SetServiceFeeReq::set_service_fee(const char* value, size_t size) {
  
  service_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetServiceFeeReq.service_fee)
}
inline std::string* SetServiceFeeReq::_internal_mutable_service_fee() {
  
  return service_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetServiceFeeReq::release_service_fee() {
  // @@protoc_insertion_point(field_release:SetServiceFeeReq.service_fee)
  
  return service_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetServiceFeeReq::set_allocated_service_fee(std::string* service_fee) {
  if (service_fee != nullptr) {
    
  } else {
    
  }
  service_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_fee);
  // @@protoc_insertion_point(field_set_allocated:SetServiceFeeReq.service_fee)
}

// -------------------------------------------------------------------

// SetServiceFeeAck

// string version = 1;
inline void SetServiceFeeAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetServiceFeeAck::version() const {
  // @@protoc_insertion_point(field_get:SetServiceFeeAck.version)
  return _internal_version();
}
inline void SetServiceFeeAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SetServiceFeeAck.version)
}
inline std::string* SetServiceFeeAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SetServiceFeeAck.version)
  return _internal_mutable_version();
}
inline const std::string& SetServiceFeeAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void SetServiceFeeAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetServiceFeeAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetServiceFeeAck.version)
}
inline void SetServiceFeeAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetServiceFeeAck.version)
}
inline void SetServiceFeeAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetServiceFeeAck.version)
}
inline std::string* SetServiceFeeAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetServiceFeeAck::release_version() {
  // @@protoc_insertion_point(field_release:SetServiceFeeAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetServiceFeeAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SetServiceFeeAck.version)
}

// sint32 code = 2;
inline void SetServiceFeeAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetServiceFeeAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetServiceFeeAck::code() const {
  // @@protoc_insertion_point(field_get:SetServiceFeeAck.code)
  return _internal_code();
}
inline void SetServiceFeeAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SetServiceFeeAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SetServiceFeeAck.code)
}

// string description = 3;
inline void SetServiceFeeAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetServiceFeeAck::description() const {
  // @@protoc_insertion_point(field_get:SetServiceFeeAck.description)
  return _internal_description();
}
inline void SetServiceFeeAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:SetServiceFeeAck.description)
}
inline std::string* SetServiceFeeAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:SetServiceFeeAck.description)
  return _internal_mutable_description();
}
inline const std::string& SetServiceFeeAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void SetServiceFeeAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetServiceFeeAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetServiceFeeAck.description)
}
inline void SetServiceFeeAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetServiceFeeAck.description)
}
inline void SetServiceFeeAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetServiceFeeAck.description)
}
inline std::string* SetServiceFeeAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetServiceFeeAck::release_description() {
  // @@protoc_insertion_point(field_release:SetServiceFeeAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetServiceFeeAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:SetServiceFeeAck.description)
}

// -------------------------------------------------------------------

// GetPacketFeeReq

// string version = 1;
inline void GetPacketFeeReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPacketFeeReq::version() const {
  // @@protoc_insertion_point(field_get:GetPacketFeeReq.version)
  return _internal_version();
}
inline void GetPacketFeeReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetPacketFeeReq.version)
}
inline std::string* GetPacketFeeReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetPacketFeeReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetPacketFeeReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetPacketFeeReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPacketFeeReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPacketFeeReq.version)
}
inline void GetPacketFeeReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPacketFeeReq.version)
}
inline void GetPacketFeeReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPacketFeeReq.version)
}
inline std::string* GetPacketFeeReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPacketFeeReq::release_version() {
  // @@protoc_insertion_point(field_release:GetPacketFeeReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPacketFeeReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetPacketFeeReq.version)
}

// string password = 2;
inline void GetPacketFeeReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPacketFeeReq::password() const {
  // @@protoc_insertion_point(field_get:GetPacketFeeReq.password)
  return _internal_password();
}
inline void GetPacketFeeReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GetPacketFeeReq.password)
}
inline std::string* GetPacketFeeReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GetPacketFeeReq.password)
  return _internal_mutable_password();
}
inline const std::string& GetPacketFeeReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void GetPacketFeeReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPacketFeeReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPacketFeeReq.password)
}
inline void GetPacketFeeReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPacketFeeReq.password)
}
inline void GetPacketFeeReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPacketFeeReq.password)
}
inline std::string* GetPacketFeeReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPacketFeeReq::release_password() {
  // @@protoc_insertion_point(field_release:GetPacketFeeReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPacketFeeReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GetPacketFeeReq.password)
}

// string public_net_ip = 3;
inline void GetPacketFeeReq::clear_public_net_ip() {
  public_net_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPacketFeeReq::public_net_ip() const {
  // @@protoc_insertion_point(field_get:GetPacketFeeReq.public_net_ip)
  return _internal_public_net_ip();
}
inline void GetPacketFeeReq::set_public_net_ip(const std::string& value) {
  _internal_set_public_net_ip(value);
  // @@protoc_insertion_point(field_set:GetPacketFeeReq.public_net_ip)
}
inline std::string* GetPacketFeeReq::mutable_public_net_ip() {
  // @@protoc_insertion_point(field_mutable:GetPacketFeeReq.public_net_ip)
  return _internal_mutable_public_net_ip();
}
inline const std::string& GetPacketFeeReq::_internal_public_net_ip() const {
  return public_net_ip_.GetNoArena();
}
inline void GetPacketFeeReq::_internal_set_public_net_ip(const std::string& value) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPacketFeeReq::set_public_net_ip(std::string&& value) {
  
  public_net_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPacketFeeReq.public_net_ip)
}
inline void GetPacketFeeReq::set_public_net_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPacketFeeReq.public_net_ip)
}
inline void GetPacketFeeReq::set_public_net_ip(const char* value, size_t size) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPacketFeeReq.public_net_ip)
}
inline std::string* GetPacketFeeReq::_internal_mutable_public_net_ip() {
  
  return public_net_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPacketFeeReq::release_public_net_ip() {
  // @@protoc_insertion_point(field_release:GetPacketFeeReq.public_net_ip)
  
  return public_net_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPacketFeeReq::set_allocated_public_net_ip(std::string* public_net_ip) {
  if (public_net_ip != nullptr) {
    
  } else {
    
  }
  public_net_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_net_ip);
  // @@protoc_insertion_point(field_set_allocated:GetPacketFeeReq.public_net_ip)
}

// -------------------------------------------------------------------

// GetPacketFeeAck

// string version = 1;
inline void GetPacketFeeAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPacketFeeAck::version() const {
  // @@protoc_insertion_point(field_get:GetPacketFeeAck.version)
  return _internal_version();
}
inline void GetPacketFeeAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetPacketFeeAck.version)
}
inline std::string* GetPacketFeeAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetPacketFeeAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetPacketFeeAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetPacketFeeAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPacketFeeAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPacketFeeAck.version)
}
inline void GetPacketFeeAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPacketFeeAck.version)
}
inline void GetPacketFeeAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPacketFeeAck.version)
}
inline std::string* GetPacketFeeAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPacketFeeAck::release_version() {
  // @@protoc_insertion_point(field_release:GetPacketFeeAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPacketFeeAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetPacketFeeAck.version)
}

// sint32 code = 2;
inline void GetPacketFeeAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPacketFeeAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPacketFeeAck::code() const {
  // @@protoc_insertion_point(field_get:GetPacketFeeAck.code)
  return _internal_code();
}
inline void GetPacketFeeAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetPacketFeeAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetPacketFeeAck.code)
}

// string description = 3;
inline void GetPacketFeeAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPacketFeeAck::description() const {
  // @@protoc_insertion_point(field_get:GetPacketFeeAck.description)
  return _internal_description();
}
inline void GetPacketFeeAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetPacketFeeAck.description)
}
inline std::string* GetPacketFeeAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetPacketFeeAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetPacketFeeAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetPacketFeeAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPacketFeeAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPacketFeeAck.description)
}
inline void GetPacketFeeAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPacketFeeAck.description)
}
inline void GetPacketFeeAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPacketFeeAck.description)
}
inline std::string* GetPacketFeeAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPacketFeeAck::release_description() {
  // @@protoc_insertion_point(field_release:GetPacketFeeAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPacketFeeAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetPacketFeeAck.description)
}

// string packet_fee = 4;
inline void GetPacketFeeAck::clear_packet_fee() {
  packet_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPacketFeeAck::packet_fee() const {
  // @@protoc_insertion_point(field_get:GetPacketFeeAck.packet_fee)
  return _internal_packet_fee();
}
inline void GetPacketFeeAck::set_packet_fee(const std::string& value) {
  _internal_set_packet_fee(value);
  // @@protoc_insertion_point(field_set:GetPacketFeeAck.packet_fee)
}
inline std::string* GetPacketFeeAck::mutable_packet_fee() {
  // @@protoc_insertion_point(field_mutable:GetPacketFeeAck.packet_fee)
  return _internal_mutable_packet_fee();
}
inline const std::string& GetPacketFeeAck::_internal_packet_fee() const {
  return packet_fee_.GetNoArena();
}
inline void GetPacketFeeAck::_internal_set_packet_fee(const std::string& value) {
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPacketFeeAck::set_packet_fee(std::string&& value) {
  
  packet_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPacketFeeAck.packet_fee)
}
inline void GetPacketFeeAck::set_packet_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPacketFeeAck.packet_fee)
}
inline void GetPacketFeeAck::set_packet_fee(const char* value, size_t size) {
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPacketFeeAck.packet_fee)
}
inline std::string* GetPacketFeeAck::_internal_mutable_packet_fee() {
  
  return packet_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPacketFeeAck::release_packet_fee() {
  // @@protoc_insertion_point(field_release:GetPacketFeeAck.packet_fee)
  
  return packet_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPacketFeeAck::set_allocated_packet_fee(std::string* packet_fee) {
  if (packet_fee != nullptr) {
    
  } else {
    
  }
  packet_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_fee);
  // @@protoc_insertion_point(field_set_allocated:GetPacketFeeAck.packet_fee)
}

// -------------------------------------------------------------------

// SetPacketFeeReq

// string version = 1;
inline void SetPacketFeeReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPacketFeeReq::version() const {
  // @@protoc_insertion_point(field_get:SetPacketFeeReq.version)
  return _internal_version();
}
inline void SetPacketFeeReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SetPacketFeeReq.version)
}
inline std::string* SetPacketFeeReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SetPacketFeeReq.version)
  return _internal_mutable_version();
}
inline const std::string& SetPacketFeeReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void SetPacketFeeReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPacketFeeReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetPacketFeeReq.version)
}
inline void SetPacketFeeReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetPacketFeeReq.version)
}
inline void SetPacketFeeReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetPacketFeeReq.version)
}
inline std::string* SetPacketFeeReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPacketFeeReq::release_version() {
  // @@protoc_insertion_point(field_release:SetPacketFeeReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPacketFeeReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SetPacketFeeReq.version)
}

// string password = 2;
inline void SetPacketFeeReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPacketFeeReq::password() const {
  // @@protoc_insertion_point(field_get:SetPacketFeeReq.password)
  return _internal_password();
}
inline void SetPacketFeeReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:SetPacketFeeReq.password)
}
inline std::string* SetPacketFeeReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:SetPacketFeeReq.password)
  return _internal_mutable_password();
}
inline const std::string& SetPacketFeeReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void SetPacketFeeReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPacketFeeReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetPacketFeeReq.password)
}
inline void SetPacketFeeReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetPacketFeeReq.password)
}
inline void SetPacketFeeReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetPacketFeeReq.password)
}
inline std::string* SetPacketFeeReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPacketFeeReq::release_password() {
  // @@protoc_insertion_point(field_release:SetPacketFeeReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPacketFeeReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:SetPacketFeeReq.password)
}

// string public_net_ip = 3;
inline void SetPacketFeeReq::clear_public_net_ip() {
  public_net_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPacketFeeReq::public_net_ip() const {
  // @@protoc_insertion_point(field_get:SetPacketFeeReq.public_net_ip)
  return _internal_public_net_ip();
}
inline void SetPacketFeeReq::set_public_net_ip(const std::string& value) {
  _internal_set_public_net_ip(value);
  // @@protoc_insertion_point(field_set:SetPacketFeeReq.public_net_ip)
}
inline std::string* SetPacketFeeReq::mutable_public_net_ip() {
  // @@protoc_insertion_point(field_mutable:SetPacketFeeReq.public_net_ip)
  return _internal_mutable_public_net_ip();
}
inline const std::string& SetPacketFeeReq::_internal_public_net_ip() const {
  return public_net_ip_.GetNoArena();
}
inline void SetPacketFeeReq::_internal_set_public_net_ip(const std::string& value) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPacketFeeReq::set_public_net_ip(std::string&& value) {
  
  public_net_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetPacketFeeReq.public_net_ip)
}
inline void SetPacketFeeReq::set_public_net_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetPacketFeeReq.public_net_ip)
}
inline void SetPacketFeeReq::set_public_net_ip(const char* value, size_t size) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetPacketFeeReq.public_net_ip)
}
inline std::string* SetPacketFeeReq::_internal_mutable_public_net_ip() {
  
  return public_net_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPacketFeeReq::release_public_net_ip() {
  // @@protoc_insertion_point(field_release:SetPacketFeeReq.public_net_ip)
  
  return public_net_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPacketFeeReq::set_allocated_public_net_ip(std::string* public_net_ip) {
  if (public_net_ip != nullptr) {
    
  } else {
    
  }
  public_net_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_net_ip);
  // @@protoc_insertion_point(field_set_allocated:SetPacketFeeReq.public_net_ip)
}

// string packet_fee = 4;
inline void SetPacketFeeReq::clear_packet_fee() {
  packet_fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPacketFeeReq::packet_fee() const {
  // @@protoc_insertion_point(field_get:SetPacketFeeReq.packet_fee)
  return _internal_packet_fee();
}
inline void SetPacketFeeReq::set_packet_fee(const std::string& value) {
  _internal_set_packet_fee(value);
  // @@protoc_insertion_point(field_set:SetPacketFeeReq.packet_fee)
}
inline std::string* SetPacketFeeReq::mutable_packet_fee() {
  // @@protoc_insertion_point(field_mutable:SetPacketFeeReq.packet_fee)
  return _internal_mutable_packet_fee();
}
inline const std::string& SetPacketFeeReq::_internal_packet_fee() const {
  return packet_fee_.GetNoArena();
}
inline void SetPacketFeeReq::_internal_set_packet_fee(const std::string& value) {
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPacketFeeReq::set_packet_fee(std::string&& value) {
  
  packet_fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetPacketFeeReq.packet_fee)
}
inline void SetPacketFeeReq::set_packet_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetPacketFeeReq.packet_fee)
}
inline void SetPacketFeeReq::set_packet_fee(const char* value, size_t size) {
  
  packet_fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetPacketFeeReq.packet_fee)
}
inline std::string* SetPacketFeeReq::_internal_mutable_packet_fee() {
  
  return packet_fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPacketFeeReq::release_packet_fee() {
  // @@protoc_insertion_point(field_release:SetPacketFeeReq.packet_fee)
  
  return packet_fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPacketFeeReq::set_allocated_packet_fee(std::string* packet_fee) {
  if (packet_fee != nullptr) {
    
  } else {
    
  }
  packet_fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_fee);
  // @@protoc_insertion_point(field_set_allocated:SetPacketFeeReq.packet_fee)
}

// -------------------------------------------------------------------

// SetPacketFeeAck

// string version = 1;
inline void SetPacketFeeAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPacketFeeAck::version() const {
  // @@protoc_insertion_point(field_get:SetPacketFeeAck.version)
  return _internal_version();
}
inline void SetPacketFeeAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SetPacketFeeAck.version)
}
inline std::string* SetPacketFeeAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SetPacketFeeAck.version)
  return _internal_mutable_version();
}
inline const std::string& SetPacketFeeAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void SetPacketFeeAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPacketFeeAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetPacketFeeAck.version)
}
inline void SetPacketFeeAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetPacketFeeAck.version)
}
inline void SetPacketFeeAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetPacketFeeAck.version)
}
inline std::string* SetPacketFeeAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPacketFeeAck::release_version() {
  // @@protoc_insertion_point(field_release:SetPacketFeeAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPacketFeeAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SetPacketFeeAck.version)
}

// sint32 code = 2;
inline void SetPacketFeeAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPacketFeeAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPacketFeeAck::code() const {
  // @@protoc_insertion_point(field_get:SetPacketFeeAck.code)
  return _internal_code();
}
inline void SetPacketFeeAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SetPacketFeeAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:SetPacketFeeAck.code)
}

// string description = 3;
inline void SetPacketFeeAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetPacketFeeAck::description() const {
  // @@protoc_insertion_point(field_get:SetPacketFeeAck.description)
  return _internal_description();
}
inline void SetPacketFeeAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:SetPacketFeeAck.description)
}
inline std::string* SetPacketFeeAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:SetPacketFeeAck.description)
  return _internal_mutable_description();
}
inline const std::string& SetPacketFeeAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void SetPacketFeeAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SetPacketFeeAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SetPacketFeeAck.description)
}
inline void SetPacketFeeAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SetPacketFeeAck.description)
}
inline void SetPacketFeeAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SetPacketFeeAck.description)
}
inline std::string* SetPacketFeeAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetPacketFeeAck::release_description() {
  // @@protoc_insertion_point(field_release:SetPacketFeeAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetPacketFeeAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:SetPacketFeeAck.description)
}

// -------------------------------------------------------------------

// GetBlockTopReq

// string version = 1;
inline void GetBlockTopReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockTopReq::version() const {
  // @@protoc_insertion_point(field_get:GetBlockTopReq.version)
  return _internal_version();
}
inline void GetBlockTopReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetBlockTopReq.version)
}
inline std::string* GetBlockTopReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetBlockTopReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetBlockTopReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetBlockTopReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockTopReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockTopReq.version)
}
inline void GetBlockTopReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockTopReq.version)
}
inline void GetBlockTopReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockTopReq.version)
}
inline std::string* GetBlockTopReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockTopReq::release_version() {
  // @@protoc_insertion_point(field_release:GetBlockTopReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockTopReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetBlockTopReq.version)
}

// uint32 fd = 2;
inline void GetBlockTopReq::clear_fd() {
  fd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockTopReq::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockTopReq::fd() const {
  // @@protoc_insertion_point(field_get:GetBlockTopReq.fd)
  return _internal_fd();
}
inline void GetBlockTopReq::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fd_ = value;
}
inline void GetBlockTopReq::set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:GetBlockTopReq.fd)
}

// uint32 port = 3;
inline void GetBlockTopReq::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockTopReq::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockTopReq::port() const {
  // @@protoc_insertion_point(field_get:GetBlockTopReq.port)
  return _internal_port();
}
inline void GetBlockTopReq::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void GetBlockTopReq::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GetBlockTopReq.port)
}

// uint32 ip = 4;
inline void GetBlockTopReq::clear_ip() {
  ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockTopReq::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockTopReq::ip() const {
  // @@protoc_insertion_point(field_get:GetBlockTopReq.ip)
  return _internal_ip();
}
inline void GetBlockTopReq::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ip_ = value;
}
inline void GetBlockTopReq::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GetBlockTopReq.ip)
}

// -------------------------------------------------------------------

// TApiGetBlockTopAck

// string version = 1;
inline void TApiGetBlockTopAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TApiGetBlockTopAck::version() const {
  // @@protoc_insertion_point(field_get:TApiGetBlockTopAck.version)
  return _internal_version();
}
inline void TApiGetBlockTopAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TApiGetBlockTopAck.version)
}
inline std::string* TApiGetBlockTopAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TApiGetBlockTopAck.version)
  return _internal_mutable_version();
}
inline const std::string& TApiGetBlockTopAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void TApiGetBlockTopAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TApiGetBlockTopAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TApiGetBlockTopAck.version)
}
inline void TApiGetBlockTopAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TApiGetBlockTopAck.version)
}
inline void TApiGetBlockTopAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TApiGetBlockTopAck.version)
}
inline std::string* TApiGetBlockTopAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TApiGetBlockTopAck::release_version() {
  // @@protoc_insertion_point(field_release:TApiGetBlockTopAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TApiGetBlockTopAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TApiGetBlockTopAck.version)
}

// sint32 code = 2;
inline void TApiGetBlockTopAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TApiGetBlockTopAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TApiGetBlockTopAck::code() const {
  // @@protoc_insertion_point(field_get:TApiGetBlockTopAck.code)
  return _internal_code();
}
inline void TApiGetBlockTopAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void TApiGetBlockTopAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:TApiGetBlockTopAck.code)
}

// string description = 3;
inline void TApiGetBlockTopAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TApiGetBlockTopAck::description() const {
  // @@protoc_insertion_point(field_get:TApiGetBlockTopAck.description)
  return _internal_description();
}
inline void TApiGetBlockTopAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:TApiGetBlockTopAck.description)
}
inline std::string* TApiGetBlockTopAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:TApiGetBlockTopAck.description)
  return _internal_mutable_description();
}
inline const std::string& TApiGetBlockTopAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void TApiGetBlockTopAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TApiGetBlockTopAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TApiGetBlockTopAck.description)
}
inline void TApiGetBlockTopAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TApiGetBlockTopAck.description)
}
inline void TApiGetBlockTopAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TApiGetBlockTopAck.description)
}
inline std::string* TApiGetBlockTopAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TApiGetBlockTopAck::release_description() {
  // @@protoc_insertion_point(field_release:TApiGetBlockTopAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TApiGetBlockTopAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:TApiGetBlockTopAck.description)
}

// uint32 top = 4;
inline void TApiGetBlockTopAck::clear_top() {
  top_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::top() const {
  // @@protoc_insertion_point(field_get:TApiGetBlockTopAck.top)
  return _internal_top();
}
inline void TApiGetBlockTopAck::_internal_set_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  top_ = value;
}
inline void TApiGetBlockTopAck::set_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:TApiGetBlockTopAck.top)
}

// uint32 fd = 5;
inline void TApiGetBlockTopAck::clear_fd() {
  fd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::fd() const {
  // @@protoc_insertion_point(field_get:TApiGetBlockTopAck.fd)
  return _internal_fd();
}
inline void TApiGetBlockTopAck::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fd_ = value;
}
inline void TApiGetBlockTopAck::set_fd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:TApiGetBlockTopAck.fd)
}

// uint32 port = 6;
inline void TApiGetBlockTopAck::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::port() const {
  // @@protoc_insertion_point(field_get:TApiGetBlockTopAck.port)
  return _internal_port();
}
inline void TApiGetBlockTopAck::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void TApiGetBlockTopAck::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:TApiGetBlockTopAck.port)
}

// uint32 ip = 7;
inline void TApiGetBlockTopAck::clear_ip() {
  ip_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TApiGetBlockTopAck::ip() const {
  // @@protoc_insertion_point(field_get:TApiGetBlockTopAck.ip)
  return _internal_ip();
}
inline void TApiGetBlockTopAck::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ip_ = value;
}
inline void TApiGetBlockTopAck::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:TApiGetBlockTopAck.ip)
}

// -------------------------------------------------------------------

// GetNodeServiceFeeReq

// string version = 1;
inline void GetNodeServiceFeeReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeServiceFeeReq::version() const {
  // @@protoc_insertion_point(field_get:GetNodeServiceFeeReq.version)
  return _internal_version();
}
inline void GetNodeServiceFeeReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetNodeServiceFeeReq.version)
}
inline std::string* GetNodeServiceFeeReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetNodeServiceFeeReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetNodeServiceFeeReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetNodeServiceFeeReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeServiceFeeReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetNodeServiceFeeReq.version)
}
inline void GetNodeServiceFeeReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetNodeServiceFeeReq.version)
}
inline void GetNodeServiceFeeReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetNodeServiceFeeReq.version)
}
inline std::string* GetNodeServiceFeeReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeServiceFeeReq::release_version() {
  // @@protoc_insertion_point(field_release:GetNodeServiceFeeReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeServiceFeeReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetNodeServiceFeeReq.version)
}

// -------------------------------------------------------------------

// GetNodeServiceFeeAck

// string version = 1;
inline void GetNodeServiceFeeAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeServiceFeeAck::version() const {
  // @@protoc_insertion_point(field_get:GetNodeServiceFeeAck.version)
  return _internal_version();
}
inline void GetNodeServiceFeeAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetNodeServiceFeeAck.version)
}
inline std::string* GetNodeServiceFeeAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetNodeServiceFeeAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetNodeServiceFeeAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetNodeServiceFeeAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeServiceFeeAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetNodeServiceFeeAck.version)
}
inline void GetNodeServiceFeeAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetNodeServiceFeeAck.version)
}
inline void GetNodeServiceFeeAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetNodeServiceFeeAck.version)
}
inline std::string* GetNodeServiceFeeAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeServiceFeeAck::release_version() {
  // @@protoc_insertion_point(field_release:GetNodeServiceFeeAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeServiceFeeAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetNodeServiceFeeAck.version)
}

// sint32 code = 2;
inline void GetNodeServiceFeeAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetNodeServiceFeeAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetNodeServiceFeeAck::code() const {
  // @@protoc_insertion_point(field_get:GetNodeServiceFeeAck.code)
  return _internal_code();
}
inline void GetNodeServiceFeeAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetNodeServiceFeeAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetNodeServiceFeeAck.code)
}

// string description = 3;
inline void GetNodeServiceFeeAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetNodeServiceFeeAck::description() const {
  // @@protoc_insertion_point(field_get:GetNodeServiceFeeAck.description)
  return _internal_description();
}
inline void GetNodeServiceFeeAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetNodeServiceFeeAck.description)
}
inline std::string* GetNodeServiceFeeAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetNodeServiceFeeAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetNodeServiceFeeAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetNodeServiceFeeAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetNodeServiceFeeAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetNodeServiceFeeAck.description)
}
inline void GetNodeServiceFeeAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetNodeServiceFeeAck.description)
}
inline void GetNodeServiceFeeAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetNodeServiceFeeAck.description)
}
inline std::string* GetNodeServiceFeeAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetNodeServiceFeeAck::release_description() {
  // @@protoc_insertion_point(field_release:GetNodeServiceFeeAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodeServiceFeeAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetNodeServiceFeeAck.description)
}

// repeated .ServiceFee service_fee_info = 4;
inline int GetNodeServiceFeeAck::_internal_service_fee_info_size() const {
  return service_fee_info_.size();
}
inline int GetNodeServiceFeeAck::service_fee_info_size() const {
  return _internal_service_fee_info_size();
}
inline void GetNodeServiceFeeAck::clear_service_fee_info() {
  service_fee_info_.Clear();
}
inline ::ServiceFee* GetNodeServiceFeeAck::mutable_service_fee_info(int index) {
  // @@protoc_insertion_point(field_mutable:GetNodeServiceFeeAck.service_fee_info)
  return service_fee_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >*
GetNodeServiceFeeAck::mutable_service_fee_info() {
  // @@protoc_insertion_point(field_mutable_list:GetNodeServiceFeeAck.service_fee_info)
  return &service_fee_info_;
}
inline const ::ServiceFee& GetNodeServiceFeeAck::_internal_service_fee_info(int index) const {
  return service_fee_info_.Get(index);
}
inline const ::ServiceFee& GetNodeServiceFeeAck::service_fee_info(int index) const {
  // @@protoc_insertion_point(field_get:GetNodeServiceFeeAck.service_fee_info)
  return _internal_service_fee_info(index);
}
inline ::ServiceFee* GetNodeServiceFeeAck::_internal_add_service_fee_info() {
  return service_fee_info_.Add();
}
inline ::ServiceFee* GetNodeServiceFeeAck::add_service_fee_info() {
  // @@protoc_insertion_point(field_add:GetNodeServiceFeeAck.service_fee_info)
  return _internal_add_service_fee_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >&
GetNodeServiceFeeAck::service_fee_info() const {
  // @@protoc_insertion_point(field_list:GetNodeServiceFeeAck.service_fee_info)
  return service_fee_info_;
}

// -------------------------------------------------------------------

// GetDevInfoListReq

// string version = 1;
inline void GetDevInfoListReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListReq::version() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListReq.version)
  return _internal_version();
}
inline void GetDevInfoListReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListReq.version)
}
inline std::string* GetDevInfoListReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevInfoListReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevInfoListReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListReq.version)
}
inline void GetDevInfoListReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListReq.version)
}
inline void GetDevInfoListReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListReq.version)
}
inline std::string* GetDevInfoListReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListReq::release_version() {
  // @@protoc_insertion_point(field_release:GetDevInfoListReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListReq.version)
}

// string password = 2;
inline void GetDevInfoListReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListReq::password() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListReq.password)
  return _internal_password();
}
inline void GetDevInfoListReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListReq.password)
}
inline std::string* GetDevInfoListReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListReq.password)
  return _internal_mutable_password();
}
inline const std::string& GetDevInfoListReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void GetDevInfoListReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListReq.password)
}
inline void GetDevInfoListReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListReq.password)
}
inline void GetDevInfoListReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListReq.password)
}
inline std::string* GetDevInfoListReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListReq::release_password() {
  // @@protoc_insertion_point(field_release:GetDevInfoListReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListReq.password)
}

// string devaddr = 3;
inline void GetDevInfoListReq::clear_devaddr() {
  devaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListReq::devaddr() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListReq.devaddr)
  return _internal_devaddr();
}
inline void GetDevInfoListReq::set_devaddr(const std::string& value) {
  _internal_set_devaddr(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListReq.devaddr)
}
inline std::string* GetDevInfoListReq::mutable_devaddr() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListReq.devaddr)
  return _internal_mutable_devaddr();
}
inline const std::string& GetDevInfoListReq::_internal_devaddr() const {
  return devaddr_.GetNoArena();
}
inline void GetDevInfoListReq::_internal_set_devaddr(const std::string& value) {
  
  devaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListReq::set_devaddr(std::string&& value) {
  
  devaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListReq.devaddr)
}
inline void GetDevInfoListReq::set_devaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListReq.devaddr)
}
inline void GetDevInfoListReq::set_devaddr(const char* value, size_t size) {
  
  devaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListReq.devaddr)
}
inline std::string* GetDevInfoListReq::_internal_mutable_devaddr() {
  
  return devaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListReq::release_devaddr() {
  // @@protoc_insertion_point(field_release:GetDevInfoListReq.devaddr)
  
  return devaddr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListReq::set_allocated_devaddr(std::string* devaddr) {
  if (devaddr != nullptr) {
    
  } else {
    
  }
  devaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devaddr);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListReq.devaddr)
}

// string public_net_ip = 4;
inline void GetDevInfoListReq::clear_public_net_ip() {
  public_net_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListReq::public_net_ip() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListReq.public_net_ip)
  return _internal_public_net_ip();
}
inline void GetDevInfoListReq::set_public_net_ip(const std::string& value) {
  _internal_set_public_net_ip(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListReq.public_net_ip)
}
inline std::string* GetDevInfoListReq::mutable_public_net_ip() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListReq.public_net_ip)
  return _internal_mutable_public_net_ip();
}
inline const std::string& GetDevInfoListReq::_internal_public_net_ip() const {
  return public_net_ip_.GetNoArena();
}
inline void GetDevInfoListReq::_internal_set_public_net_ip(const std::string& value) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListReq::set_public_net_ip(std::string&& value) {
  
  public_net_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListReq.public_net_ip)
}
inline void GetDevInfoListReq::set_public_net_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListReq.public_net_ip)
}
inline void GetDevInfoListReq::set_public_net_ip(const char* value, size_t size) {
  
  public_net_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListReq.public_net_ip)
}
inline std::string* GetDevInfoListReq::_internal_mutable_public_net_ip() {
  
  return public_net_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListReq::release_public_net_ip() {
  // @@protoc_insertion_point(field_release:GetDevInfoListReq.public_net_ip)
  
  return public_net_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListReq::set_allocated_public_net_ip(std::string* public_net_ip) {
  if (public_net_ip != nullptr) {
    
  } else {
    
  }
  public_net_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_net_ip);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListReq.public_net_ip)
}

// bool is_show = 5;
inline void GetDevInfoListReq::clear_is_show() {
  is_show_ = false;
}
inline bool GetDevInfoListReq::_internal_is_show() const {
  return is_show_;
}
inline bool GetDevInfoListReq::is_show() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListReq.is_show)
  return _internal_is_show();
}
inline void GetDevInfoListReq::_internal_set_is_show(bool value) {
  
  is_show_ = value;
}
inline void GetDevInfoListReq::set_is_show(bool value) {
  _internal_set_is_show(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListReq.is_show)
}

// -------------------------------------------------------------------

// GetDevInfoListAcK

// string version = 1;
inline void GetDevInfoListAcK::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListAcK::version() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.version)
  return _internal_version();
}
inline void GetDevInfoListAcK::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.version)
}
inline std::string* GetDevInfoListAcK::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListAcK.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevInfoListAcK::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevInfoListAcK::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListAcK::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListAcK.version)
}
inline void GetDevInfoListAcK::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListAcK.version)
}
inline void GetDevInfoListAcK::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListAcK.version)
}
inline std::string* GetDevInfoListAcK::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListAcK::release_version() {
  // @@protoc_insertion_point(field_release:GetDevInfoListAcK.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListAcK::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListAcK.version)
}

// sint32 code = 2;
inline void GetDevInfoListAcK::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevInfoListAcK::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevInfoListAcK::code() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.code)
  return _internal_code();
}
inline void GetDevInfoListAcK::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetDevInfoListAcK::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.code)
}

// string description = 3;
inline void GetDevInfoListAcK::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListAcK::description() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.description)
  return _internal_description();
}
inline void GetDevInfoListAcK::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.description)
}
inline std::string* GetDevInfoListAcK::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListAcK.description)
  return _internal_mutable_description();
}
inline const std::string& GetDevInfoListAcK::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetDevInfoListAcK::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListAcK::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListAcK.description)
}
inline void GetDevInfoListAcK::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListAcK.description)
}
inline void GetDevInfoListAcK::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListAcK.description)
}
inline std::string* GetDevInfoListAcK::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListAcK::release_description() {
  // @@protoc_insertion_point(field_release:GetDevInfoListAcK.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListAcK::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListAcK.description)
}

// string mac_hash = 4;
inline void GetDevInfoListAcK::clear_mac_hash() {
  mac_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListAcK::mac_hash() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.mac_hash)
  return _internal_mac_hash();
}
inline void GetDevInfoListAcK::set_mac_hash(const std::string& value) {
  _internal_set_mac_hash(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.mac_hash)
}
inline std::string* GetDevInfoListAcK::mutable_mac_hash() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListAcK.mac_hash)
  return _internal_mutable_mac_hash();
}
inline const std::string& GetDevInfoListAcK::_internal_mac_hash() const {
  return mac_hash_.GetNoArena();
}
inline void GetDevInfoListAcK::_internal_set_mac_hash(const std::string& value) {
  
  mac_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListAcK::set_mac_hash(std::string&& value) {
  
  mac_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListAcK.mac_hash)
}
inline void GetDevInfoListAcK::set_mac_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListAcK.mac_hash)
}
inline void GetDevInfoListAcK::set_mac_hash(const char* value, size_t size) {
  
  mac_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListAcK.mac_hash)
}
inline std::string* GetDevInfoListAcK::_internal_mutable_mac_hash() {
  
  return mac_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListAcK::release_mac_hash() {
  // @@protoc_insertion_point(field_release:GetDevInfoListAcK.mac_hash)
  
  return mac_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListAcK::set_allocated_mac_hash(std::string* mac_hash) {
  if (mac_hash != nullptr) {
    
  } else {
    
  }
  mac_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_hash);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListAcK.mac_hash)
}

// string deviceaddr = 5;
inline void GetDevInfoListAcK::clear_deviceaddr() {
  deviceaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListAcK::deviceaddr() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.deviceaddr)
  return _internal_deviceaddr();
}
inline void GetDevInfoListAcK::set_deviceaddr(const std::string& value) {
  _internal_set_deviceaddr(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.deviceaddr)
}
inline std::string* GetDevInfoListAcK::mutable_deviceaddr() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListAcK.deviceaddr)
  return _internal_mutable_deviceaddr();
}
inline const std::string& GetDevInfoListAcK::_internal_deviceaddr() const {
  return deviceaddr_.GetNoArena();
}
inline void GetDevInfoListAcK::_internal_set_deviceaddr(const std::string& value) {
  
  deviceaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListAcK::set_deviceaddr(std::string&& value) {
  
  deviceaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListAcK.deviceaddr)
}
inline void GetDevInfoListAcK::set_deviceaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListAcK.deviceaddr)
}
inline void GetDevInfoListAcK::set_deviceaddr(const char* value, size_t size) {
  
  deviceaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListAcK.deviceaddr)
}
inline std::string* GetDevInfoListAcK::_internal_mutable_deviceaddr() {
  
  return deviceaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListAcK::release_deviceaddr() {
  // @@protoc_insertion_point(field_release:GetDevInfoListAcK.deviceaddr)
  
  return deviceaddr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListAcK::set_allocated_deviceaddr(std::string* deviceaddr) {
  if (deviceaddr != nullptr) {
    
  } else {
    
  }
  deviceaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceaddr);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListAcK.deviceaddr)
}

// string device_version = 6;
inline void GetDevInfoListAcK::clear_device_version() {
  device_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoListAcK::device_version() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.device_version)
  return _internal_device_version();
}
inline void GetDevInfoListAcK::set_device_version(const std::string& value) {
  _internal_set_device_version(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.device_version)
}
inline std::string* GetDevInfoListAcK::mutable_device_version() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListAcK.device_version)
  return _internal_mutable_device_version();
}
inline const std::string& GetDevInfoListAcK::_internal_device_version() const {
  return device_version_.GetNoArena();
}
inline void GetDevInfoListAcK::_internal_set_device_version(const std::string& value) {
  
  device_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoListAcK::set_device_version(std::string&& value) {
  
  device_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoListAcK.device_version)
}
inline void GetDevInfoListAcK::set_device_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoListAcK.device_version)
}
inline void GetDevInfoListAcK::set_device_version(const char* value, size_t size) {
  
  device_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoListAcK.device_version)
}
inline std::string* GetDevInfoListAcK::_internal_mutable_device_version() {
  
  return device_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoListAcK::release_device_version() {
  // @@protoc_insertion_point(field_release:GetDevInfoListAcK.device_version)
  
  return device_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoListAcK::set_allocated_device_version(std::string* device_version) {
  if (device_version != nullptr) {
    
  } else {
    
  }
  device_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_version);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoListAcK.device_version)
}

// sint32 device_height = 7;
inline void GetDevInfoListAcK::clear_device_height() {
  device_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevInfoListAcK::_internal_device_height() const {
  return device_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevInfoListAcK::device_height() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.device_height)
  return _internal_device_height();
}
inline void GetDevInfoListAcK::_internal_set_device_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  device_height_ = value;
}
inline void GetDevInfoListAcK::set_device_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_height(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.device_height)
}

// sint32 public_net_height = 8;
inline void GetDevInfoListAcK::clear_public_net_height() {
  public_net_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevInfoListAcK::_internal_public_net_height() const {
  return public_net_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevInfoListAcK::public_net_height() const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.public_net_height)
  return _internal_public_net_height();
}
inline void GetDevInfoListAcK::_internal_set_public_net_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  public_net_height_ = value;
}
inline void GetDevInfoListAcK::set_public_net_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_net_height(value);
  // @@protoc_insertion_point(field_set:GetDevInfoListAcK.public_net_height)
}

// repeated .ServiceFee service_fee_info = 9;
inline int GetDevInfoListAcK::_internal_service_fee_info_size() const {
  return service_fee_info_.size();
}
inline int GetDevInfoListAcK::service_fee_info_size() const {
  return _internal_service_fee_info_size();
}
inline void GetDevInfoListAcK::clear_service_fee_info() {
  service_fee_info_.Clear();
}
inline ::ServiceFee* GetDevInfoListAcK::mutable_service_fee_info(int index) {
  // @@protoc_insertion_point(field_mutable:GetDevInfoListAcK.service_fee_info)
  return service_fee_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >*
GetDevInfoListAcK::mutable_service_fee_info() {
  // @@protoc_insertion_point(field_mutable_list:GetDevInfoListAcK.service_fee_info)
  return &service_fee_info_;
}
inline const ::ServiceFee& GetDevInfoListAcK::_internal_service_fee_info(int index) const {
  return service_fee_info_.Get(index);
}
inline const ::ServiceFee& GetDevInfoListAcK::service_fee_info(int index) const {
  // @@protoc_insertion_point(field_get:GetDevInfoListAcK.service_fee_info)
  return _internal_service_fee_info(index);
}
inline ::ServiceFee* GetDevInfoListAcK::_internal_add_service_fee_info() {
  return service_fee_info_.Add();
}
inline ::ServiceFee* GetDevInfoListAcK::add_service_fee_info() {
  // @@protoc_insertion_point(field_add:GetDevInfoListAcK.service_fee_info)
  return _internal_add_service_fee_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServiceFee >&
GetDevInfoListAcK::service_fee_info() const {
  // @@protoc_insertion_point(field_list:GetDevInfoListAcK.service_fee_info)
  return service_fee_info_;
}

// -------------------------------------------------------------------

// GetDevPrivateKeyReq

// string version = 1;
inline void GetDevPrivateKeyReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPrivateKeyReq::version() const {
  // @@protoc_insertion_point(field_get:GetDevPrivateKeyReq.version)
  return _internal_version();
}
inline void GetDevPrivateKeyReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevPrivateKeyReq.version)
}
inline std::string* GetDevPrivateKeyReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevPrivateKeyReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevPrivateKeyReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevPrivateKeyReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPrivateKeyReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPrivateKeyReq.version)
}
inline void GetDevPrivateKeyReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPrivateKeyReq.version)
}
inline void GetDevPrivateKeyReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPrivateKeyReq.version)
}
inline std::string* GetDevPrivateKeyReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPrivateKeyReq::release_version() {
  // @@protoc_insertion_point(field_release:GetDevPrivateKeyReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPrivateKeyReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevPrivateKeyReq.version)
}

// string password = 2;
inline void GetDevPrivateKeyReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPrivateKeyReq::password() const {
  // @@protoc_insertion_point(field_get:GetDevPrivateKeyReq.password)
  return _internal_password();
}
inline void GetDevPrivateKeyReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GetDevPrivateKeyReq.password)
}
inline std::string* GetDevPrivateKeyReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GetDevPrivateKeyReq.password)
  return _internal_mutable_password();
}
inline const std::string& GetDevPrivateKeyReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void GetDevPrivateKeyReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPrivateKeyReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPrivateKeyReq.password)
}
inline void GetDevPrivateKeyReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPrivateKeyReq.password)
}
inline void GetDevPrivateKeyReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPrivateKeyReq.password)
}
inline std::string* GetDevPrivateKeyReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPrivateKeyReq::release_password() {
  // @@protoc_insertion_point(field_release:GetDevPrivateKeyReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPrivateKeyReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GetDevPrivateKeyReq.password)
}

// string bs58addr = 3;
inline void GetDevPrivateKeyReq::clear_bs58addr() {
  bs58addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPrivateKeyReq::bs58addr() const {
  // @@protoc_insertion_point(field_get:GetDevPrivateKeyReq.bs58addr)
  return _internal_bs58addr();
}
inline void GetDevPrivateKeyReq::set_bs58addr(const std::string& value) {
  _internal_set_bs58addr(value);
  // @@protoc_insertion_point(field_set:GetDevPrivateKeyReq.bs58addr)
}
inline std::string* GetDevPrivateKeyReq::mutable_bs58addr() {
  // @@protoc_insertion_point(field_mutable:GetDevPrivateKeyReq.bs58addr)
  return _internal_mutable_bs58addr();
}
inline const std::string& GetDevPrivateKeyReq::_internal_bs58addr() const {
  return bs58addr_.GetNoArena();
}
inline void GetDevPrivateKeyReq::_internal_set_bs58addr(const std::string& value) {
  
  bs58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPrivateKeyReq::set_bs58addr(std::string&& value) {
  
  bs58addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPrivateKeyReq.bs58addr)
}
inline void GetDevPrivateKeyReq::set_bs58addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bs58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPrivateKeyReq.bs58addr)
}
inline void GetDevPrivateKeyReq::set_bs58addr(const char* value, size_t size) {
  
  bs58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPrivateKeyReq.bs58addr)
}
inline std::string* GetDevPrivateKeyReq::_internal_mutable_bs58addr() {
  
  return bs58addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPrivateKeyReq::release_bs58addr() {
  // @@protoc_insertion_point(field_release:GetDevPrivateKeyReq.bs58addr)
  
  return bs58addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPrivateKeyReq::set_allocated_bs58addr(std::string* bs58addr) {
  if (bs58addr != nullptr) {
    
  } else {
    
  }
  bs58addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bs58addr);
  // @@protoc_insertion_point(field_set_allocated:GetDevPrivateKeyReq.bs58addr)
}

// -------------------------------------------------------------------

// DevPrivateKeyInfo

// string base58addr = 1;
inline void DevPrivateKeyInfo::clear_base58addr() {
  base58addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DevPrivateKeyInfo::base58addr() const {
  // @@protoc_insertion_point(field_get:DevPrivateKeyInfo.base58addr)
  return _internal_base58addr();
}
inline void DevPrivateKeyInfo::set_base58addr(const std::string& value) {
  _internal_set_base58addr(value);
  // @@protoc_insertion_point(field_set:DevPrivateKeyInfo.base58addr)
}
inline std::string* DevPrivateKeyInfo::mutable_base58addr() {
  // @@protoc_insertion_point(field_mutable:DevPrivateKeyInfo.base58addr)
  return _internal_mutable_base58addr();
}
inline const std::string& DevPrivateKeyInfo::_internal_base58addr() const {
  return base58addr_.GetNoArena();
}
inline void DevPrivateKeyInfo::_internal_set_base58addr(const std::string& value) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DevPrivateKeyInfo::set_base58addr(std::string&& value) {
  
  base58addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DevPrivateKeyInfo.base58addr)
}
inline void DevPrivateKeyInfo::set_base58addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DevPrivateKeyInfo.base58addr)
}
inline void DevPrivateKeyInfo::set_base58addr(const char* value, size_t size) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DevPrivateKeyInfo.base58addr)
}
inline std::string* DevPrivateKeyInfo::_internal_mutable_base58addr() {
  
  return base58addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DevPrivateKeyInfo::release_base58addr() {
  // @@protoc_insertion_point(field_release:DevPrivateKeyInfo.base58addr)
  
  return base58addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DevPrivateKeyInfo::set_allocated_base58addr(std::string* base58addr) {
  if (base58addr != nullptr) {
    
  } else {
    
  }
  base58addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base58addr);
  // @@protoc_insertion_point(field_set_allocated:DevPrivateKeyInfo.base58addr)
}

// string keystore = 2;
inline void DevPrivateKeyInfo::clear_keystore() {
  keystore_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DevPrivateKeyInfo::keystore() const {
  // @@protoc_insertion_point(field_get:DevPrivateKeyInfo.keystore)
  return _internal_keystore();
}
inline void DevPrivateKeyInfo::set_keystore(const std::string& value) {
  _internal_set_keystore(value);
  // @@protoc_insertion_point(field_set:DevPrivateKeyInfo.keystore)
}
inline std::string* DevPrivateKeyInfo::mutable_keystore() {
  // @@protoc_insertion_point(field_mutable:DevPrivateKeyInfo.keystore)
  return _internal_mutable_keystore();
}
inline const std::string& DevPrivateKeyInfo::_internal_keystore() const {
  return keystore_.GetNoArena();
}
inline void DevPrivateKeyInfo::_internal_set_keystore(const std::string& value) {
  
  keystore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DevPrivateKeyInfo::set_keystore(std::string&& value) {
  
  keystore_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DevPrivateKeyInfo.keystore)
}
inline void DevPrivateKeyInfo::set_keystore(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keystore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DevPrivateKeyInfo.keystore)
}
inline void DevPrivateKeyInfo::set_keystore(const char* value, size_t size) {
  
  keystore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DevPrivateKeyInfo.keystore)
}
inline std::string* DevPrivateKeyInfo::_internal_mutable_keystore() {
  
  return keystore_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DevPrivateKeyInfo::release_keystore() {
  // @@protoc_insertion_point(field_release:DevPrivateKeyInfo.keystore)
  
  return keystore_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DevPrivateKeyInfo::set_allocated_keystore(std::string* keystore) {
  if (keystore != nullptr) {
    
  } else {
    
  }
  keystore_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keystore);
  // @@protoc_insertion_point(field_set_allocated:DevPrivateKeyInfo.keystore)
}

// string mnemonic = 3;
inline void DevPrivateKeyInfo::clear_mnemonic() {
  mnemonic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DevPrivateKeyInfo::mnemonic() const {
  // @@protoc_insertion_point(field_get:DevPrivateKeyInfo.mnemonic)
  return _internal_mnemonic();
}
inline void DevPrivateKeyInfo::set_mnemonic(const std::string& value) {
  _internal_set_mnemonic(value);
  // @@protoc_insertion_point(field_set:DevPrivateKeyInfo.mnemonic)
}
inline std::string* DevPrivateKeyInfo::mutable_mnemonic() {
  // @@protoc_insertion_point(field_mutable:DevPrivateKeyInfo.mnemonic)
  return _internal_mutable_mnemonic();
}
inline const std::string& DevPrivateKeyInfo::_internal_mnemonic() const {
  return mnemonic_.GetNoArena();
}
inline void DevPrivateKeyInfo::_internal_set_mnemonic(const std::string& value) {
  
  mnemonic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DevPrivateKeyInfo::set_mnemonic(std::string&& value) {
  
  mnemonic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DevPrivateKeyInfo.mnemonic)
}
inline void DevPrivateKeyInfo::set_mnemonic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mnemonic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DevPrivateKeyInfo.mnemonic)
}
inline void DevPrivateKeyInfo::set_mnemonic(const char* value, size_t size) {
  
  mnemonic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DevPrivateKeyInfo.mnemonic)
}
inline std::string* DevPrivateKeyInfo::_internal_mutable_mnemonic() {
  
  return mnemonic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DevPrivateKeyInfo::release_mnemonic() {
  // @@protoc_insertion_point(field_release:DevPrivateKeyInfo.mnemonic)
  
  return mnemonic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DevPrivateKeyInfo::set_allocated_mnemonic(std::string* mnemonic) {
  if (mnemonic != nullptr) {
    
  } else {
    
  }
  mnemonic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mnemonic);
  // @@protoc_insertion_point(field_set_allocated:DevPrivateKeyInfo.mnemonic)
}

// -------------------------------------------------------------------

// GetDevPrivateKeyAck

// string version = 1;
inline void GetDevPrivateKeyAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPrivateKeyAck::version() const {
  // @@protoc_insertion_point(field_get:GetDevPrivateKeyAck.version)
  return _internal_version();
}
inline void GetDevPrivateKeyAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevPrivateKeyAck.version)
}
inline std::string* GetDevPrivateKeyAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevPrivateKeyAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevPrivateKeyAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevPrivateKeyAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPrivateKeyAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPrivateKeyAck.version)
}
inline void GetDevPrivateKeyAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPrivateKeyAck.version)
}
inline void GetDevPrivateKeyAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPrivateKeyAck.version)
}
inline std::string* GetDevPrivateKeyAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPrivateKeyAck::release_version() {
  // @@protoc_insertion_point(field_release:GetDevPrivateKeyAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPrivateKeyAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevPrivateKeyAck.version)
}

// int32 code = 2;
inline void GetDevPrivateKeyAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevPrivateKeyAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDevPrivateKeyAck::code() const {
  // @@protoc_insertion_point(field_get:GetDevPrivateKeyAck.code)
  return _internal_code();
}
inline void GetDevPrivateKeyAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetDevPrivateKeyAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetDevPrivateKeyAck.code)
}

// string description = 3;
inline void GetDevPrivateKeyAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevPrivateKeyAck::description() const {
  // @@protoc_insertion_point(field_get:GetDevPrivateKeyAck.description)
  return _internal_description();
}
inline void GetDevPrivateKeyAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetDevPrivateKeyAck.description)
}
inline std::string* GetDevPrivateKeyAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetDevPrivateKeyAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetDevPrivateKeyAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetDevPrivateKeyAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevPrivateKeyAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevPrivateKeyAck.description)
}
inline void GetDevPrivateKeyAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevPrivateKeyAck.description)
}
inline void GetDevPrivateKeyAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevPrivateKeyAck.description)
}
inline std::string* GetDevPrivateKeyAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevPrivateKeyAck::release_description() {
  // @@protoc_insertion_point(field_release:GetDevPrivateKeyAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevPrivateKeyAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetDevPrivateKeyAck.description)
}

// repeated .DevPrivateKeyInfo devprivatekeyinfo = 4;
inline int GetDevPrivateKeyAck::_internal_devprivatekeyinfo_size() const {
  return devprivatekeyinfo_.size();
}
inline int GetDevPrivateKeyAck::devprivatekeyinfo_size() const {
  return _internal_devprivatekeyinfo_size();
}
inline void GetDevPrivateKeyAck::clear_devprivatekeyinfo() {
  devprivatekeyinfo_.Clear();
}
inline ::DevPrivateKeyInfo* GetDevPrivateKeyAck::mutable_devprivatekeyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GetDevPrivateKeyAck.devprivatekeyinfo)
  return devprivatekeyinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DevPrivateKeyInfo >*
GetDevPrivateKeyAck::mutable_devprivatekeyinfo() {
  // @@protoc_insertion_point(field_mutable_list:GetDevPrivateKeyAck.devprivatekeyinfo)
  return &devprivatekeyinfo_;
}
inline const ::DevPrivateKeyInfo& GetDevPrivateKeyAck::_internal_devprivatekeyinfo(int index) const {
  return devprivatekeyinfo_.Get(index);
}
inline const ::DevPrivateKeyInfo& GetDevPrivateKeyAck::devprivatekeyinfo(int index) const {
  // @@protoc_insertion_point(field_get:GetDevPrivateKeyAck.devprivatekeyinfo)
  return _internal_devprivatekeyinfo(index);
}
inline ::DevPrivateKeyInfo* GetDevPrivateKeyAck::_internal_add_devprivatekeyinfo() {
  return devprivatekeyinfo_.Add();
}
inline ::DevPrivateKeyInfo* GetDevPrivateKeyAck::add_devprivatekeyinfo() {
  // @@protoc_insertion_point(field_add:GetDevPrivateKeyAck.devprivatekeyinfo)
  return _internal_add_devprivatekeyinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DevPrivateKeyInfo >&
GetDevPrivateKeyAck::devprivatekeyinfo() const {
  // @@protoc_insertion_point(field_list:GetDevPrivateKeyAck.devprivatekeyinfo)
  return devprivatekeyinfo_;
}

// -------------------------------------------------------------------

// CreateTxMsgReq

// string version = 1;
inline void CreateTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgReq.version)
  return _internal_version();
}
inline void CreateTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgReq.version)
}
inline std::string* CreateTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreateTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgReq.version)
}
inline void CreateTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgReq.version)
}
inline void CreateTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgReq.version)
}
inline std::string* CreateTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:CreateTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgReq.version)
}

// string from = 2;
inline void CreateTxMsgReq::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgReq::from() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgReq.from)
  return _internal_from();
}
inline void CreateTxMsgReq::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgReq.from)
}
inline std::string* CreateTxMsgReq::mutable_from() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgReq.from)
  return _internal_mutable_from();
}
inline const std::string& CreateTxMsgReq::_internal_from() const {
  return from_.GetNoArena();
}
inline void CreateTxMsgReq::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgReq::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgReq.from)
}
inline void CreateTxMsgReq::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgReq.from)
}
inline void CreateTxMsgReq::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgReq.from)
}
inline std::string* CreateTxMsgReq::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgReq::release_from() {
  // @@protoc_insertion_point(field_release:CreateTxMsgReq.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgReq::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgReq.from)
}

// string to = 3;
inline void CreateTxMsgReq::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgReq::to() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgReq.to)
  return _internal_to();
}
inline void CreateTxMsgReq::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgReq.to)
}
inline std::string* CreateTxMsgReq::mutable_to() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgReq.to)
  return _internal_mutable_to();
}
inline const std::string& CreateTxMsgReq::_internal_to() const {
  return to_.GetNoArena();
}
inline void CreateTxMsgReq::_internal_set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgReq::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgReq.to)
}
inline void CreateTxMsgReq::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgReq.to)
}
inline void CreateTxMsgReq::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgReq.to)
}
inline std::string* CreateTxMsgReq::_internal_mutable_to() {
  
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgReq::release_to() {
  // @@protoc_insertion_point(field_release:CreateTxMsgReq.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgReq::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgReq.to)
}

// string amt = 4;
inline void CreateTxMsgReq::clear_amt() {
  amt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgReq::amt() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgReq.amt)
  return _internal_amt();
}
inline void CreateTxMsgReq::set_amt(const std::string& value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgReq.amt)
}
inline std::string* CreateTxMsgReq::mutable_amt() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgReq.amt)
  return _internal_mutable_amt();
}
inline const std::string& CreateTxMsgReq::_internal_amt() const {
  return amt_.GetNoArena();
}
inline void CreateTxMsgReq::_internal_set_amt(const std::string& value) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgReq::set_amt(std::string&& value) {
  
  amt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgReq.amt)
}
inline void CreateTxMsgReq::set_amt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgReq.amt)
}
inline void CreateTxMsgReq::set_amt(const char* value, size_t size) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgReq.amt)
}
inline std::string* CreateTxMsgReq::_internal_mutable_amt() {
  
  return amt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgReq::release_amt() {
  // @@protoc_insertion_point(field_release:CreateTxMsgReq.amt)
  
  return amt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgReq::set_allocated_amt(std::string* amt) {
  if (amt != nullptr) {
    
  } else {
    
  }
  amt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amt);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgReq.amt)
}

// string minerFees = 5;
inline void CreateTxMsgReq::clear_minerfees() {
  minerfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgReq::minerfees() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgReq.minerFees)
  return _internal_minerfees();
}
inline void CreateTxMsgReq::set_minerfees(const std::string& value) {
  _internal_set_minerfees(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgReq.minerFees)
}
inline std::string* CreateTxMsgReq::mutable_minerfees() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgReq.minerFees)
  return _internal_mutable_minerfees();
}
inline const std::string& CreateTxMsgReq::_internal_minerfees() const {
  return minerfees_.GetNoArena();
}
inline void CreateTxMsgReq::_internal_set_minerfees(const std::string& value) {
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgReq::set_minerfees(std::string&& value) {
  
  minerfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgReq.minerFees)
}
inline void CreateTxMsgReq::set_minerfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgReq.minerFees)
}
inline void CreateTxMsgReq::set_minerfees(const char* value, size_t size) {
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgReq.minerFees)
}
inline std::string* CreateTxMsgReq::_internal_mutable_minerfees() {
  
  return minerfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgReq::release_minerfees() {
  // @@protoc_insertion_point(field_release:CreateTxMsgReq.minerFees)
  
  return minerfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgReq::set_allocated_minerfees(std::string* minerfees) {
  if (minerfees != nullptr) {
    
  } else {
    
  }
  minerfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minerfees);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgReq.minerFees)
}

// string needVerifyPreHashCount = 6;
inline void CreateTxMsgReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreateTxMsgReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateTxMsgReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreateTxMsgReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreateTxMsgReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgReq.needVerifyPreHashCount)
}
inline void CreateTxMsgReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgReq.needVerifyPreHashCount)
}
inline void CreateTxMsgReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateTxMsgReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreateTxMsgReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgReq.needVerifyPreHashCount)
}

// -------------------------------------------------------------------

// CreateTxMsgAck

// string version = 1;
inline void CreateTxMsgAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgAck::version() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgAck.version)
  return _internal_version();
}
inline void CreateTxMsgAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgAck.version)
}
inline std::string* CreateTxMsgAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgAck.version)
  return _internal_mutable_version();
}
inline const std::string& CreateTxMsgAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateTxMsgAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgAck.version)
}
inline void CreateTxMsgAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgAck.version)
}
inline void CreateTxMsgAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgAck.version)
}
inline std::string* CreateTxMsgAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgAck::release_version() {
  // @@protoc_insertion_point(field_release:CreateTxMsgAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgAck.version)
}

// int32 code = 2;
inline void CreateTxMsgAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateTxMsgAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateTxMsgAck::code() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgAck.code)
  return _internal_code();
}
inline void CreateTxMsgAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CreateTxMsgAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgAck.code)
}

// string message = 3;
inline void CreateTxMsgAck::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgAck::message() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgAck.message)
  return _internal_message();
}
inline void CreateTxMsgAck::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgAck.message)
}
inline std::string* CreateTxMsgAck::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgAck.message)
  return _internal_mutable_message();
}
inline const std::string& CreateTxMsgAck::_internal_message() const {
  return message_.GetNoArena();
}
inline void CreateTxMsgAck::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgAck::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgAck.message)
}
inline void CreateTxMsgAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgAck.message)
}
inline void CreateTxMsgAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgAck.message)
}
inline std::string* CreateTxMsgAck::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgAck::release_message() {
  // @@protoc_insertion_point(field_release:CreateTxMsgAck.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgAck.message)
}

// string txData = 4;
inline void CreateTxMsgAck::clear_txdata() {
  txdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgAck::txdata() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgAck.txData)
  return _internal_txdata();
}
inline void CreateTxMsgAck::set_txdata(const std::string& value) {
  _internal_set_txdata(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgAck.txData)
}
inline std::string* CreateTxMsgAck::mutable_txdata() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgAck.txData)
  return _internal_mutable_txdata();
}
inline const std::string& CreateTxMsgAck::_internal_txdata() const {
  return txdata_.GetNoArena();
}
inline void CreateTxMsgAck::_internal_set_txdata(const std::string& value) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgAck::set_txdata(std::string&& value) {
  
  txdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgAck.txData)
}
inline void CreateTxMsgAck::set_txdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgAck.txData)
}
inline void CreateTxMsgAck::set_txdata(const char* value, size_t size) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgAck.txData)
}
inline std::string* CreateTxMsgAck::_internal_mutable_txdata() {
  
  return txdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgAck::release_txdata() {
  // @@protoc_insertion_point(field_release:CreateTxMsgAck.txData)
  
  return txdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgAck::set_allocated_txdata(std::string* txdata) {
  if (txdata != nullptr) {
    
  } else {
    
  }
  txdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txdata);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgAck.txData)
}

// string txEncodeHash = 5;
inline void CreateTxMsgAck::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateTxMsgAck::txencodehash() const {
  // @@protoc_insertion_point(field_get:CreateTxMsgAck.txEncodeHash)
  return _internal_txencodehash();
}
inline void CreateTxMsgAck::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:CreateTxMsgAck.txEncodeHash)
}
inline std::string* CreateTxMsgAck::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:CreateTxMsgAck.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& CreateTxMsgAck::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void CreateTxMsgAck::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateTxMsgAck::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateTxMsgAck.txEncodeHash)
}
inline void CreateTxMsgAck::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateTxMsgAck.txEncodeHash)
}
inline void CreateTxMsgAck::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateTxMsgAck.txEncodeHash)
}
inline std::string* CreateTxMsgAck::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateTxMsgAck::release_txencodehash() {
  // @@protoc_insertion_point(field_release:CreateTxMsgAck.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTxMsgAck::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:CreateTxMsgAck.txEncodeHash)
}

// -------------------------------------------------------------------

// TxMsgReq

// string version = 1;
inline void TxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.version)
  return _internal_version();
}
inline void TxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TxMsgReq.version)
}
inline std::string* TxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& TxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void TxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgReq.version)
}
inline void TxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgReq.version)
}
inline void TxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgReq.version)
}
inline std::string* TxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:TxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.version)
}

// string serTx = 2;
inline void TxMsgReq::clear_sertx() {
  sertx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgReq::sertx() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.serTx)
  return _internal_sertx();
}
inline void TxMsgReq::set_sertx(const std::string& value) {
  _internal_set_sertx(value);
  // @@protoc_insertion_point(field_set:TxMsgReq.serTx)
}
inline std::string* TxMsgReq::mutable_sertx() {
  // @@protoc_insertion_point(field_mutable:TxMsgReq.serTx)
  return _internal_mutable_sertx();
}
inline const std::string& TxMsgReq::_internal_sertx() const {
  return sertx_.GetNoArena();
}
inline void TxMsgReq::_internal_set_sertx(const std::string& value) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgReq::set_sertx(std::string&& value) {
  
  sertx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgReq.serTx)
}
inline void TxMsgReq::set_sertx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgReq.serTx)
}
inline void TxMsgReq::set_sertx(const char* value, size_t size) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgReq.serTx)
}
inline std::string* TxMsgReq::_internal_mutable_sertx() {
  
  return sertx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgReq::release_sertx() {
  // @@protoc_insertion_point(field_release:TxMsgReq.serTx)
  
  return sertx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgReq::set_allocated_sertx(std::string* sertx) {
  if (sertx != nullptr) {
    
  } else {
    
  }
  sertx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sertx);
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.serTx)
}

// string strSignature = 3;
inline void TxMsgReq::clear_strsignature() {
  strsignature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgReq::strsignature() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.strSignature)
  return _internal_strsignature();
}
inline void TxMsgReq::set_strsignature(const std::string& value) {
  _internal_set_strsignature(value);
  // @@protoc_insertion_point(field_set:TxMsgReq.strSignature)
}
inline std::string* TxMsgReq::mutable_strsignature() {
  // @@protoc_insertion_point(field_mutable:TxMsgReq.strSignature)
  return _internal_mutable_strsignature();
}
inline const std::string& TxMsgReq::_internal_strsignature() const {
  return strsignature_.GetNoArena();
}
inline void TxMsgReq::_internal_set_strsignature(const std::string& value) {
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgReq::set_strsignature(std::string&& value) {
  
  strsignature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgReq.strSignature)
}
inline void TxMsgReq::set_strsignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgReq.strSignature)
}
inline void TxMsgReq::set_strsignature(const char* value, size_t size) {
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgReq.strSignature)
}
inline std::string* TxMsgReq::_internal_mutable_strsignature() {
  
  return strsignature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgReq::release_strsignature() {
  // @@protoc_insertion_point(field_release:TxMsgReq.strSignature)
  
  return strsignature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgReq::set_allocated_strsignature(std::string* strsignature) {
  if (strsignature != nullptr) {
    
  } else {
    
  }
  strsignature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strsignature);
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.strSignature)
}

// string strPub = 4;
inline void TxMsgReq::clear_strpub() {
  strpub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgReq::strpub() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.strPub)
  return _internal_strpub();
}
inline void TxMsgReq::set_strpub(const std::string& value) {
  _internal_set_strpub(value);
  // @@protoc_insertion_point(field_set:TxMsgReq.strPub)
}
inline std::string* TxMsgReq::mutable_strpub() {
  // @@protoc_insertion_point(field_mutable:TxMsgReq.strPub)
  return _internal_mutable_strpub();
}
inline const std::string& TxMsgReq::_internal_strpub() const {
  return strpub_.GetNoArena();
}
inline void TxMsgReq::_internal_set_strpub(const std::string& value) {
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgReq::set_strpub(std::string&& value) {
  
  strpub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgReq.strPub)
}
inline void TxMsgReq::set_strpub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgReq.strPub)
}
inline void TxMsgReq::set_strpub(const char* value, size_t size) {
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgReq.strPub)
}
inline std::string* TxMsgReq::_internal_mutable_strpub() {
  
  return strpub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgReq::release_strpub() {
  // @@protoc_insertion_point(field_release:TxMsgReq.strPub)
  
  return strpub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgReq::set_allocated_strpub(std::string* strpub) {
  if (strpub != nullptr) {
    
  } else {
    
  }
  strpub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strpub);
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.strPub)
}

// string txEncodeHash = 5;
inline void TxMsgReq::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgReq::txencodehash() const {
  // @@protoc_insertion_point(field_get:TxMsgReq.txEncodeHash)
  return _internal_txencodehash();
}
inline void TxMsgReq::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:TxMsgReq.txEncodeHash)
}
inline std::string* TxMsgReq::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:TxMsgReq.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& TxMsgReq::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void TxMsgReq::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgReq::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgReq.txEncodeHash)
}
inline void TxMsgReq::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgReq.txEncodeHash)
}
inline void TxMsgReq::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgReq.txEncodeHash)
}
inline std::string* TxMsgReq::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgReq::release_txencodehash() {
  // @@protoc_insertion_point(field_release:TxMsgReq.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgReq::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:TxMsgReq.txEncodeHash)
}

// -------------------------------------------------------------------

// TxMsgAck

// string version = 1;
inline void TxMsgAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgAck::version() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.version)
  return _internal_version();
}
inline void TxMsgAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TxMsgAck.version)
}
inline std::string* TxMsgAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TxMsgAck.version)
  return _internal_mutable_version();
}
inline const std::string& TxMsgAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void TxMsgAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgAck.version)
}
inline void TxMsgAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgAck.version)
}
inline void TxMsgAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgAck.version)
}
inline std::string* TxMsgAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgAck::release_version() {
  // @@protoc_insertion_point(field_release:TxMsgAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TxMsgAck.version)
}

// int32 code = 2;
inline void TxMsgAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMsgAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMsgAck::code() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.code)
  return _internal_code();
}
inline void TxMsgAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void TxMsgAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:TxMsgAck.code)
}

// string message = 3;
inline void TxMsgAck::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgAck::message() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.message)
  return _internal_message();
}
inline void TxMsgAck::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:TxMsgAck.message)
}
inline std::string* TxMsgAck::mutable_message() {
  // @@protoc_insertion_point(field_mutable:TxMsgAck.message)
  return _internal_mutable_message();
}
inline const std::string& TxMsgAck::_internal_message() const {
  return message_.GetNoArena();
}
inline void TxMsgAck::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgAck::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgAck.message)
}
inline void TxMsgAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgAck.message)
}
inline void TxMsgAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgAck.message)
}
inline std::string* TxMsgAck::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgAck::release_message() {
  // @@protoc_insertion_point(field_release:TxMsgAck.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TxMsgAck.message)
}

// string txHash = 4;
inline void TxMsgAck::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsgAck::txhash() const {
  // @@protoc_insertion_point(field_get:TxMsgAck.txHash)
  return _internal_txhash();
}
inline void TxMsgAck::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:TxMsgAck.txHash)
}
inline std::string* TxMsgAck::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:TxMsgAck.txHash)
  return _internal_mutable_txhash();
}
inline const std::string& TxMsgAck::_internal_txhash() const {
  return txhash_.GetNoArena();
}
inline void TxMsgAck::_internal_set_txhash(const std::string& value) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsgAck::set_txhash(std::string&& value) {
  
  txhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsgAck.txHash)
}
inline void TxMsgAck::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsgAck.txHash)
}
inline void TxMsgAck::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsgAck.txHash)
}
inline std::string* TxMsgAck::_internal_mutable_txhash() {
  
  return txhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsgAck::release_txhash() {
  // @@protoc_insertion_point(field_release:TxMsgAck.txHash)
  
  return txhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsgAck::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:TxMsgAck.txHash)
}

// -------------------------------------------------------------------

// ToAddr

// string toAddr = 1;
inline void ToAddr::clear_toaddr() {
  toaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ToAddr::toaddr() const {
  // @@protoc_insertion_point(field_get:ToAddr.toAddr)
  return _internal_toaddr();
}
inline void ToAddr::set_toaddr(const std::string& value) {
  _internal_set_toaddr(value);
  // @@protoc_insertion_point(field_set:ToAddr.toAddr)
}
inline std::string* ToAddr::mutable_toaddr() {
  // @@protoc_insertion_point(field_mutable:ToAddr.toAddr)
  return _internal_mutable_toaddr();
}
inline const std::string& ToAddr::_internal_toaddr() const {
  return toaddr_.GetNoArena();
}
inline void ToAddr::_internal_set_toaddr(const std::string& value) {
  
  toaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ToAddr::set_toaddr(std::string&& value) {
  
  toaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ToAddr.toAddr)
}
inline void ToAddr::set_toaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  toaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ToAddr.toAddr)
}
inline void ToAddr::set_toaddr(const char* value, size_t size) {
  
  toaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ToAddr.toAddr)
}
inline std::string* ToAddr::_internal_mutable_toaddr() {
  
  return toaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ToAddr::release_toaddr() {
  // @@protoc_insertion_point(field_release:ToAddr.toAddr)
  
  return toaddr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ToAddr::set_allocated_toaddr(std::string* toaddr) {
  if (toaddr != nullptr) {
    
  } else {
    
  }
  toaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toaddr);
  // @@protoc_insertion_point(field_set_allocated:ToAddr.toAddr)
}

// string amt = 2;
inline void ToAddr::clear_amt() {
  amt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ToAddr::amt() const {
  // @@protoc_insertion_point(field_get:ToAddr.amt)
  return _internal_amt();
}
inline void ToAddr::set_amt(const std::string& value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:ToAddr.amt)
}
inline std::string* ToAddr::mutable_amt() {
  // @@protoc_insertion_point(field_mutable:ToAddr.amt)
  return _internal_mutable_amt();
}
inline const std::string& ToAddr::_internal_amt() const {
  return amt_.GetNoArena();
}
inline void ToAddr::_internal_set_amt(const std::string& value) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ToAddr::set_amt(std::string&& value) {
  
  amt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ToAddr.amt)
}
inline void ToAddr::set_amt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ToAddr.amt)
}
inline void ToAddr::set_amt(const char* value, size_t size) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ToAddr.amt)
}
inline std::string* ToAddr::_internal_mutable_amt() {
  
  return amt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ToAddr::release_amt() {
  // @@protoc_insertion_point(field_release:ToAddr.amt)
  
  return amt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ToAddr::set_allocated_amt(std::string* amt) {
  if (amt != nullptr) {
    
  } else {
    
  }
  amt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amt);
  // @@protoc_insertion_point(field_set_allocated:ToAddr.amt)
}

// -------------------------------------------------------------------

// CreateMultiTxMsgReq

// string version = 1;
inline void CreateMultiTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMultiTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgReq.version)
  return _internal_version();
}
inline void CreateMultiTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgReq.version)
}
inline std::string* CreateMultiTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreateMultiTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateMultiTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMultiTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateMultiTxMsgReq.version)
}
inline void CreateMultiTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgReq.version)
}
inline void CreateMultiTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgReq.version)
}
inline std::string* CreateMultiTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMultiTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:CreateMultiTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMultiTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateMultiTxMsgReq.version)
}

// repeated string from = 2;
inline int CreateMultiTxMsgReq::_internal_from_size() const {
  return from_.size();
}
inline int CreateMultiTxMsgReq::from_size() const {
  return _internal_from_size();
}
inline void CreateMultiTxMsgReq::clear_from() {
  from_.Clear();
}
inline std::string* CreateMultiTxMsgReq::add_from() {
  // @@protoc_insertion_point(field_add_mutable:CreateMultiTxMsgReq.from)
  return _internal_add_from();
}
inline const std::string& CreateMultiTxMsgReq::_internal_from(int index) const {
  return from_.Get(index);
}
inline const std::string& CreateMultiTxMsgReq::from(int index) const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgReq.from)
  return _internal_from(index);
}
inline std::string* CreateMultiTxMsgReq::mutable_from(int index) {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgReq.from)
  return from_.Mutable(index);
}
inline void CreateMultiTxMsgReq::set_from(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgReq.from)
  from_.Mutable(index)->assign(value);
}
inline void CreateMultiTxMsgReq::set_from(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgReq.from)
  from_.Mutable(index)->assign(std::move(value));
}
inline void CreateMultiTxMsgReq::set_from(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  from_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgReq.from)
}
inline void CreateMultiTxMsgReq::set_from(int index, const char* value, size_t size) {
  from_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgReq.from)
}
inline std::string* CreateMultiTxMsgReq::_internal_add_from() {
  return from_.Add();
}
inline void CreateMultiTxMsgReq::add_from(const std::string& value) {
  from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CreateMultiTxMsgReq.from)
}
inline void CreateMultiTxMsgReq::add_from(std::string&& value) {
  from_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CreateMultiTxMsgReq.from)
}
inline void CreateMultiTxMsgReq::add_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CreateMultiTxMsgReq.from)
}
inline void CreateMultiTxMsgReq::add_from(const char* value, size_t size) {
  from_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CreateMultiTxMsgReq.from)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateMultiTxMsgReq::from() const {
  // @@protoc_insertion_point(field_list:CreateMultiTxMsgReq.from)
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateMultiTxMsgReq::mutable_from() {
  // @@protoc_insertion_point(field_mutable_list:CreateMultiTxMsgReq.from)
  return &from_;
}

// repeated .ToAddr to = 3;
inline int CreateMultiTxMsgReq::_internal_to_size() const {
  return to_.size();
}
inline int CreateMultiTxMsgReq::to_size() const {
  return _internal_to_size();
}
inline void CreateMultiTxMsgReq::clear_to() {
  to_.Clear();
}
inline ::ToAddr* CreateMultiTxMsgReq::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgReq.to)
  return to_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >*
CreateMultiTxMsgReq::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:CreateMultiTxMsgReq.to)
  return &to_;
}
inline const ::ToAddr& CreateMultiTxMsgReq::_internal_to(int index) const {
  return to_.Get(index);
}
inline const ::ToAddr& CreateMultiTxMsgReq::to(int index) const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgReq.to)
  return _internal_to(index);
}
inline ::ToAddr* CreateMultiTxMsgReq::_internal_add_to() {
  return to_.Add();
}
inline ::ToAddr* CreateMultiTxMsgReq::add_to() {
  // @@protoc_insertion_point(field_add:CreateMultiTxMsgReq.to)
  return _internal_add_to();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >&
CreateMultiTxMsgReq::to() const {
  // @@protoc_insertion_point(field_list:CreateMultiTxMsgReq.to)
  return to_;
}

// string minerFees = 5;
inline void CreateMultiTxMsgReq::clear_minerfees() {
  minerfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMultiTxMsgReq::minerfees() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgReq.minerFees)
  return _internal_minerfees();
}
inline void CreateMultiTxMsgReq::set_minerfees(const std::string& value) {
  _internal_set_minerfees(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgReq.minerFees)
}
inline std::string* CreateMultiTxMsgReq::mutable_minerfees() {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgReq.minerFees)
  return _internal_mutable_minerfees();
}
inline const std::string& CreateMultiTxMsgReq::_internal_minerfees() const {
  return minerfees_.GetNoArena();
}
inline void CreateMultiTxMsgReq::_internal_set_minerfees(const std::string& value) {
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMultiTxMsgReq::set_minerfees(std::string&& value) {
  
  minerfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateMultiTxMsgReq.minerFees)
}
inline void CreateMultiTxMsgReq::set_minerfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgReq.minerFees)
}
inline void CreateMultiTxMsgReq::set_minerfees(const char* value, size_t size) {
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgReq.minerFees)
}
inline std::string* CreateMultiTxMsgReq::_internal_mutable_minerfees() {
  
  return minerfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMultiTxMsgReq::release_minerfees() {
  // @@protoc_insertion_point(field_release:CreateMultiTxMsgReq.minerFees)
  
  return minerfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMultiTxMsgReq::set_allocated_minerfees(std::string* minerfees) {
  if (minerfees != nullptr) {
    
  } else {
    
  }
  minerfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minerfees);
  // @@protoc_insertion_point(field_set_allocated:CreateMultiTxMsgReq.minerFees)
}

// string needVerifyPreHashCount = 6;
inline void CreateMultiTxMsgReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMultiTxMsgReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreateMultiTxMsgReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateMultiTxMsgReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreateMultiTxMsgReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreateMultiTxMsgReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMultiTxMsgReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateMultiTxMsgReq.needVerifyPreHashCount)
}
inline void CreateMultiTxMsgReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgReq.needVerifyPreHashCount)
}
inline void CreateMultiTxMsgReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateMultiTxMsgReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMultiTxMsgReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreateMultiTxMsgReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMultiTxMsgReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreateMultiTxMsgReq.needVerifyPreHashCount)
}

// -------------------------------------------------------------------

// CreateMultiTxMsgAck

// string version = 1;
inline void CreateMultiTxMsgAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMultiTxMsgAck::version() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgAck.version)
  return _internal_version();
}
inline void CreateMultiTxMsgAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgAck.version)
}
inline std::string* CreateMultiTxMsgAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgAck.version)
  return _internal_mutable_version();
}
inline const std::string& CreateMultiTxMsgAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateMultiTxMsgAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMultiTxMsgAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateMultiTxMsgAck.version)
}
inline void CreateMultiTxMsgAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgAck.version)
}
inline void CreateMultiTxMsgAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgAck.version)
}
inline std::string* CreateMultiTxMsgAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMultiTxMsgAck::release_version() {
  // @@protoc_insertion_point(field_release:CreateMultiTxMsgAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMultiTxMsgAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateMultiTxMsgAck.version)
}

// int32 code = 2;
inline void CreateMultiTxMsgAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMultiTxMsgAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMultiTxMsgAck::code() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgAck.code)
  return _internal_code();
}
inline void CreateMultiTxMsgAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CreateMultiTxMsgAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgAck.code)
}

// string message = 3;
inline void CreateMultiTxMsgAck::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMultiTxMsgAck::message() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgAck.message)
  return _internal_message();
}
inline void CreateMultiTxMsgAck::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgAck.message)
}
inline std::string* CreateMultiTxMsgAck::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgAck.message)
  return _internal_mutable_message();
}
inline const std::string& CreateMultiTxMsgAck::_internal_message() const {
  return message_.GetNoArena();
}
inline void CreateMultiTxMsgAck::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMultiTxMsgAck::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateMultiTxMsgAck.message)
}
inline void CreateMultiTxMsgAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgAck.message)
}
inline void CreateMultiTxMsgAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgAck.message)
}
inline std::string* CreateMultiTxMsgAck::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMultiTxMsgAck::release_message() {
  // @@protoc_insertion_point(field_release:CreateMultiTxMsgAck.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMultiTxMsgAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CreateMultiTxMsgAck.message)
}

// string txData = 4;
inline void CreateMultiTxMsgAck::clear_txdata() {
  txdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMultiTxMsgAck::txdata() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgAck.txData)
  return _internal_txdata();
}
inline void CreateMultiTxMsgAck::set_txdata(const std::string& value) {
  _internal_set_txdata(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgAck.txData)
}
inline std::string* CreateMultiTxMsgAck::mutable_txdata() {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgAck.txData)
  return _internal_mutable_txdata();
}
inline const std::string& CreateMultiTxMsgAck::_internal_txdata() const {
  return txdata_.GetNoArena();
}
inline void CreateMultiTxMsgAck::_internal_set_txdata(const std::string& value) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMultiTxMsgAck::set_txdata(std::string&& value) {
  
  txdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateMultiTxMsgAck.txData)
}
inline void CreateMultiTxMsgAck::set_txdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgAck.txData)
}
inline void CreateMultiTxMsgAck::set_txdata(const char* value, size_t size) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgAck.txData)
}
inline std::string* CreateMultiTxMsgAck::_internal_mutable_txdata() {
  
  return txdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMultiTxMsgAck::release_txdata() {
  // @@protoc_insertion_point(field_release:CreateMultiTxMsgAck.txData)
  
  return txdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMultiTxMsgAck::set_allocated_txdata(std::string* txdata) {
  if (txdata != nullptr) {
    
  } else {
    
  }
  txdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txdata);
  // @@protoc_insertion_point(field_set_allocated:CreateMultiTxMsgAck.txData)
}

// string txEncodeHash = 5;
inline void CreateMultiTxMsgAck::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateMultiTxMsgAck::txencodehash() const {
  // @@protoc_insertion_point(field_get:CreateMultiTxMsgAck.txEncodeHash)
  return _internal_txencodehash();
}
inline void CreateMultiTxMsgAck::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:CreateMultiTxMsgAck.txEncodeHash)
}
inline std::string* CreateMultiTxMsgAck::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:CreateMultiTxMsgAck.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& CreateMultiTxMsgAck::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void CreateMultiTxMsgAck::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateMultiTxMsgAck::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateMultiTxMsgAck.txEncodeHash)
}
inline void CreateMultiTxMsgAck::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateMultiTxMsgAck.txEncodeHash)
}
inline void CreateMultiTxMsgAck::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateMultiTxMsgAck.txEncodeHash)
}
inline std::string* CreateMultiTxMsgAck::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateMultiTxMsgAck::release_txencodehash() {
  // @@protoc_insertion_point(field_release:CreateMultiTxMsgAck.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateMultiTxMsgAck::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:CreateMultiTxMsgAck.txEncodeHash)
}

// -------------------------------------------------------------------

// SignInfo

// string signStr = 1;
inline void SignInfo::clear_signstr() {
  signstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignInfo::signstr() const {
  // @@protoc_insertion_point(field_get:SignInfo.signStr)
  return _internal_signstr();
}
inline void SignInfo::set_signstr(const std::string& value) {
  _internal_set_signstr(value);
  // @@protoc_insertion_point(field_set:SignInfo.signStr)
}
inline std::string* SignInfo::mutable_signstr() {
  // @@protoc_insertion_point(field_mutable:SignInfo.signStr)
  return _internal_mutable_signstr();
}
inline const std::string& SignInfo::_internal_signstr() const {
  return signstr_.GetNoArena();
}
inline void SignInfo::_internal_set_signstr(const std::string& value) {
  
  signstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignInfo::set_signstr(std::string&& value) {
  
  signstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignInfo.signStr)
}
inline void SignInfo::set_signstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignInfo.signStr)
}
inline void SignInfo::set_signstr(const char* value, size_t size) {
  
  signstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignInfo.signStr)
}
inline std::string* SignInfo::_internal_mutable_signstr() {
  
  return signstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignInfo::release_signstr() {
  // @@protoc_insertion_point(field_release:SignInfo.signStr)
  
  return signstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignInfo::set_allocated_signstr(std::string* signstr) {
  if (signstr != nullptr) {
    
  } else {
    
  }
  signstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signstr);
  // @@protoc_insertion_point(field_set_allocated:SignInfo.signStr)
}

// string pubStr = 2;
inline void SignInfo::clear_pubstr() {
  pubstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignInfo::pubstr() const {
  // @@protoc_insertion_point(field_get:SignInfo.pubStr)
  return _internal_pubstr();
}
inline void SignInfo::set_pubstr(const std::string& value) {
  _internal_set_pubstr(value);
  // @@protoc_insertion_point(field_set:SignInfo.pubStr)
}
inline std::string* SignInfo::mutable_pubstr() {
  // @@protoc_insertion_point(field_mutable:SignInfo.pubStr)
  return _internal_mutable_pubstr();
}
inline const std::string& SignInfo::_internal_pubstr() const {
  return pubstr_.GetNoArena();
}
inline void SignInfo::_internal_set_pubstr(const std::string& value) {
  
  pubstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignInfo::set_pubstr(std::string&& value) {
  
  pubstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignInfo.pubStr)
}
inline void SignInfo::set_pubstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignInfo.pubStr)
}
inline void SignInfo::set_pubstr(const char* value, size_t size) {
  
  pubstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignInfo.pubStr)
}
inline std::string* SignInfo::_internal_mutable_pubstr() {
  
  return pubstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignInfo::release_pubstr() {
  // @@protoc_insertion_point(field_release:SignInfo.pubStr)
  
  return pubstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignInfo::set_allocated_pubstr(std::string* pubstr) {
  if (pubstr != nullptr) {
    
  } else {
    
  }
  pubstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubstr);
  // @@protoc_insertion_point(field_set_allocated:SignInfo.pubStr)
}

// -------------------------------------------------------------------

// MultiTxMsgReq

// string version = 1;
inline void MultiTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MultiTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:MultiTxMsgReq.version)
  return _internal_version();
}
inline void MultiTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:MultiTxMsgReq.version)
}
inline std::string* MultiTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:MultiTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& MultiTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void MultiTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MultiTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MultiTxMsgReq.version)
}
inline void MultiTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MultiTxMsgReq.version)
}
inline void MultiTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MultiTxMsgReq.version)
}
inline std::string* MultiTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MultiTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:MultiTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MultiTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:MultiTxMsgReq.version)
}

// string serTx = 2;
inline void MultiTxMsgReq::clear_sertx() {
  sertx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MultiTxMsgReq::sertx() const {
  // @@protoc_insertion_point(field_get:MultiTxMsgReq.serTx)
  return _internal_sertx();
}
inline void MultiTxMsgReq::set_sertx(const std::string& value) {
  _internal_set_sertx(value);
  // @@protoc_insertion_point(field_set:MultiTxMsgReq.serTx)
}
inline std::string* MultiTxMsgReq::mutable_sertx() {
  // @@protoc_insertion_point(field_mutable:MultiTxMsgReq.serTx)
  return _internal_mutable_sertx();
}
inline const std::string& MultiTxMsgReq::_internal_sertx() const {
  return sertx_.GetNoArena();
}
inline void MultiTxMsgReq::_internal_set_sertx(const std::string& value) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MultiTxMsgReq::set_sertx(std::string&& value) {
  
  sertx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MultiTxMsgReq.serTx)
}
inline void MultiTxMsgReq::set_sertx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MultiTxMsgReq.serTx)
}
inline void MultiTxMsgReq::set_sertx(const char* value, size_t size) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MultiTxMsgReq.serTx)
}
inline std::string* MultiTxMsgReq::_internal_mutable_sertx() {
  
  return sertx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MultiTxMsgReq::release_sertx() {
  // @@protoc_insertion_point(field_release:MultiTxMsgReq.serTx)
  
  return sertx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MultiTxMsgReq::set_allocated_sertx(std::string* sertx) {
  if (sertx != nullptr) {
    
  } else {
    
  }
  sertx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sertx);
  // @@protoc_insertion_point(field_set_allocated:MultiTxMsgReq.serTx)
}

// repeated .SignInfo signInfo = 3;
inline int MultiTxMsgReq::_internal_signinfo_size() const {
  return signinfo_.size();
}
inline int MultiTxMsgReq::signinfo_size() const {
  return _internal_signinfo_size();
}
inline void MultiTxMsgReq::clear_signinfo() {
  signinfo_.Clear();
}
inline ::SignInfo* MultiTxMsgReq::mutable_signinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MultiTxMsgReq.signInfo)
  return signinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignInfo >*
MultiTxMsgReq::mutable_signinfo() {
  // @@protoc_insertion_point(field_mutable_list:MultiTxMsgReq.signInfo)
  return &signinfo_;
}
inline const ::SignInfo& MultiTxMsgReq::_internal_signinfo(int index) const {
  return signinfo_.Get(index);
}
inline const ::SignInfo& MultiTxMsgReq::signinfo(int index) const {
  // @@protoc_insertion_point(field_get:MultiTxMsgReq.signInfo)
  return _internal_signinfo(index);
}
inline ::SignInfo* MultiTxMsgReq::_internal_add_signinfo() {
  return signinfo_.Add();
}
inline ::SignInfo* MultiTxMsgReq::add_signinfo() {
  // @@protoc_insertion_point(field_add:MultiTxMsgReq.signInfo)
  return _internal_add_signinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignInfo >&
MultiTxMsgReq::signinfo() const {
  // @@protoc_insertion_point(field_list:MultiTxMsgReq.signInfo)
  return signinfo_;
}

// string txEncodeHash = 4;
inline void MultiTxMsgReq::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MultiTxMsgReq::txencodehash() const {
  // @@protoc_insertion_point(field_get:MultiTxMsgReq.txEncodeHash)
  return _internal_txencodehash();
}
inline void MultiTxMsgReq::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:MultiTxMsgReq.txEncodeHash)
}
inline std::string* MultiTxMsgReq::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:MultiTxMsgReq.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& MultiTxMsgReq::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void MultiTxMsgReq::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MultiTxMsgReq::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MultiTxMsgReq.txEncodeHash)
}
inline void MultiTxMsgReq::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MultiTxMsgReq.txEncodeHash)
}
inline void MultiTxMsgReq::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MultiTxMsgReq.txEncodeHash)
}
inline std::string* MultiTxMsgReq::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MultiTxMsgReq::release_txencodehash() {
  // @@protoc_insertion_point(field_release:MultiTxMsgReq.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MultiTxMsgReq::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:MultiTxMsgReq.txEncodeHash)
}

// -------------------------------------------------------------------

// VerifyDevicePasswordReq

// string version = 1;
inline void VerifyDevicePasswordReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyDevicePasswordReq::version() const {
  // @@protoc_insertion_point(field_get:VerifyDevicePasswordReq.version)
  return _internal_version();
}
inline void VerifyDevicePasswordReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:VerifyDevicePasswordReq.version)
}
inline std::string* VerifyDevicePasswordReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:VerifyDevicePasswordReq.version)
  return _internal_mutable_version();
}
inline const std::string& VerifyDevicePasswordReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void VerifyDevicePasswordReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyDevicePasswordReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerifyDevicePasswordReq.version)
}
inline void VerifyDevicePasswordReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerifyDevicePasswordReq.version)
}
inline void VerifyDevicePasswordReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerifyDevicePasswordReq.version)
}
inline std::string* VerifyDevicePasswordReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyDevicePasswordReq::release_version() {
  // @@protoc_insertion_point(field_release:VerifyDevicePasswordReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyDevicePasswordReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:VerifyDevicePasswordReq.version)
}

// string password = 2;
inline void VerifyDevicePasswordReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyDevicePasswordReq::password() const {
  // @@protoc_insertion_point(field_get:VerifyDevicePasswordReq.password)
  return _internal_password();
}
inline void VerifyDevicePasswordReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:VerifyDevicePasswordReq.password)
}
inline std::string* VerifyDevicePasswordReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:VerifyDevicePasswordReq.password)
  return _internal_mutable_password();
}
inline const std::string& VerifyDevicePasswordReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void VerifyDevicePasswordReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyDevicePasswordReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerifyDevicePasswordReq.password)
}
inline void VerifyDevicePasswordReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerifyDevicePasswordReq.password)
}
inline void VerifyDevicePasswordReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerifyDevicePasswordReq.password)
}
inline std::string* VerifyDevicePasswordReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyDevicePasswordReq::release_password() {
  // @@protoc_insertion_point(field_release:VerifyDevicePasswordReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyDevicePasswordReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:VerifyDevicePasswordReq.password)
}

// -------------------------------------------------------------------

// VerifyDevicePasswordAck

// string version = 1;
inline void VerifyDevicePasswordAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyDevicePasswordAck::version() const {
  // @@protoc_insertion_point(field_get:VerifyDevicePasswordAck.version)
  return _internal_version();
}
inline void VerifyDevicePasswordAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:VerifyDevicePasswordAck.version)
}
inline std::string* VerifyDevicePasswordAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:VerifyDevicePasswordAck.version)
  return _internal_mutable_version();
}
inline const std::string& VerifyDevicePasswordAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void VerifyDevicePasswordAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyDevicePasswordAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerifyDevicePasswordAck.version)
}
inline void VerifyDevicePasswordAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerifyDevicePasswordAck.version)
}
inline void VerifyDevicePasswordAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerifyDevicePasswordAck.version)
}
inline std::string* VerifyDevicePasswordAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyDevicePasswordAck::release_version() {
  // @@protoc_insertion_point(field_release:VerifyDevicePasswordAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyDevicePasswordAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:VerifyDevicePasswordAck.version)
}

// int32 code = 2;
inline void VerifyDevicePasswordAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyDevicePasswordAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VerifyDevicePasswordAck::code() const {
  // @@protoc_insertion_point(field_get:VerifyDevicePasswordAck.code)
  return _internal_code();
}
inline void VerifyDevicePasswordAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void VerifyDevicePasswordAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:VerifyDevicePasswordAck.code)
}

// string message = 3;
inline void VerifyDevicePasswordAck::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyDevicePasswordAck::message() const {
  // @@protoc_insertion_point(field_get:VerifyDevicePasswordAck.message)
  return _internal_message();
}
inline void VerifyDevicePasswordAck::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:VerifyDevicePasswordAck.message)
}
inline std::string* VerifyDevicePasswordAck::mutable_message() {
  // @@protoc_insertion_point(field_mutable:VerifyDevicePasswordAck.message)
  return _internal_mutable_message();
}
inline const std::string& VerifyDevicePasswordAck::_internal_message() const {
  return message_.GetNoArena();
}
inline void VerifyDevicePasswordAck::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyDevicePasswordAck::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerifyDevicePasswordAck.message)
}
inline void VerifyDevicePasswordAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerifyDevicePasswordAck.message)
}
inline void VerifyDevicePasswordAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerifyDevicePasswordAck.message)
}
inline std::string* VerifyDevicePasswordAck::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyDevicePasswordAck::release_message() {
  // @@protoc_insertion_point(field_release:VerifyDevicePasswordAck.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyDevicePasswordAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:VerifyDevicePasswordAck.message)
}

// -------------------------------------------------------------------

// CreateDeviceTxMsgReq

// string version = 1;
inline void CreateDeviceTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:CreateDeviceTxMsgReq.version)
  return _internal_version();
}
inline void CreateDeviceTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateDeviceTxMsgReq.version)
}
inline std::string* CreateDeviceTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreateDeviceTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateDeviceTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceTxMsgReq.version)
}
inline void CreateDeviceTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceTxMsgReq.version)
}
inline void CreateDeviceTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceTxMsgReq.version)
}
inline std::string* CreateDeviceTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:CreateDeviceTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceTxMsgReq.version)
}

// string from = 2;
inline void CreateDeviceTxMsgReq::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceTxMsgReq::from() const {
  // @@protoc_insertion_point(field_get:CreateDeviceTxMsgReq.from)
  return _internal_from();
}
inline void CreateDeviceTxMsgReq::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:CreateDeviceTxMsgReq.from)
}
inline std::string* CreateDeviceTxMsgReq::mutable_from() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceTxMsgReq.from)
  return _internal_mutable_from();
}
inline const std::string& CreateDeviceTxMsgReq::_internal_from() const {
  return from_.GetNoArena();
}
inline void CreateDeviceTxMsgReq::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceTxMsgReq::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceTxMsgReq.from)
}
inline void CreateDeviceTxMsgReq::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceTxMsgReq.from)
}
inline void CreateDeviceTxMsgReq::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceTxMsgReq.from)
}
inline std::string* CreateDeviceTxMsgReq::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceTxMsgReq::release_from() {
  // @@protoc_insertion_point(field_release:CreateDeviceTxMsgReq.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceTxMsgReq::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceTxMsgReq.from)
}

// string to = 3;
inline void CreateDeviceTxMsgReq::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceTxMsgReq::to() const {
  // @@protoc_insertion_point(field_get:CreateDeviceTxMsgReq.to)
  return _internal_to();
}
inline void CreateDeviceTxMsgReq::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:CreateDeviceTxMsgReq.to)
}
inline std::string* CreateDeviceTxMsgReq::mutable_to() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceTxMsgReq.to)
  return _internal_mutable_to();
}
inline const std::string& CreateDeviceTxMsgReq::_internal_to() const {
  return to_.GetNoArena();
}
inline void CreateDeviceTxMsgReq::_internal_set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceTxMsgReq::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceTxMsgReq.to)
}
inline void CreateDeviceTxMsgReq::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceTxMsgReq.to)
}
inline void CreateDeviceTxMsgReq::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceTxMsgReq.to)
}
inline std::string* CreateDeviceTxMsgReq::_internal_mutable_to() {
  
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceTxMsgReq::release_to() {
  // @@protoc_insertion_point(field_release:CreateDeviceTxMsgReq.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceTxMsgReq::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceTxMsgReq.to)
}

// string amt = 4;
inline void CreateDeviceTxMsgReq::clear_amt() {
  amt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceTxMsgReq::amt() const {
  // @@protoc_insertion_point(field_get:CreateDeviceTxMsgReq.amt)
  return _internal_amt();
}
inline void CreateDeviceTxMsgReq::set_amt(const std::string& value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:CreateDeviceTxMsgReq.amt)
}
inline std::string* CreateDeviceTxMsgReq::mutable_amt() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceTxMsgReq.amt)
  return _internal_mutable_amt();
}
inline const std::string& CreateDeviceTxMsgReq::_internal_amt() const {
  return amt_.GetNoArena();
}
inline void CreateDeviceTxMsgReq::_internal_set_amt(const std::string& value) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceTxMsgReq::set_amt(std::string&& value) {
  
  amt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceTxMsgReq.amt)
}
inline void CreateDeviceTxMsgReq::set_amt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceTxMsgReq.amt)
}
inline void CreateDeviceTxMsgReq::set_amt(const char* value, size_t size) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceTxMsgReq.amt)
}
inline std::string* CreateDeviceTxMsgReq::_internal_mutable_amt() {
  
  return amt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceTxMsgReq::release_amt() {
  // @@protoc_insertion_point(field_release:CreateDeviceTxMsgReq.amt)
  
  return amt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceTxMsgReq::set_allocated_amt(std::string* amt) {
  if (amt != nullptr) {
    
  } else {
    
  }
  amt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amt);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceTxMsgReq.amt)
}

// string minerFees = 5;
inline void CreateDeviceTxMsgReq::clear_minerfees() {
  minerfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceTxMsgReq::minerfees() const {
  // @@protoc_insertion_point(field_get:CreateDeviceTxMsgReq.minerFees)
  return _internal_minerfees();
}
inline void CreateDeviceTxMsgReq::set_minerfees(const std::string& value) {
  _internal_set_minerfees(value);
  // @@protoc_insertion_point(field_set:CreateDeviceTxMsgReq.minerFees)
}
inline std::string* CreateDeviceTxMsgReq::mutable_minerfees() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceTxMsgReq.minerFees)
  return _internal_mutable_minerfees();
}
inline const std::string& CreateDeviceTxMsgReq::_internal_minerfees() const {
  return minerfees_.GetNoArena();
}
inline void CreateDeviceTxMsgReq::_internal_set_minerfees(const std::string& value) {
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceTxMsgReq::set_minerfees(std::string&& value) {
  
  minerfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceTxMsgReq.minerFees)
}
inline void CreateDeviceTxMsgReq::set_minerfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceTxMsgReq.minerFees)
}
inline void CreateDeviceTxMsgReq::set_minerfees(const char* value, size_t size) {
  
  minerfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceTxMsgReq.minerFees)
}
inline std::string* CreateDeviceTxMsgReq::_internal_mutable_minerfees() {
  
  return minerfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceTxMsgReq::release_minerfees() {
  // @@protoc_insertion_point(field_release:CreateDeviceTxMsgReq.minerFees)
  
  return minerfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceTxMsgReq::set_allocated_minerfees(std::string* minerfees) {
  if (minerfees != nullptr) {
    
  } else {
    
  }
  minerfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minerfees);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceTxMsgReq.minerFees)
}

// string needVerifyPreHashCount = 6;
inline void CreateDeviceTxMsgReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceTxMsgReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreateDeviceTxMsgReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreateDeviceTxMsgReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreateDeviceTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateDeviceTxMsgReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceTxMsgReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreateDeviceTxMsgReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreateDeviceTxMsgReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceTxMsgReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceTxMsgReq.needVerifyPreHashCount)
}
inline void CreateDeviceTxMsgReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceTxMsgReq.needVerifyPreHashCount)
}
inline void CreateDeviceTxMsgReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateDeviceTxMsgReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceTxMsgReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreateDeviceTxMsgReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceTxMsgReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceTxMsgReq.needVerifyPreHashCount)
}

// string password = 7;
inline void CreateDeviceTxMsgReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceTxMsgReq::password() const {
  // @@protoc_insertion_point(field_get:CreateDeviceTxMsgReq.password)
  return _internal_password();
}
inline void CreateDeviceTxMsgReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CreateDeviceTxMsgReq.password)
}
inline std::string* CreateDeviceTxMsgReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceTxMsgReq.password)
  return _internal_mutable_password();
}
inline const std::string& CreateDeviceTxMsgReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void CreateDeviceTxMsgReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceTxMsgReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceTxMsgReq.password)
}
inline void CreateDeviceTxMsgReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceTxMsgReq.password)
}
inline void CreateDeviceTxMsgReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceTxMsgReq.password)
}
inline std::string* CreateDeviceTxMsgReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceTxMsgReq::release_password() {
  // @@protoc_insertion_point(field_release:CreateDeviceTxMsgReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceTxMsgReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceTxMsgReq.password)
}

// -------------------------------------------------------------------

// CreateDeviceMultiTxMsgReq

// string version = 1;
inline void CreateDeviceMultiTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceMultiTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:CreateDeviceMultiTxMsgReq.version)
  return _internal_version();
}
inline void CreateDeviceMultiTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateDeviceMultiTxMsgReq.version)
}
inline std::string* CreateDeviceMultiTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceMultiTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreateDeviceMultiTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateDeviceMultiTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceMultiTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceMultiTxMsgReq.version)
}
inline void CreateDeviceMultiTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceMultiTxMsgReq.version)
}
inline void CreateDeviceMultiTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceMultiTxMsgReq.version)
}
inline std::string* CreateDeviceMultiTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceMultiTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:CreateDeviceMultiTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceMultiTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceMultiTxMsgReq.version)
}

// repeated string from = 2;
inline int CreateDeviceMultiTxMsgReq::_internal_from_size() const {
  return from_.size();
}
inline int CreateDeviceMultiTxMsgReq::from_size() const {
  return _internal_from_size();
}
inline void CreateDeviceMultiTxMsgReq::clear_from() {
  from_.Clear();
}
inline std::string* CreateDeviceMultiTxMsgReq::add_from() {
  // @@protoc_insertion_point(field_add_mutable:CreateDeviceMultiTxMsgReq.from)
  return _internal_add_from();
}
inline const std::string& CreateDeviceMultiTxMsgReq::_internal_from(int index) const {
  return from_.Get(index);
}
inline const std::string& CreateDeviceMultiTxMsgReq::from(int index) const {
  // @@protoc_insertion_point(field_get:CreateDeviceMultiTxMsgReq.from)
  return _internal_from(index);
}
inline std::string* CreateDeviceMultiTxMsgReq::mutable_from(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDeviceMultiTxMsgReq.from)
  return from_.Mutable(index);
}
inline void CreateDeviceMultiTxMsgReq::set_from(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CreateDeviceMultiTxMsgReq.from)
  from_.Mutable(index)->assign(value);
}
inline void CreateDeviceMultiTxMsgReq::set_from(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CreateDeviceMultiTxMsgReq.from)
  from_.Mutable(index)->assign(std::move(value));
}
inline void CreateDeviceMultiTxMsgReq::set_from(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  from_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CreateDeviceMultiTxMsgReq.from)
}
inline void CreateDeviceMultiTxMsgReq::set_from(int index, const char* value, size_t size) {
  from_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceMultiTxMsgReq.from)
}
inline std::string* CreateDeviceMultiTxMsgReq::_internal_add_from() {
  return from_.Add();
}
inline void CreateDeviceMultiTxMsgReq::add_from(const std::string& value) {
  from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CreateDeviceMultiTxMsgReq.from)
}
inline void CreateDeviceMultiTxMsgReq::add_from(std::string&& value) {
  from_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CreateDeviceMultiTxMsgReq.from)
}
inline void CreateDeviceMultiTxMsgReq::add_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  from_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CreateDeviceMultiTxMsgReq.from)
}
inline void CreateDeviceMultiTxMsgReq::add_from(const char* value, size_t size) {
  from_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CreateDeviceMultiTxMsgReq.from)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDeviceMultiTxMsgReq::from() const {
  // @@protoc_insertion_point(field_list:CreateDeviceMultiTxMsgReq.from)
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDeviceMultiTxMsgReq::mutable_from() {
  // @@protoc_insertion_point(field_mutable_list:CreateDeviceMultiTxMsgReq.from)
  return &from_;
}

// repeated .ToAddr to = 3;
inline int CreateDeviceMultiTxMsgReq::_internal_to_size() const {
  return to_.size();
}
inline int CreateDeviceMultiTxMsgReq::to_size() const {
  return _internal_to_size();
}
inline void CreateDeviceMultiTxMsgReq::clear_to() {
  to_.Clear();
}
inline ::ToAddr* CreateDeviceMultiTxMsgReq::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:CreateDeviceMultiTxMsgReq.to)
  return to_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >*
CreateDeviceMultiTxMsgReq::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:CreateDeviceMultiTxMsgReq.to)
  return &to_;
}
inline const ::ToAddr& CreateDeviceMultiTxMsgReq::_internal_to(int index) const {
  return to_.Get(index);
}
inline const ::ToAddr& CreateDeviceMultiTxMsgReq::to(int index) const {
  // @@protoc_insertion_point(field_get:CreateDeviceMultiTxMsgReq.to)
  return _internal_to(index);
}
inline ::ToAddr* CreateDeviceMultiTxMsgReq::_internal_add_to() {
  return to_.Add();
}
inline ::ToAddr* CreateDeviceMultiTxMsgReq::add_to() {
  // @@protoc_insertion_point(field_add:CreateDeviceMultiTxMsgReq.to)
  return _internal_add_to();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >&
CreateDeviceMultiTxMsgReq::to() const {
  // @@protoc_insertion_point(field_list:CreateDeviceMultiTxMsgReq.to)
  return to_;
}

// string gasFees = 4;
inline void CreateDeviceMultiTxMsgReq::clear_gasfees() {
  gasfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceMultiTxMsgReq::gasfees() const {
  // @@protoc_insertion_point(field_get:CreateDeviceMultiTxMsgReq.gasFees)
  return _internal_gasfees();
}
inline void CreateDeviceMultiTxMsgReq::set_gasfees(const std::string& value) {
  _internal_set_gasfees(value);
  // @@protoc_insertion_point(field_set:CreateDeviceMultiTxMsgReq.gasFees)
}
inline std::string* CreateDeviceMultiTxMsgReq::mutable_gasfees() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceMultiTxMsgReq.gasFees)
  return _internal_mutable_gasfees();
}
inline const std::string& CreateDeviceMultiTxMsgReq::_internal_gasfees() const {
  return gasfees_.GetNoArena();
}
inline void CreateDeviceMultiTxMsgReq::_internal_set_gasfees(const std::string& value) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceMultiTxMsgReq::set_gasfees(std::string&& value) {
  
  gasfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceMultiTxMsgReq.gasFees)
}
inline void CreateDeviceMultiTxMsgReq::set_gasfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceMultiTxMsgReq.gasFees)
}
inline void CreateDeviceMultiTxMsgReq::set_gasfees(const char* value, size_t size) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceMultiTxMsgReq.gasFees)
}
inline std::string* CreateDeviceMultiTxMsgReq::_internal_mutable_gasfees() {
  
  return gasfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceMultiTxMsgReq::release_gasfees() {
  // @@protoc_insertion_point(field_release:CreateDeviceMultiTxMsgReq.gasFees)
  
  return gasfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceMultiTxMsgReq::set_allocated_gasfees(std::string* gasfees) {
  if (gasfees != nullptr) {
    
  } else {
    
  }
  gasfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasfees);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceMultiTxMsgReq.gasFees)
}

// string needVerifyPreHashCount = 5;
inline void CreateDeviceMultiTxMsgReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceMultiTxMsgReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreateDeviceMultiTxMsgReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateDeviceMultiTxMsgReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreateDeviceMultiTxMsgReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreateDeviceMultiTxMsgReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceMultiTxMsgReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
}
inline void CreateDeviceMultiTxMsgReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
}
inline void CreateDeviceMultiTxMsgReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateDeviceMultiTxMsgReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceMultiTxMsgReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceMultiTxMsgReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceMultiTxMsgReq.needVerifyPreHashCount)
}

// string password = 6;
inline void CreateDeviceMultiTxMsgReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceMultiTxMsgReq::password() const {
  // @@protoc_insertion_point(field_get:CreateDeviceMultiTxMsgReq.password)
  return _internal_password();
}
inline void CreateDeviceMultiTxMsgReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CreateDeviceMultiTxMsgReq.password)
}
inline std::string* CreateDeviceMultiTxMsgReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceMultiTxMsgReq.password)
  return _internal_mutable_password();
}
inline const std::string& CreateDeviceMultiTxMsgReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void CreateDeviceMultiTxMsgReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceMultiTxMsgReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceMultiTxMsgReq.password)
}
inline void CreateDeviceMultiTxMsgReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceMultiTxMsgReq.password)
}
inline void CreateDeviceMultiTxMsgReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceMultiTxMsgReq.password)
}
inline std::string* CreateDeviceMultiTxMsgReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceMultiTxMsgReq::release_password() {
  // @@protoc_insertion_point(field_release:CreateDeviceMultiTxMsgReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceMultiTxMsgReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceMultiTxMsgReq.password)
}

// -------------------------------------------------------------------

// CreatePledgeTxMsgReq

// string version = 1;
inline void CreatePledgeTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgReq.version)
  return _internal_version();
}
inline void CreatePledgeTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgReq.version)
}
inline std::string* CreatePledgeTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreatePledgeTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreatePledgeTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgReq.version)
}
inline void CreatePledgeTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgReq.version)
}
inline void CreatePledgeTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgReq.version)
}
inline std::string* CreatePledgeTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgReq.version)
}

// string addr = 2;
inline void CreatePledgeTxMsgReq::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgReq::addr() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgReq.addr)
  return _internal_addr();
}
inline void CreatePledgeTxMsgReq::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgReq.addr)
}
inline std::string* CreatePledgeTxMsgReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgReq.addr)
  return _internal_mutable_addr();
}
inline const std::string& CreatePledgeTxMsgReq::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void CreatePledgeTxMsgReq::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgReq::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgReq.addr)
}
inline void CreatePledgeTxMsgReq::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgReq.addr)
}
inline void CreatePledgeTxMsgReq::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgReq.addr)
}
inline std::string* CreatePledgeTxMsgReq::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgReq::release_addr() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgReq.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgReq.addr)
}

// string amt = 3;
inline void CreatePledgeTxMsgReq::clear_amt() {
  amt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgReq::amt() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgReq.amt)
  return _internal_amt();
}
inline void CreatePledgeTxMsgReq::set_amt(const std::string& value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgReq.amt)
}
inline std::string* CreatePledgeTxMsgReq::mutable_amt() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgReq.amt)
  return _internal_mutable_amt();
}
inline const std::string& CreatePledgeTxMsgReq::_internal_amt() const {
  return amt_.GetNoArena();
}
inline void CreatePledgeTxMsgReq::_internal_set_amt(const std::string& value) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgReq::set_amt(std::string&& value) {
  
  amt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgReq.amt)
}
inline void CreatePledgeTxMsgReq::set_amt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgReq.amt)
}
inline void CreatePledgeTxMsgReq::set_amt(const char* value, size_t size) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgReq.amt)
}
inline std::string* CreatePledgeTxMsgReq::_internal_mutable_amt() {
  
  return amt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgReq::release_amt() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgReq.amt)
  
  return amt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgReq::set_allocated_amt(std::string* amt) {
  if (amt != nullptr) {
    
  } else {
    
  }
  amt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amt);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgReq.amt)
}

// string needVerifyPreHashCount = 4;
inline void CreatePledgeTxMsgReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreatePledgeTxMsgReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreatePledgeTxMsgReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreatePledgeTxMsgReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreatePledgeTxMsgReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgReq.needVerifyPreHashCount)
}
inline void CreatePledgeTxMsgReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgReq.needVerifyPreHashCount)
}
inline void CreatePledgeTxMsgReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreatePledgeTxMsgReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgReq.needVerifyPreHashCount)
}

// string gasFees = 5;
inline void CreatePledgeTxMsgReq::clear_gasfees() {
  gasfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgReq::gasfees() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgReq.gasFees)
  return _internal_gasfees();
}
inline void CreatePledgeTxMsgReq::set_gasfees(const std::string& value) {
  _internal_set_gasfees(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgReq.gasFees)
}
inline std::string* CreatePledgeTxMsgReq::mutable_gasfees() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgReq.gasFees)
  return _internal_mutable_gasfees();
}
inline const std::string& CreatePledgeTxMsgReq::_internal_gasfees() const {
  return gasfees_.GetNoArena();
}
inline void CreatePledgeTxMsgReq::_internal_set_gasfees(const std::string& value) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgReq::set_gasfees(std::string&& value) {
  
  gasfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgReq.gasFees)
}
inline void CreatePledgeTxMsgReq::set_gasfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgReq.gasFees)
}
inline void CreatePledgeTxMsgReq::set_gasfees(const char* value, size_t size) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgReq.gasFees)
}
inline std::string* CreatePledgeTxMsgReq::_internal_mutable_gasfees() {
  
  return gasfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgReq::release_gasfees() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgReq.gasFees)
  
  return gasfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgReq::set_allocated_gasfees(std::string* gasfees) {
  if (gasfees != nullptr) {
    
  } else {
    
  }
  gasfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasfees);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgReq.gasFees)
}

// -------------------------------------------------------------------

// CreatePledgeTxMsgAck

// string version = 1;
inline void CreatePledgeTxMsgAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgAck::version() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgAck.version)
  return _internal_version();
}
inline void CreatePledgeTxMsgAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgAck.version)
}
inline std::string* CreatePledgeTxMsgAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgAck.version)
  return _internal_mutable_version();
}
inline const std::string& CreatePledgeTxMsgAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreatePledgeTxMsgAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgAck.version)
}
inline void CreatePledgeTxMsgAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgAck.version)
}
inline void CreatePledgeTxMsgAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgAck.version)
}
inline std::string* CreatePledgeTxMsgAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgAck::release_version() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgAck.version)
}

// int32 code = 2;
inline void CreatePledgeTxMsgAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePledgeTxMsgAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreatePledgeTxMsgAck::code() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgAck.code)
  return _internal_code();
}
inline void CreatePledgeTxMsgAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CreatePledgeTxMsgAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgAck.code)
}

// string description = 3;
inline void CreatePledgeTxMsgAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgAck::description() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgAck.description)
  return _internal_description();
}
inline void CreatePledgeTxMsgAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgAck.description)
}
inline std::string* CreatePledgeTxMsgAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgAck.description)
  return _internal_mutable_description();
}
inline const std::string& CreatePledgeTxMsgAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void CreatePledgeTxMsgAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgAck.description)
}
inline void CreatePledgeTxMsgAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgAck.description)
}
inline void CreatePledgeTxMsgAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgAck.description)
}
inline std::string* CreatePledgeTxMsgAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgAck::release_description() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgAck.description)
}

// string txData = 4;
inline void CreatePledgeTxMsgAck::clear_txdata() {
  txdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgAck::txdata() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgAck.txData)
  return _internal_txdata();
}
inline void CreatePledgeTxMsgAck::set_txdata(const std::string& value) {
  _internal_set_txdata(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgAck.txData)
}
inline std::string* CreatePledgeTxMsgAck::mutable_txdata() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgAck.txData)
  return _internal_mutable_txdata();
}
inline const std::string& CreatePledgeTxMsgAck::_internal_txdata() const {
  return txdata_.GetNoArena();
}
inline void CreatePledgeTxMsgAck::_internal_set_txdata(const std::string& value) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgAck::set_txdata(std::string&& value) {
  
  txdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgAck.txData)
}
inline void CreatePledgeTxMsgAck::set_txdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgAck.txData)
}
inline void CreatePledgeTxMsgAck::set_txdata(const char* value, size_t size) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgAck.txData)
}
inline std::string* CreatePledgeTxMsgAck::_internal_mutable_txdata() {
  
  return txdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgAck::release_txdata() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgAck.txData)
  
  return txdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgAck::set_allocated_txdata(std::string* txdata) {
  if (txdata != nullptr) {
    
  } else {
    
  }
  txdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txdata);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgAck.txData)
}

// string txEncodeHash = 5;
inline void CreatePledgeTxMsgAck::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreatePledgeTxMsgAck::txencodehash() const {
  // @@protoc_insertion_point(field_get:CreatePledgeTxMsgAck.txEncodeHash)
  return _internal_txencodehash();
}
inline void CreatePledgeTxMsgAck::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:CreatePledgeTxMsgAck.txEncodeHash)
}
inline std::string* CreatePledgeTxMsgAck::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:CreatePledgeTxMsgAck.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& CreatePledgeTxMsgAck::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void CreatePledgeTxMsgAck::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreatePledgeTxMsgAck::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreatePledgeTxMsgAck.txEncodeHash)
}
inline void CreatePledgeTxMsgAck::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreatePledgeTxMsgAck.txEncodeHash)
}
inline void CreatePledgeTxMsgAck::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreatePledgeTxMsgAck.txEncodeHash)
}
inline std::string* CreatePledgeTxMsgAck::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreatePledgeTxMsgAck::release_txencodehash() {
  // @@protoc_insertion_point(field_release:CreatePledgeTxMsgAck.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreatePledgeTxMsgAck::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:CreatePledgeTxMsgAck.txEncodeHash)
}

// -------------------------------------------------------------------

// PledgeTxMsgReq

// string version = 1;
inline void PledgeTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:PledgeTxMsgReq.version)
  return _internal_version();
}
inline void PledgeTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:PledgeTxMsgReq.version)
}
inline std::string* PledgeTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:PledgeTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& PledgeTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void PledgeTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeTxMsgReq.version)
}
inline void PledgeTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeTxMsgReq.version)
}
inline void PledgeTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeTxMsgReq.version)
}
inline std::string* PledgeTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:PledgeTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:PledgeTxMsgReq.version)
}

// string serTx = 2;
inline void PledgeTxMsgReq::clear_sertx() {
  sertx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeTxMsgReq::sertx() const {
  // @@protoc_insertion_point(field_get:PledgeTxMsgReq.serTx)
  return _internal_sertx();
}
inline void PledgeTxMsgReq::set_sertx(const std::string& value) {
  _internal_set_sertx(value);
  // @@protoc_insertion_point(field_set:PledgeTxMsgReq.serTx)
}
inline std::string* PledgeTxMsgReq::mutable_sertx() {
  // @@protoc_insertion_point(field_mutable:PledgeTxMsgReq.serTx)
  return _internal_mutable_sertx();
}
inline const std::string& PledgeTxMsgReq::_internal_sertx() const {
  return sertx_.GetNoArena();
}
inline void PledgeTxMsgReq::_internal_set_sertx(const std::string& value) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeTxMsgReq::set_sertx(std::string&& value) {
  
  sertx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeTxMsgReq.serTx)
}
inline void PledgeTxMsgReq::set_sertx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeTxMsgReq.serTx)
}
inline void PledgeTxMsgReq::set_sertx(const char* value, size_t size) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeTxMsgReq.serTx)
}
inline std::string* PledgeTxMsgReq::_internal_mutable_sertx() {
  
  return sertx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeTxMsgReq::release_sertx() {
  // @@protoc_insertion_point(field_release:PledgeTxMsgReq.serTx)
  
  return sertx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeTxMsgReq::set_allocated_sertx(std::string* sertx) {
  if (sertx != nullptr) {
    
  } else {
    
  }
  sertx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sertx);
  // @@protoc_insertion_point(field_set_allocated:PledgeTxMsgReq.serTx)
}

// string strSignature = 3;
inline void PledgeTxMsgReq::clear_strsignature() {
  strsignature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeTxMsgReq::strsignature() const {
  // @@protoc_insertion_point(field_get:PledgeTxMsgReq.strSignature)
  return _internal_strsignature();
}
inline void PledgeTxMsgReq::set_strsignature(const std::string& value) {
  _internal_set_strsignature(value);
  // @@protoc_insertion_point(field_set:PledgeTxMsgReq.strSignature)
}
inline std::string* PledgeTxMsgReq::mutable_strsignature() {
  // @@protoc_insertion_point(field_mutable:PledgeTxMsgReq.strSignature)
  return _internal_mutable_strsignature();
}
inline const std::string& PledgeTxMsgReq::_internal_strsignature() const {
  return strsignature_.GetNoArena();
}
inline void PledgeTxMsgReq::_internal_set_strsignature(const std::string& value) {
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeTxMsgReq::set_strsignature(std::string&& value) {
  
  strsignature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeTxMsgReq.strSignature)
}
inline void PledgeTxMsgReq::set_strsignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeTxMsgReq.strSignature)
}
inline void PledgeTxMsgReq::set_strsignature(const char* value, size_t size) {
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeTxMsgReq.strSignature)
}
inline std::string* PledgeTxMsgReq::_internal_mutable_strsignature() {
  
  return strsignature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeTxMsgReq::release_strsignature() {
  // @@protoc_insertion_point(field_release:PledgeTxMsgReq.strSignature)
  
  return strsignature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeTxMsgReq::set_allocated_strsignature(std::string* strsignature) {
  if (strsignature != nullptr) {
    
  } else {
    
  }
  strsignature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strsignature);
  // @@protoc_insertion_point(field_set_allocated:PledgeTxMsgReq.strSignature)
}

// string strPub = 4;
inline void PledgeTxMsgReq::clear_strpub() {
  strpub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeTxMsgReq::strpub() const {
  // @@protoc_insertion_point(field_get:PledgeTxMsgReq.strPub)
  return _internal_strpub();
}
inline void PledgeTxMsgReq::set_strpub(const std::string& value) {
  _internal_set_strpub(value);
  // @@protoc_insertion_point(field_set:PledgeTxMsgReq.strPub)
}
inline std::string* PledgeTxMsgReq::mutable_strpub() {
  // @@protoc_insertion_point(field_mutable:PledgeTxMsgReq.strPub)
  return _internal_mutable_strpub();
}
inline const std::string& PledgeTxMsgReq::_internal_strpub() const {
  return strpub_.GetNoArena();
}
inline void PledgeTxMsgReq::_internal_set_strpub(const std::string& value) {
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeTxMsgReq::set_strpub(std::string&& value) {
  
  strpub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeTxMsgReq.strPub)
}
inline void PledgeTxMsgReq::set_strpub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeTxMsgReq.strPub)
}
inline void PledgeTxMsgReq::set_strpub(const char* value, size_t size) {
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeTxMsgReq.strPub)
}
inline std::string* PledgeTxMsgReq::_internal_mutable_strpub() {
  
  return strpub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeTxMsgReq::release_strpub() {
  // @@protoc_insertion_point(field_release:PledgeTxMsgReq.strPub)
  
  return strpub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeTxMsgReq::set_allocated_strpub(std::string* strpub) {
  if (strpub != nullptr) {
    
  } else {
    
  }
  strpub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strpub);
  // @@protoc_insertion_point(field_set_allocated:PledgeTxMsgReq.strPub)
}

// string txEncodeHash = 5;
inline void PledgeTxMsgReq::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeTxMsgReq::txencodehash() const {
  // @@protoc_insertion_point(field_get:PledgeTxMsgReq.txEncodeHash)
  return _internal_txencodehash();
}
inline void PledgeTxMsgReq::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:PledgeTxMsgReq.txEncodeHash)
}
inline std::string* PledgeTxMsgReq::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:PledgeTxMsgReq.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& PledgeTxMsgReq::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void PledgeTxMsgReq::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeTxMsgReq::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeTxMsgReq.txEncodeHash)
}
inline void PledgeTxMsgReq::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeTxMsgReq.txEncodeHash)
}
inline void PledgeTxMsgReq::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeTxMsgReq.txEncodeHash)
}
inline std::string* PledgeTxMsgReq::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeTxMsgReq::release_txencodehash() {
  // @@protoc_insertion_point(field_release:PledgeTxMsgReq.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeTxMsgReq::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:PledgeTxMsgReq.txEncodeHash)
}

// -------------------------------------------------------------------

// CreateRedeemTxMsgReq

// string version = 1;
inline void CreateRedeemTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgReq.version)
  return _internal_version();
}
inline void CreateRedeemTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgReq.version)
}
inline std::string* CreateRedeemTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreateRedeemTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateRedeemTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgReq.version)
}
inline void CreateRedeemTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgReq.version)
}
inline void CreateRedeemTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgReq.version)
}
inline std::string* CreateRedeemTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgReq.version)
}

// string addr = 2;
inline void CreateRedeemTxMsgReq::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgReq::addr() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgReq.addr)
  return _internal_addr();
}
inline void CreateRedeemTxMsgReq::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgReq.addr)
}
inline std::string* CreateRedeemTxMsgReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgReq.addr)
  return _internal_mutable_addr();
}
inline const std::string& CreateRedeemTxMsgReq::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void CreateRedeemTxMsgReq::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgReq::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgReq.addr)
}
inline void CreateRedeemTxMsgReq::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgReq.addr)
}
inline void CreateRedeemTxMsgReq::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgReq.addr)
}
inline std::string* CreateRedeemTxMsgReq::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgReq::release_addr() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgReq.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgReq.addr)
}

// string amt = 3;
inline void CreateRedeemTxMsgReq::clear_amt() {
  amt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgReq::amt() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgReq.amt)
  return _internal_amt();
}
inline void CreateRedeemTxMsgReq::set_amt(const std::string& value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgReq.amt)
}
inline std::string* CreateRedeemTxMsgReq::mutable_amt() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgReq.amt)
  return _internal_mutable_amt();
}
inline const std::string& CreateRedeemTxMsgReq::_internal_amt() const {
  return amt_.GetNoArena();
}
inline void CreateRedeemTxMsgReq::_internal_set_amt(const std::string& value) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgReq::set_amt(std::string&& value) {
  
  amt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgReq.amt)
}
inline void CreateRedeemTxMsgReq::set_amt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgReq.amt)
}
inline void CreateRedeemTxMsgReq::set_amt(const char* value, size_t size) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgReq.amt)
}
inline std::string* CreateRedeemTxMsgReq::_internal_mutable_amt() {
  
  return amt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgReq::release_amt() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgReq.amt)
  
  return amt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgReq::set_allocated_amt(std::string* amt) {
  if (amt != nullptr) {
    
  } else {
    
  }
  amt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amt);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgReq.amt)
}

// string needVerifyPreHashCount = 4;
inline void CreateRedeemTxMsgReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreateRedeemTxMsgReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateRedeemTxMsgReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreateRedeemTxMsgReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreateRedeemTxMsgReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgReq.needVerifyPreHashCount)
}
inline void CreateRedeemTxMsgReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgReq.needVerifyPreHashCount)
}
inline void CreateRedeemTxMsgReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateRedeemTxMsgReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgReq.needVerifyPreHashCount)
}

// string gasFees = 5;
inline void CreateRedeemTxMsgReq::clear_gasfees() {
  gasfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgReq::gasfees() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgReq.gasFees)
  return _internal_gasfees();
}
inline void CreateRedeemTxMsgReq::set_gasfees(const std::string& value) {
  _internal_set_gasfees(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgReq.gasFees)
}
inline std::string* CreateRedeemTxMsgReq::mutable_gasfees() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgReq.gasFees)
  return _internal_mutable_gasfees();
}
inline const std::string& CreateRedeemTxMsgReq::_internal_gasfees() const {
  return gasfees_.GetNoArena();
}
inline void CreateRedeemTxMsgReq::_internal_set_gasfees(const std::string& value) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgReq::set_gasfees(std::string&& value) {
  
  gasfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgReq.gasFees)
}
inline void CreateRedeemTxMsgReq::set_gasfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgReq.gasFees)
}
inline void CreateRedeemTxMsgReq::set_gasfees(const char* value, size_t size) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgReq.gasFees)
}
inline std::string* CreateRedeemTxMsgReq::_internal_mutable_gasfees() {
  
  return gasfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgReq::release_gasfees() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgReq.gasFees)
  
  return gasfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgReq::set_allocated_gasfees(std::string* gasfees) {
  if (gasfees != nullptr) {
    
  } else {
    
  }
  gasfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasfees);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgReq.gasFees)
}

// string txHash = 6;
inline void CreateRedeemTxMsgReq::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgReq::txhash() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgReq.txHash)
  return _internal_txhash();
}
inline void CreateRedeemTxMsgReq::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgReq.txHash)
}
inline std::string* CreateRedeemTxMsgReq::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgReq.txHash)
  return _internal_mutable_txhash();
}
inline const std::string& CreateRedeemTxMsgReq::_internal_txhash() const {
  return txhash_.GetNoArena();
}
inline void CreateRedeemTxMsgReq::_internal_set_txhash(const std::string& value) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgReq::set_txhash(std::string&& value) {
  
  txhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgReq.txHash)
}
inline void CreateRedeemTxMsgReq::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgReq.txHash)
}
inline void CreateRedeemTxMsgReq::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgReq.txHash)
}
inline std::string* CreateRedeemTxMsgReq::_internal_mutable_txhash() {
  
  return txhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgReq::release_txhash() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgReq.txHash)
  
  return txhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgReq::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgReq.txHash)
}

// -------------------------------------------------------------------

// CreateRedeemTxMsgAck

// string version = 1;
inline void CreateRedeemTxMsgAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgAck::version() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgAck.version)
  return _internal_version();
}
inline void CreateRedeemTxMsgAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgAck.version)
}
inline std::string* CreateRedeemTxMsgAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgAck.version)
  return _internal_mutable_version();
}
inline const std::string& CreateRedeemTxMsgAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateRedeemTxMsgAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgAck.version)
}
inline void CreateRedeemTxMsgAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgAck.version)
}
inline void CreateRedeemTxMsgAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgAck.version)
}
inline std::string* CreateRedeemTxMsgAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgAck::release_version() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgAck.version)
}

// int32 code = 2;
inline void CreateRedeemTxMsgAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRedeemTxMsgAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRedeemTxMsgAck::code() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgAck.code)
  return _internal_code();
}
inline void CreateRedeemTxMsgAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CreateRedeemTxMsgAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgAck.code)
}

// string description = 3;
inline void CreateRedeemTxMsgAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgAck::description() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgAck.description)
  return _internal_description();
}
inline void CreateRedeemTxMsgAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgAck.description)
}
inline std::string* CreateRedeemTxMsgAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgAck.description)
  return _internal_mutable_description();
}
inline const std::string& CreateRedeemTxMsgAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void CreateRedeemTxMsgAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgAck.description)
}
inline void CreateRedeemTxMsgAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgAck.description)
}
inline void CreateRedeemTxMsgAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgAck.description)
}
inline std::string* CreateRedeemTxMsgAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgAck::release_description() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgAck.description)
}

// string txData = 4;
inline void CreateRedeemTxMsgAck::clear_txdata() {
  txdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgAck::txdata() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgAck.txData)
  return _internal_txdata();
}
inline void CreateRedeemTxMsgAck::set_txdata(const std::string& value) {
  _internal_set_txdata(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgAck.txData)
}
inline std::string* CreateRedeemTxMsgAck::mutable_txdata() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgAck.txData)
  return _internal_mutable_txdata();
}
inline const std::string& CreateRedeemTxMsgAck::_internal_txdata() const {
  return txdata_.GetNoArena();
}
inline void CreateRedeemTxMsgAck::_internal_set_txdata(const std::string& value) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgAck::set_txdata(std::string&& value) {
  
  txdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgAck.txData)
}
inline void CreateRedeemTxMsgAck::set_txdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgAck.txData)
}
inline void CreateRedeemTxMsgAck::set_txdata(const char* value, size_t size) {
  
  txdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgAck.txData)
}
inline std::string* CreateRedeemTxMsgAck::_internal_mutable_txdata() {
  
  return txdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgAck::release_txdata() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgAck.txData)
  
  return txdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgAck::set_allocated_txdata(std::string* txdata) {
  if (txdata != nullptr) {
    
  } else {
    
  }
  txdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txdata);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgAck.txData)
}

// string txEncodeHash = 5;
inline void CreateRedeemTxMsgAck::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateRedeemTxMsgAck::txencodehash() const {
  // @@protoc_insertion_point(field_get:CreateRedeemTxMsgAck.txEncodeHash)
  return _internal_txencodehash();
}
inline void CreateRedeemTxMsgAck::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:CreateRedeemTxMsgAck.txEncodeHash)
}
inline std::string* CreateRedeemTxMsgAck::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:CreateRedeemTxMsgAck.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& CreateRedeemTxMsgAck::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void CreateRedeemTxMsgAck::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateRedeemTxMsgAck::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateRedeemTxMsgAck.txEncodeHash)
}
inline void CreateRedeemTxMsgAck::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateRedeemTxMsgAck.txEncodeHash)
}
inline void CreateRedeemTxMsgAck::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateRedeemTxMsgAck.txEncodeHash)
}
inline std::string* CreateRedeemTxMsgAck::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateRedeemTxMsgAck::release_txencodehash() {
  // @@protoc_insertion_point(field_release:CreateRedeemTxMsgAck.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRedeemTxMsgAck::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:CreateRedeemTxMsgAck.txEncodeHash)
}

// -------------------------------------------------------------------

// RedeemTxMsgReq

// string version = 1;
inline void RedeemTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedeemTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:RedeemTxMsgReq.version)
  return _internal_version();
}
inline void RedeemTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:RedeemTxMsgReq.version)
}
inline std::string* RedeemTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:RedeemTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& RedeemTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void RedeemTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedeemTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedeemTxMsgReq.version)
}
inline void RedeemTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedeemTxMsgReq.version)
}
inline void RedeemTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedeemTxMsgReq.version)
}
inline std::string* RedeemTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedeemTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:RedeemTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedeemTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:RedeemTxMsgReq.version)
}

// string serTx = 2;
inline void RedeemTxMsgReq::clear_sertx() {
  sertx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedeemTxMsgReq::sertx() const {
  // @@protoc_insertion_point(field_get:RedeemTxMsgReq.serTx)
  return _internal_sertx();
}
inline void RedeemTxMsgReq::set_sertx(const std::string& value) {
  _internal_set_sertx(value);
  // @@protoc_insertion_point(field_set:RedeemTxMsgReq.serTx)
}
inline std::string* RedeemTxMsgReq::mutable_sertx() {
  // @@protoc_insertion_point(field_mutable:RedeemTxMsgReq.serTx)
  return _internal_mutable_sertx();
}
inline const std::string& RedeemTxMsgReq::_internal_sertx() const {
  return sertx_.GetNoArena();
}
inline void RedeemTxMsgReq::_internal_set_sertx(const std::string& value) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedeemTxMsgReq::set_sertx(std::string&& value) {
  
  sertx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedeemTxMsgReq.serTx)
}
inline void RedeemTxMsgReq::set_sertx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedeemTxMsgReq.serTx)
}
inline void RedeemTxMsgReq::set_sertx(const char* value, size_t size) {
  
  sertx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedeemTxMsgReq.serTx)
}
inline std::string* RedeemTxMsgReq::_internal_mutable_sertx() {
  
  return sertx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedeemTxMsgReq::release_sertx() {
  // @@protoc_insertion_point(field_release:RedeemTxMsgReq.serTx)
  
  return sertx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedeemTxMsgReq::set_allocated_sertx(std::string* sertx) {
  if (sertx != nullptr) {
    
  } else {
    
  }
  sertx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sertx);
  // @@protoc_insertion_point(field_set_allocated:RedeemTxMsgReq.serTx)
}

// string strSignature = 3;
inline void RedeemTxMsgReq::clear_strsignature() {
  strsignature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedeemTxMsgReq::strsignature() const {
  // @@protoc_insertion_point(field_get:RedeemTxMsgReq.strSignature)
  return _internal_strsignature();
}
inline void RedeemTxMsgReq::set_strsignature(const std::string& value) {
  _internal_set_strsignature(value);
  // @@protoc_insertion_point(field_set:RedeemTxMsgReq.strSignature)
}
inline std::string* RedeemTxMsgReq::mutable_strsignature() {
  // @@protoc_insertion_point(field_mutable:RedeemTxMsgReq.strSignature)
  return _internal_mutable_strsignature();
}
inline const std::string& RedeemTxMsgReq::_internal_strsignature() const {
  return strsignature_.GetNoArena();
}
inline void RedeemTxMsgReq::_internal_set_strsignature(const std::string& value) {
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedeemTxMsgReq::set_strsignature(std::string&& value) {
  
  strsignature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedeemTxMsgReq.strSignature)
}
inline void RedeemTxMsgReq::set_strsignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedeemTxMsgReq.strSignature)
}
inline void RedeemTxMsgReq::set_strsignature(const char* value, size_t size) {
  
  strsignature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedeemTxMsgReq.strSignature)
}
inline std::string* RedeemTxMsgReq::_internal_mutable_strsignature() {
  
  return strsignature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedeemTxMsgReq::release_strsignature() {
  // @@protoc_insertion_point(field_release:RedeemTxMsgReq.strSignature)
  
  return strsignature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedeemTxMsgReq::set_allocated_strsignature(std::string* strsignature) {
  if (strsignature != nullptr) {
    
  } else {
    
  }
  strsignature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strsignature);
  // @@protoc_insertion_point(field_set_allocated:RedeemTxMsgReq.strSignature)
}

// string strPub = 4;
inline void RedeemTxMsgReq::clear_strpub() {
  strpub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedeemTxMsgReq::strpub() const {
  // @@protoc_insertion_point(field_get:RedeemTxMsgReq.strPub)
  return _internal_strpub();
}
inline void RedeemTxMsgReq::set_strpub(const std::string& value) {
  _internal_set_strpub(value);
  // @@protoc_insertion_point(field_set:RedeemTxMsgReq.strPub)
}
inline std::string* RedeemTxMsgReq::mutable_strpub() {
  // @@protoc_insertion_point(field_mutable:RedeemTxMsgReq.strPub)
  return _internal_mutable_strpub();
}
inline const std::string& RedeemTxMsgReq::_internal_strpub() const {
  return strpub_.GetNoArena();
}
inline void RedeemTxMsgReq::_internal_set_strpub(const std::string& value) {
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedeemTxMsgReq::set_strpub(std::string&& value) {
  
  strpub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedeemTxMsgReq.strPub)
}
inline void RedeemTxMsgReq::set_strpub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedeemTxMsgReq.strPub)
}
inline void RedeemTxMsgReq::set_strpub(const char* value, size_t size) {
  
  strpub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedeemTxMsgReq.strPub)
}
inline std::string* RedeemTxMsgReq::_internal_mutable_strpub() {
  
  return strpub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedeemTxMsgReq::release_strpub() {
  // @@protoc_insertion_point(field_release:RedeemTxMsgReq.strPub)
  
  return strpub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedeemTxMsgReq::set_allocated_strpub(std::string* strpub) {
  if (strpub != nullptr) {
    
  } else {
    
  }
  strpub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strpub);
  // @@protoc_insertion_point(field_set_allocated:RedeemTxMsgReq.strPub)
}

// string txEncodeHash = 5;
inline void RedeemTxMsgReq::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RedeemTxMsgReq::txencodehash() const {
  // @@protoc_insertion_point(field_get:RedeemTxMsgReq.txEncodeHash)
  return _internal_txencodehash();
}
inline void RedeemTxMsgReq::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:RedeemTxMsgReq.txEncodeHash)
}
inline std::string* RedeemTxMsgReq::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:RedeemTxMsgReq.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& RedeemTxMsgReq::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void RedeemTxMsgReq::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RedeemTxMsgReq::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RedeemTxMsgReq.txEncodeHash)
}
inline void RedeemTxMsgReq::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RedeemTxMsgReq.txEncodeHash)
}
inline void RedeemTxMsgReq::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RedeemTxMsgReq.txEncodeHash)
}
inline std::string* RedeemTxMsgReq::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RedeemTxMsgReq::release_txencodehash() {
  // @@protoc_insertion_point(field_release:RedeemTxMsgReq.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RedeemTxMsgReq::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:RedeemTxMsgReq.txEncodeHash)
}

// -------------------------------------------------------------------

// CreateDevicePledgeTxMsgReq

// string version = 1;
inline void CreateDevicePledgeTxMsgReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDevicePledgeTxMsgReq::version() const {
  // @@protoc_insertion_point(field_get:CreateDevicePledgeTxMsgReq.version)
  return _internal_version();
}
inline void CreateDevicePledgeTxMsgReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateDevicePledgeTxMsgReq.version)
}
inline std::string* CreateDevicePledgeTxMsgReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateDevicePledgeTxMsgReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreateDevicePledgeTxMsgReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateDevicePledgeTxMsgReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDevicePledgeTxMsgReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDevicePledgeTxMsgReq.version)
}
inline void CreateDevicePledgeTxMsgReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDevicePledgeTxMsgReq.version)
}
inline void CreateDevicePledgeTxMsgReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDevicePledgeTxMsgReq.version)
}
inline std::string* CreateDevicePledgeTxMsgReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDevicePledgeTxMsgReq::release_version() {
  // @@protoc_insertion_point(field_release:CreateDevicePledgeTxMsgReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDevicePledgeTxMsgReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateDevicePledgeTxMsgReq.version)
}

// string addr = 2;
inline void CreateDevicePledgeTxMsgReq::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDevicePledgeTxMsgReq::addr() const {
  // @@protoc_insertion_point(field_get:CreateDevicePledgeTxMsgReq.addr)
  return _internal_addr();
}
inline void CreateDevicePledgeTxMsgReq::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:CreateDevicePledgeTxMsgReq.addr)
}
inline std::string* CreateDevicePledgeTxMsgReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:CreateDevicePledgeTxMsgReq.addr)
  return _internal_mutable_addr();
}
inline const std::string& CreateDevicePledgeTxMsgReq::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void CreateDevicePledgeTxMsgReq::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDevicePledgeTxMsgReq::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDevicePledgeTxMsgReq.addr)
}
inline void CreateDevicePledgeTxMsgReq::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDevicePledgeTxMsgReq.addr)
}
inline void CreateDevicePledgeTxMsgReq::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDevicePledgeTxMsgReq.addr)
}
inline std::string* CreateDevicePledgeTxMsgReq::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDevicePledgeTxMsgReq::release_addr() {
  // @@protoc_insertion_point(field_release:CreateDevicePledgeTxMsgReq.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDevicePledgeTxMsgReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:CreateDevicePledgeTxMsgReq.addr)
}

// string amt = 3;
inline void CreateDevicePledgeTxMsgReq::clear_amt() {
  amt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDevicePledgeTxMsgReq::amt() const {
  // @@protoc_insertion_point(field_get:CreateDevicePledgeTxMsgReq.amt)
  return _internal_amt();
}
inline void CreateDevicePledgeTxMsgReq::set_amt(const std::string& value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:CreateDevicePledgeTxMsgReq.amt)
}
inline std::string* CreateDevicePledgeTxMsgReq::mutable_amt() {
  // @@protoc_insertion_point(field_mutable:CreateDevicePledgeTxMsgReq.amt)
  return _internal_mutable_amt();
}
inline const std::string& CreateDevicePledgeTxMsgReq::_internal_amt() const {
  return amt_.GetNoArena();
}
inline void CreateDevicePledgeTxMsgReq::_internal_set_amt(const std::string& value) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDevicePledgeTxMsgReq::set_amt(std::string&& value) {
  
  amt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDevicePledgeTxMsgReq.amt)
}
inline void CreateDevicePledgeTxMsgReq::set_amt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDevicePledgeTxMsgReq.amt)
}
inline void CreateDevicePledgeTxMsgReq::set_amt(const char* value, size_t size) {
  
  amt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDevicePledgeTxMsgReq.amt)
}
inline std::string* CreateDevicePledgeTxMsgReq::_internal_mutable_amt() {
  
  return amt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDevicePledgeTxMsgReq::release_amt() {
  // @@protoc_insertion_point(field_release:CreateDevicePledgeTxMsgReq.amt)
  
  return amt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDevicePledgeTxMsgReq::set_allocated_amt(std::string* amt) {
  if (amt != nullptr) {
    
  } else {
    
  }
  amt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amt);
  // @@protoc_insertion_point(field_set_allocated:CreateDevicePledgeTxMsgReq.amt)
}

// string needVerifyPreHashCount = 4;
inline void CreateDevicePledgeTxMsgReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDevicePledgeTxMsgReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreateDevicePledgeTxMsgReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateDevicePledgeTxMsgReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreateDevicePledgeTxMsgReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreateDevicePledgeTxMsgReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDevicePledgeTxMsgReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
}
inline void CreateDevicePledgeTxMsgReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
}
inline void CreateDevicePledgeTxMsgReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
}
inline std::string* CreateDevicePledgeTxMsgReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDevicePledgeTxMsgReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDevicePledgeTxMsgReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreateDevicePledgeTxMsgReq.needVerifyPreHashCount)
}

// string gasFees = 5;
inline void CreateDevicePledgeTxMsgReq::clear_gasfees() {
  gasfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDevicePledgeTxMsgReq::gasfees() const {
  // @@protoc_insertion_point(field_get:CreateDevicePledgeTxMsgReq.gasFees)
  return _internal_gasfees();
}
inline void CreateDevicePledgeTxMsgReq::set_gasfees(const std::string& value) {
  _internal_set_gasfees(value);
  // @@protoc_insertion_point(field_set:CreateDevicePledgeTxMsgReq.gasFees)
}
inline std::string* CreateDevicePledgeTxMsgReq::mutable_gasfees() {
  // @@protoc_insertion_point(field_mutable:CreateDevicePledgeTxMsgReq.gasFees)
  return _internal_mutable_gasfees();
}
inline const std::string& CreateDevicePledgeTxMsgReq::_internal_gasfees() const {
  return gasfees_.GetNoArena();
}
inline void CreateDevicePledgeTxMsgReq::_internal_set_gasfees(const std::string& value) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDevicePledgeTxMsgReq::set_gasfees(std::string&& value) {
  
  gasfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDevicePledgeTxMsgReq.gasFees)
}
inline void CreateDevicePledgeTxMsgReq::set_gasfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDevicePledgeTxMsgReq.gasFees)
}
inline void CreateDevicePledgeTxMsgReq::set_gasfees(const char* value, size_t size) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDevicePledgeTxMsgReq.gasFees)
}
inline std::string* CreateDevicePledgeTxMsgReq::_internal_mutable_gasfees() {
  
  return gasfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDevicePledgeTxMsgReq::release_gasfees() {
  // @@protoc_insertion_point(field_release:CreateDevicePledgeTxMsgReq.gasFees)
  
  return gasfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDevicePledgeTxMsgReq::set_allocated_gasfees(std::string* gasfees) {
  if (gasfees != nullptr) {
    
  } else {
    
  }
  gasfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasfees);
  // @@protoc_insertion_point(field_set_allocated:CreateDevicePledgeTxMsgReq.gasFees)
}

// string password = 6;
inline void CreateDevicePledgeTxMsgReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDevicePledgeTxMsgReq::password() const {
  // @@protoc_insertion_point(field_get:CreateDevicePledgeTxMsgReq.password)
  return _internal_password();
}
inline void CreateDevicePledgeTxMsgReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CreateDevicePledgeTxMsgReq.password)
}
inline std::string* CreateDevicePledgeTxMsgReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CreateDevicePledgeTxMsgReq.password)
  return _internal_mutable_password();
}
inline const std::string& CreateDevicePledgeTxMsgReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void CreateDevicePledgeTxMsgReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDevicePledgeTxMsgReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDevicePledgeTxMsgReq.password)
}
inline void CreateDevicePledgeTxMsgReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDevicePledgeTxMsgReq.password)
}
inline void CreateDevicePledgeTxMsgReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDevicePledgeTxMsgReq.password)
}
inline std::string* CreateDevicePledgeTxMsgReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDevicePledgeTxMsgReq::release_password() {
  // @@protoc_insertion_point(field_release:CreateDevicePledgeTxMsgReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDevicePledgeTxMsgReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CreateDevicePledgeTxMsgReq.password)
}

// -------------------------------------------------------------------

// CreateDeviceRedeemTxReq

// string version = 1;
inline void CreateDeviceRedeemTxReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceRedeemTxReq::version() const {
  // @@protoc_insertion_point(field_get:CreateDeviceRedeemTxReq.version)
  return _internal_version();
}
inline void CreateDeviceRedeemTxReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CreateDeviceRedeemTxReq.version)
}
inline std::string* CreateDeviceRedeemTxReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceRedeemTxReq.version)
  return _internal_mutable_version();
}
inline const std::string& CreateDeviceRedeemTxReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void CreateDeviceRedeemTxReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceRedeemTxReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceRedeemTxReq.version)
}
inline void CreateDeviceRedeemTxReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceRedeemTxReq.version)
}
inline void CreateDeviceRedeemTxReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceRedeemTxReq.version)
}
inline std::string* CreateDeviceRedeemTxReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceRedeemTxReq::release_version() {
  // @@protoc_insertion_point(field_release:CreateDeviceRedeemTxReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceRedeemTxReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceRedeemTxReq.version)
}

// string addr = 2;
inline void CreateDeviceRedeemTxReq::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceRedeemTxReq::addr() const {
  // @@protoc_insertion_point(field_get:CreateDeviceRedeemTxReq.addr)
  return _internal_addr();
}
inline void CreateDeviceRedeemTxReq::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:CreateDeviceRedeemTxReq.addr)
}
inline std::string* CreateDeviceRedeemTxReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceRedeemTxReq.addr)
  return _internal_mutable_addr();
}
inline const std::string& CreateDeviceRedeemTxReq::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void CreateDeviceRedeemTxReq::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceRedeemTxReq::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceRedeemTxReq.addr)
}
inline void CreateDeviceRedeemTxReq::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceRedeemTxReq.addr)
}
inline void CreateDeviceRedeemTxReq::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceRedeemTxReq.addr)
}
inline std::string* CreateDeviceRedeemTxReq::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceRedeemTxReq::release_addr() {
  // @@protoc_insertion_point(field_release:CreateDeviceRedeemTxReq.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceRedeemTxReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceRedeemTxReq.addr)
}

// string needVerifyPreHashCount = 3;
inline void CreateDeviceRedeemTxReq::clear_needverifyprehashcount() {
  needverifyprehashcount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceRedeemTxReq::needverifyprehashcount() const {
  // @@protoc_insertion_point(field_get:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
  return _internal_needverifyprehashcount();
}
inline void CreateDeviceRedeemTxReq::set_needverifyprehashcount(const std::string& value) {
  _internal_set_needverifyprehashcount(value);
  // @@protoc_insertion_point(field_set:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
}
inline std::string* CreateDeviceRedeemTxReq::mutable_needverifyprehashcount() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
  return _internal_mutable_needverifyprehashcount();
}
inline const std::string& CreateDeviceRedeemTxReq::_internal_needverifyprehashcount() const {
  return needverifyprehashcount_.GetNoArena();
}
inline void CreateDeviceRedeemTxReq::_internal_set_needverifyprehashcount(const std::string& value) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceRedeemTxReq::set_needverifyprehashcount(std::string&& value) {
  
  needverifyprehashcount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
}
inline void CreateDeviceRedeemTxReq::set_needverifyprehashcount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
}
inline void CreateDeviceRedeemTxReq::set_needverifyprehashcount(const char* value, size_t size) {
  
  needverifyprehashcount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
}
inline std::string* CreateDeviceRedeemTxReq::_internal_mutable_needverifyprehashcount() {
  
  return needverifyprehashcount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceRedeemTxReq::release_needverifyprehashcount() {
  // @@protoc_insertion_point(field_release:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
  
  return needverifyprehashcount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceRedeemTxReq::set_allocated_needverifyprehashcount(std::string* needverifyprehashcount) {
  if (needverifyprehashcount != nullptr) {
    
  } else {
    
  }
  needverifyprehashcount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), needverifyprehashcount);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceRedeemTxReq.needVerifyPreHashCount)
}

// string gasFees = 4;
inline void CreateDeviceRedeemTxReq::clear_gasfees() {
  gasfees_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceRedeemTxReq::gasfees() const {
  // @@protoc_insertion_point(field_get:CreateDeviceRedeemTxReq.gasFees)
  return _internal_gasfees();
}
inline void CreateDeviceRedeemTxReq::set_gasfees(const std::string& value) {
  _internal_set_gasfees(value);
  // @@protoc_insertion_point(field_set:CreateDeviceRedeemTxReq.gasFees)
}
inline std::string* CreateDeviceRedeemTxReq::mutable_gasfees() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceRedeemTxReq.gasFees)
  return _internal_mutable_gasfees();
}
inline const std::string& CreateDeviceRedeemTxReq::_internal_gasfees() const {
  return gasfees_.GetNoArena();
}
inline void CreateDeviceRedeemTxReq::_internal_set_gasfees(const std::string& value) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceRedeemTxReq::set_gasfees(std::string&& value) {
  
  gasfees_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceRedeemTxReq.gasFees)
}
inline void CreateDeviceRedeemTxReq::set_gasfees(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceRedeemTxReq.gasFees)
}
inline void CreateDeviceRedeemTxReq::set_gasfees(const char* value, size_t size) {
  
  gasfees_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceRedeemTxReq.gasFees)
}
inline std::string* CreateDeviceRedeemTxReq::_internal_mutable_gasfees() {
  
  return gasfees_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceRedeemTxReq::release_gasfees() {
  // @@protoc_insertion_point(field_release:CreateDeviceRedeemTxReq.gasFees)
  
  return gasfees_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceRedeemTxReq::set_allocated_gasfees(std::string* gasfees) {
  if (gasfees != nullptr) {
    
  } else {
    
  }
  gasfees_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasfees);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceRedeemTxReq.gasFees)
}

// string utxo = 5;
inline void CreateDeviceRedeemTxReq::clear_utxo() {
  utxo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceRedeemTxReq::utxo() const {
  // @@protoc_insertion_point(field_get:CreateDeviceRedeemTxReq.utxo)
  return _internal_utxo();
}
inline void CreateDeviceRedeemTxReq::set_utxo(const std::string& value) {
  _internal_set_utxo(value);
  // @@protoc_insertion_point(field_set:CreateDeviceRedeemTxReq.utxo)
}
inline std::string* CreateDeviceRedeemTxReq::mutable_utxo() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceRedeemTxReq.utxo)
  return _internal_mutable_utxo();
}
inline const std::string& CreateDeviceRedeemTxReq::_internal_utxo() const {
  return utxo_.GetNoArena();
}
inline void CreateDeviceRedeemTxReq::_internal_set_utxo(const std::string& value) {
  
  utxo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceRedeemTxReq::set_utxo(std::string&& value) {
  
  utxo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceRedeemTxReq.utxo)
}
inline void CreateDeviceRedeemTxReq::set_utxo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  utxo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceRedeemTxReq.utxo)
}
inline void CreateDeviceRedeemTxReq::set_utxo(const char* value, size_t size) {
  
  utxo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceRedeemTxReq.utxo)
}
inline std::string* CreateDeviceRedeemTxReq::_internal_mutable_utxo() {
  
  return utxo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceRedeemTxReq::release_utxo() {
  // @@protoc_insertion_point(field_release:CreateDeviceRedeemTxReq.utxo)
  
  return utxo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceRedeemTxReq::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  utxo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), utxo);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceRedeemTxReq.utxo)
}

// string password = 6;
inline void CreateDeviceRedeemTxReq::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateDeviceRedeemTxReq::password() const {
  // @@protoc_insertion_point(field_get:CreateDeviceRedeemTxReq.password)
  return _internal_password();
}
inline void CreateDeviceRedeemTxReq::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CreateDeviceRedeemTxReq.password)
}
inline std::string* CreateDeviceRedeemTxReq::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CreateDeviceRedeemTxReq.password)
  return _internal_mutable_password();
}
inline const std::string& CreateDeviceRedeemTxReq::_internal_password() const {
  return password_.GetNoArena();
}
inline void CreateDeviceRedeemTxReq::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CreateDeviceRedeemTxReq::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateDeviceRedeemTxReq.password)
}
inline void CreateDeviceRedeemTxReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateDeviceRedeemTxReq.password)
}
inline void CreateDeviceRedeemTxReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateDeviceRedeemTxReq.password)
}
inline std::string* CreateDeviceRedeemTxReq::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateDeviceRedeemTxReq::release_password() {
  // @@protoc_insertion_point(field_release:CreateDeviceRedeemTxReq.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDeviceRedeemTxReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CreateDeviceRedeemTxReq.password)
}

// -------------------------------------------------------------------

// GetPledgeListReq

// string version = 1;
inline void GetPledgeListReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPledgeListReq::version() const {
  // @@protoc_insertion_point(field_get:GetPledgeListReq.version)
  return _internal_version();
}
inline void GetPledgeListReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetPledgeListReq.version)
}
inline std::string* GetPledgeListReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetPledgeListReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetPledgeListReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetPledgeListReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPledgeListReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPledgeListReq.version)
}
inline void GetPledgeListReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPledgeListReq.version)
}
inline void GetPledgeListReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPledgeListReq.version)
}
inline std::string* GetPledgeListReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPledgeListReq::release_version() {
  // @@protoc_insertion_point(field_release:GetPledgeListReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPledgeListReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetPledgeListReq.version)
}

// string addr = 2;
inline void GetPledgeListReq::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPledgeListReq::addr() const {
  // @@protoc_insertion_point(field_get:GetPledgeListReq.addr)
  return _internal_addr();
}
inline void GetPledgeListReq::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:GetPledgeListReq.addr)
}
inline std::string* GetPledgeListReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:GetPledgeListReq.addr)
  return _internal_mutable_addr();
}
inline const std::string& GetPledgeListReq::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void GetPledgeListReq::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPledgeListReq::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPledgeListReq.addr)
}
inline void GetPledgeListReq::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPledgeListReq.addr)
}
inline void GetPledgeListReq::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPledgeListReq.addr)
}
inline std::string* GetPledgeListReq::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPledgeListReq::release_addr() {
  // @@protoc_insertion_point(field_release:GetPledgeListReq.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPledgeListReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:GetPledgeListReq.addr)
}

// uint32 index = 3;
inline void GetPledgeListReq::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPledgeListReq::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPledgeListReq::index() const {
  // @@protoc_insertion_point(field_get:GetPledgeListReq.index)
  return _internal_index();
}
inline void GetPledgeListReq::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void GetPledgeListReq::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:GetPledgeListReq.index)
}

// uint32 count = 4;
inline void GetPledgeListReq::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPledgeListReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPledgeListReq::count() const {
  // @@protoc_insertion_point(field_get:GetPledgeListReq.count)
  return _internal_count();
}
inline void GetPledgeListReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void GetPledgeListReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:GetPledgeListReq.count)
}

// -------------------------------------------------------------------

// PledgeItem

// string blockhash = 1;
inline void PledgeItem::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeItem::blockhash() const {
  // @@protoc_insertion_point(field_get:PledgeItem.blockhash)
  return _internal_blockhash();
}
inline void PledgeItem::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:PledgeItem.blockhash)
}
inline std::string* PledgeItem::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:PledgeItem.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& PledgeItem::_internal_blockhash() const {
  return blockhash_.GetNoArena();
}
inline void PledgeItem::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeItem::set_blockhash(std::string&& value) {
  
  blockhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeItem.blockhash)
}
inline void PledgeItem::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeItem.blockhash)
}
inline void PledgeItem::set_blockhash(const char* value, size_t size) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeItem.blockhash)
}
inline std::string* PledgeItem::_internal_mutable_blockhash() {
  
  return blockhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeItem::release_blockhash() {
  // @@protoc_insertion_point(field_release:PledgeItem.blockhash)
  
  return blockhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeItem::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:PledgeItem.blockhash)
}

// uint32 blockheight = 2;
inline void PledgeItem::clear_blockheight() {
  blockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PledgeItem::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PledgeItem::blockheight() const {
  // @@protoc_insertion_point(field_get:PledgeItem.blockheight)
  return _internal_blockheight();
}
inline void PledgeItem::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blockheight_ = value;
}
inline void PledgeItem::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:PledgeItem.blockheight)
}

// string utxo = 3;
inline void PledgeItem::clear_utxo() {
  utxo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeItem::utxo() const {
  // @@protoc_insertion_point(field_get:PledgeItem.utxo)
  return _internal_utxo();
}
inline void PledgeItem::set_utxo(const std::string& value) {
  _internal_set_utxo(value);
  // @@protoc_insertion_point(field_set:PledgeItem.utxo)
}
inline std::string* PledgeItem::mutable_utxo() {
  // @@protoc_insertion_point(field_mutable:PledgeItem.utxo)
  return _internal_mutable_utxo();
}
inline const std::string& PledgeItem::_internal_utxo() const {
  return utxo_.GetNoArena();
}
inline void PledgeItem::_internal_set_utxo(const std::string& value) {
  
  utxo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeItem::set_utxo(std::string&& value) {
  
  utxo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeItem.utxo)
}
inline void PledgeItem::set_utxo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  utxo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeItem.utxo)
}
inline void PledgeItem::set_utxo(const char* value, size_t size) {
  
  utxo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeItem.utxo)
}
inline std::string* PledgeItem::_internal_mutable_utxo() {
  
  return utxo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeItem::release_utxo() {
  // @@protoc_insertion_point(field_release:PledgeItem.utxo)
  
  return utxo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeItem::set_allocated_utxo(std::string* utxo) {
  if (utxo != nullptr) {
    
  } else {
    
  }
  utxo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), utxo);
  // @@protoc_insertion_point(field_set_allocated:PledgeItem.utxo)
}

// string amount = 4;
inline void PledgeItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeItem::amount() const {
  // @@protoc_insertion_point(field_get:PledgeItem.amount)
  return _internal_amount();
}
inline void PledgeItem::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:PledgeItem.amount)
}
inline std::string* PledgeItem::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:PledgeItem.amount)
  return _internal_mutable_amount();
}
inline const std::string& PledgeItem::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void PledgeItem::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeItem::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeItem.amount)
}
inline void PledgeItem::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeItem.amount)
}
inline void PledgeItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeItem.amount)
}
inline std::string* PledgeItem::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeItem::release_amount() {
  // @@protoc_insertion_point(field_release:PledgeItem.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeItem::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:PledgeItem.amount)
}

// uint64 time = 5;
inline void PledgeItem::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PledgeItem::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PledgeItem::time() const {
  // @@protoc_insertion_point(field_get:PledgeItem.time)
  return _internal_time();
}
inline void PledgeItem::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void PledgeItem::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:PledgeItem.time)
}

// string fromaddr = 6;
inline void PledgeItem::clear_fromaddr() {
  fromaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeItem::fromaddr() const {
  // @@protoc_insertion_point(field_get:PledgeItem.fromaddr)
  return _internal_fromaddr();
}
inline void PledgeItem::set_fromaddr(const std::string& value) {
  _internal_set_fromaddr(value);
  // @@protoc_insertion_point(field_set:PledgeItem.fromaddr)
}
inline std::string* PledgeItem::mutable_fromaddr() {
  // @@protoc_insertion_point(field_mutable:PledgeItem.fromaddr)
  return _internal_mutable_fromaddr();
}
inline const std::string& PledgeItem::_internal_fromaddr() const {
  return fromaddr_.GetNoArena();
}
inline void PledgeItem::_internal_set_fromaddr(const std::string& value) {
  
  fromaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeItem::set_fromaddr(std::string&& value) {
  
  fromaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeItem.fromaddr)
}
inline void PledgeItem::set_fromaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fromaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeItem.fromaddr)
}
inline void PledgeItem::set_fromaddr(const char* value, size_t size) {
  
  fromaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeItem.fromaddr)
}
inline std::string* PledgeItem::_internal_mutable_fromaddr() {
  
  return fromaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeItem::release_fromaddr() {
  // @@protoc_insertion_point(field_release:PledgeItem.fromaddr)
  
  return fromaddr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeItem::set_allocated_fromaddr(std::string* fromaddr) {
  if (fromaddr != nullptr) {
    
  } else {
    
  }
  fromaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fromaddr);
  // @@protoc_insertion_point(field_set_allocated:PledgeItem.fromaddr)
}

// string toaddr = 7;
inline void PledgeItem::clear_toaddr() {
  toaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeItem::toaddr() const {
  // @@protoc_insertion_point(field_get:PledgeItem.toaddr)
  return _internal_toaddr();
}
inline void PledgeItem::set_toaddr(const std::string& value) {
  _internal_set_toaddr(value);
  // @@protoc_insertion_point(field_set:PledgeItem.toaddr)
}
inline std::string* PledgeItem::mutable_toaddr() {
  // @@protoc_insertion_point(field_mutable:PledgeItem.toaddr)
  return _internal_mutable_toaddr();
}
inline const std::string& PledgeItem::_internal_toaddr() const {
  return toaddr_.GetNoArena();
}
inline void PledgeItem::_internal_set_toaddr(const std::string& value) {
  
  toaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeItem::set_toaddr(std::string&& value) {
  
  toaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeItem.toaddr)
}
inline void PledgeItem::set_toaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  toaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeItem.toaddr)
}
inline void PledgeItem::set_toaddr(const char* value, size_t size) {
  
  toaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeItem.toaddr)
}
inline std::string* PledgeItem::_internal_mutable_toaddr() {
  
  return toaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeItem::release_toaddr() {
  // @@protoc_insertion_point(field_release:PledgeItem.toaddr)
  
  return toaddr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeItem::set_allocated_toaddr(std::string* toaddr) {
  if (toaddr != nullptr) {
    
  } else {
    
  }
  toaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toaddr);
  // @@protoc_insertion_point(field_set_allocated:PledgeItem.toaddr)
}

// string detail = 8;
inline void PledgeItem::clear_detail() {
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PledgeItem::detail() const {
  // @@protoc_insertion_point(field_get:PledgeItem.detail)
  return _internal_detail();
}
inline void PledgeItem::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:PledgeItem.detail)
}
inline std::string* PledgeItem::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:PledgeItem.detail)
  return _internal_mutable_detail();
}
inline const std::string& PledgeItem::_internal_detail() const {
  return detail_.GetNoArena();
}
inline void PledgeItem::_internal_set_detail(const std::string& value) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PledgeItem::set_detail(std::string&& value) {
  
  detail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PledgeItem.detail)
}
inline void PledgeItem::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PledgeItem.detail)
}
inline void PledgeItem::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PledgeItem.detail)
}
inline std::string* PledgeItem::_internal_mutable_detail() {
  
  return detail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PledgeItem::release_detail() {
  // @@protoc_insertion_point(field_release:PledgeItem.detail)
  
  return detail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PledgeItem::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:PledgeItem.detail)
}

// -------------------------------------------------------------------

// GetPledgeListAck

// string version = 1;
inline void GetPledgeListAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPledgeListAck::version() const {
  // @@protoc_insertion_point(field_get:GetPledgeListAck.version)
  return _internal_version();
}
inline void GetPledgeListAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetPledgeListAck.version)
}
inline std::string* GetPledgeListAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetPledgeListAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetPledgeListAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetPledgeListAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPledgeListAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPledgeListAck.version)
}
inline void GetPledgeListAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPledgeListAck.version)
}
inline void GetPledgeListAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPledgeListAck.version)
}
inline std::string* GetPledgeListAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPledgeListAck::release_version() {
  // @@protoc_insertion_point(field_release:GetPledgeListAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPledgeListAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetPledgeListAck.version)
}

// int32 code = 2;
inline void GetPledgeListAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPledgeListAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPledgeListAck::code() const {
  // @@protoc_insertion_point(field_get:GetPledgeListAck.code)
  return _internal_code();
}
inline void GetPledgeListAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetPledgeListAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetPledgeListAck.code)
}

// string description = 3;
inline void GetPledgeListAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPledgeListAck::description() const {
  // @@protoc_insertion_point(field_get:GetPledgeListAck.description)
  return _internal_description();
}
inline void GetPledgeListAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetPledgeListAck.description)
}
inline std::string* GetPledgeListAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetPledgeListAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetPledgeListAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetPledgeListAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetPledgeListAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetPledgeListAck.description)
}
inline void GetPledgeListAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetPledgeListAck.description)
}
inline void GetPledgeListAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetPledgeListAck.description)
}
inline std::string* GetPledgeListAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPledgeListAck::release_description() {
  // @@protoc_insertion_point(field_release:GetPledgeListAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPledgeListAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetPledgeListAck.description)
}

// repeated .PledgeItem list = 4;
inline int GetPledgeListAck::_internal_list_size() const {
  return list_.size();
}
inline int GetPledgeListAck::list_size() const {
  return _internal_list_size();
}
inline void GetPledgeListAck::clear_list() {
  list_.Clear();
}
inline ::PledgeItem* GetPledgeListAck::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:GetPledgeListAck.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PledgeItem >*
GetPledgeListAck::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:GetPledgeListAck.list)
  return &list_;
}
inline const ::PledgeItem& GetPledgeListAck::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::PledgeItem& GetPledgeListAck::list(int index) const {
  // @@protoc_insertion_point(field_get:GetPledgeListAck.list)
  return _internal_list(index);
}
inline ::PledgeItem* GetPledgeListAck::_internal_add_list() {
  return list_.Add();
}
inline ::PledgeItem* GetPledgeListAck::add_list() {
  // @@protoc_insertion_point(field_add:GetPledgeListAck.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PledgeItem >&
GetPledgeListAck::list() const {
  // @@protoc_insertion_point(field_list:GetPledgeListAck.list)
  return list_;
}

// uint32 total = 5;
inline void GetPledgeListAck::clear_total() {
  total_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPledgeListAck::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetPledgeListAck::total() const {
  // @@protoc_insertion_point(field_get:GetPledgeListAck.total)
  return _internal_total();
}
inline void GetPledgeListAck::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ = value;
}
inline void GetPledgeListAck::set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:GetPledgeListAck.total)
}

// -------------------------------------------------------------------

// GetTxInfoListReq

// string version = 1;
inline void GetTxInfoListReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoListReq::version() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListReq.version)
  return _internal_version();
}
inline void GetTxInfoListReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListReq.version)
}
inline std::string* GetTxInfoListReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoListReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetTxInfoListReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetTxInfoListReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoListReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoListReq.version)
}
inline void GetTxInfoListReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoListReq.version)
}
inline void GetTxInfoListReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoListReq.version)
}
inline std::string* GetTxInfoListReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoListReq::release_version() {
  // @@protoc_insertion_point(field_release:GetTxInfoListReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoListReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoListReq.version)
}

// string addr = 2;
inline void GetTxInfoListReq::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoListReq::addr() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListReq.addr)
  return _internal_addr();
}
inline void GetTxInfoListReq::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListReq.addr)
}
inline std::string* GetTxInfoListReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoListReq.addr)
  return _internal_mutable_addr();
}
inline const std::string& GetTxInfoListReq::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void GetTxInfoListReq::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoListReq::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoListReq.addr)
}
inline void GetTxInfoListReq::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoListReq.addr)
}
inline void GetTxInfoListReq::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoListReq.addr)
}
inline std::string* GetTxInfoListReq::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoListReq::release_addr() {
  // @@protoc_insertion_point(field_release:GetTxInfoListReq.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoListReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoListReq.addr)
}

// uint32 index = 3;
inline void GetTxInfoListReq::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListReq::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListReq::index() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListReq.index)
  return _internal_index();
}
inline void GetTxInfoListReq::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void GetTxInfoListReq::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListReq.index)
}

// uint32 count = 4;
inline void GetTxInfoListReq::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListReq::count() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListReq.count)
  return _internal_count();
}
inline void GetTxInfoListReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void GetTxInfoListReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListReq.count)
}

// -------------------------------------------------------------------

// TxInfoItem

// .TxInfoType type = 1;
inline void TxInfoItem::clear_type() {
  type_ = 0;
}
inline ::TxInfoType TxInfoItem::_internal_type() const {
  return static_cast< ::TxInfoType >(type_);
}
inline ::TxInfoType TxInfoItem::type() const {
  // @@protoc_insertion_point(field_get:TxInfoItem.type)
  return _internal_type();
}
inline void TxInfoItem::_internal_set_type(::TxInfoType value) {
  
  type_ = value;
}
inline void TxInfoItem::set_type(::TxInfoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TxInfoItem.type)
}

// string txhash = 2;
inline void TxInfoItem::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxInfoItem::txhash() const {
  // @@protoc_insertion_point(field_get:TxInfoItem.txhash)
  return _internal_txhash();
}
inline void TxInfoItem::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:TxInfoItem.txhash)
}
inline std::string* TxInfoItem::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:TxInfoItem.txhash)
  return _internal_mutable_txhash();
}
inline const std::string& TxInfoItem::_internal_txhash() const {
  return txhash_.GetNoArena();
}
inline void TxInfoItem::_internal_set_txhash(const std::string& value) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxInfoItem::set_txhash(std::string&& value) {
  
  txhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxInfoItem.txhash)
}
inline void TxInfoItem::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxInfoItem.txhash)
}
inline void TxInfoItem::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxInfoItem.txhash)
}
inline std::string* TxInfoItem::_internal_mutable_txhash() {
  
  return txhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxInfoItem::release_txhash() {
  // @@protoc_insertion_point(field_release:TxInfoItem.txhash)
  
  return txhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfoItem::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:TxInfoItem.txhash)
}

// uint64 time = 3;
inline void TxInfoItem::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxInfoItem::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxInfoItem::time() const {
  // @@protoc_insertion_point(field_get:TxInfoItem.time)
  return _internal_time();
}
inline void TxInfoItem::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void TxInfoItem::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:TxInfoItem.time)
}

// string amount = 4;
inline void TxInfoItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxInfoItem::amount() const {
  // @@protoc_insertion_point(field_get:TxInfoItem.amount)
  return _internal_amount();
}
inline void TxInfoItem::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TxInfoItem.amount)
}
inline std::string* TxInfoItem::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TxInfoItem.amount)
  return _internal_mutable_amount();
}
inline const std::string& TxInfoItem::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void TxInfoItem::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxInfoItem::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxInfoItem.amount)
}
inline void TxInfoItem::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxInfoItem.amount)
}
inline void TxInfoItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxInfoItem.amount)
}
inline std::string* TxInfoItem::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxInfoItem::release_amount() {
  // @@protoc_insertion_point(field_release:TxInfoItem.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxInfoItem::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:TxInfoItem.amount)
}

// -------------------------------------------------------------------

// GetTxInfoListAck

// string version = 1;
inline void GetTxInfoListAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoListAck::version() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListAck.version)
  return _internal_version();
}
inline void GetTxInfoListAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListAck.version)
}
inline std::string* GetTxInfoListAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoListAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetTxInfoListAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetTxInfoListAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoListAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoListAck.version)
}
inline void GetTxInfoListAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoListAck.version)
}
inline void GetTxInfoListAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoListAck.version)
}
inline std::string* GetTxInfoListAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoListAck::release_version() {
  // @@protoc_insertion_point(field_release:GetTxInfoListAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoListAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoListAck.version)
}

// int32 code = 2;
inline void GetTxInfoListAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxInfoListAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxInfoListAck::code() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListAck.code)
  return _internal_code();
}
inline void GetTxInfoListAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetTxInfoListAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListAck.code)
}

// string description = 3;
inline void GetTxInfoListAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoListAck::description() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListAck.description)
  return _internal_description();
}
inline void GetTxInfoListAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListAck.description)
}
inline std::string* GetTxInfoListAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoListAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetTxInfoListAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetTxInfoListAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoListAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoListAck.description)
}
inline void GetTxInfoListAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoListAck.description)
}
inline void GetTxInfoListAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoListAck.description)
}
inline std::string* GetTxInfoListAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoListAck::release_description() {
  // @@protoc_insertion_point(field_release:GetTxInfoListAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoListAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoListAck.description)
}

// repeated .TxInfoItem list = 4;
inline int GetTxInfoListAck::_internal_list_size() const {
  return list_.size();
}
inline int GetTxInfoListAck::list_size() const {
  return _internal_list_size();
}
inline void GetTxInfoListAck::clear_list() {
  list_.Clear();
}
inline ::TxInfoItem* GetTxInfoListAck::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:GetTxInfoListAck.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfoItem >*
GetTxInfoListAck::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:GetTxInfoListAck.list)
  return &list_;
}
inline const ::TxInfoItem& GetTxInfoListAck::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::TxInfoItem& GetTxInfoListAck::list(int index) const {
  // @@protoc_insertion_point(field_get:GetTxInfoListAck.list)
  return _internal_list(index);
}
inline ::TxInfoItem* GetTxInfoListAck::_internal_add_list() {
  return list_.Add();
}
inline ::TxInfoItem* GetTxInfoListAck::add_list() {
  // @@protoc_insertion_point(field_add:GetTxInfoListAck.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxInfoItem >&
GetTxInfoListAck::list() const {
  // @@protoc_insertion_point(field_list:GetTxInfoListAck.list)
  return list_;
}

// uint32 total = 5;
inline void GetTxInfoListAck::clear_total() {
  total_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListAck::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListAck::total() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListAck.total)
  return _internal_total();
}
inline void GetTxInfoListAck::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ = value;
}
inline void GetTxInfoListAck::set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListAck.total)
}

// uint32 index = 6;
inline void GetTxInfoListAck::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListAck::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoListAck::index() const {
  // @@protoc_insertion_point(field_get:GetTxInfoListAck.index)
  return _internal_index();
}
inline void GetTxInfoListAck::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void GetTxInfoListAck::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:GetTxInfoListAck.index)
}

// -------------------------------------------------------------------

// GetTxInfoDetailReq

// string version = 1;
inline void GetTxInfoDetailReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailReq::version() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailReq.version)
  return _internal_version();
}
inline void GetTxInfoDetailReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailReq.version)
}
inline std::string* GetTxInfoDetailReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetTxInfoDetailReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetTxInfoDetailReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailReq.version)
}
inline void GetTxInfoDetailReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailReq.version)
}
inline void GetTxInfoDetailReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailReq.version)
}
inline std::string* GetTxInfoDetailReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailReq::release_version() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailReq.version)
}

// string txhash = 2;
inline void GetTxInfoDetailReq::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailReq::txhash() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailReq.txhash)
  return _internal_txhash();
}
inline void GetTxInfoDetailReq::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailReq.txhash)
}
inline std::string* GetTxInfoDetailReq::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailReq.txhash)
  return _internal_mutable_txhash();
}
inline const std::string& GetTxInfoDetailReq::_internal_txhash() const {
  return txhash_.GetNoArena();
}
inline void GetTxInfoDetailReq::_internal_set_txhash(const std::string& value) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailReq::set_txhash(std::string&& value) {
  
  txhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailReq.txhash)
}
inline void GetTxInfoDetailReq::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailReq.txhash)
}
inline void GetTxInfoDetailReq::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailReq.txhash)
}
inline std::string* GetTxInfoDetailReq::_internal_mutable_txhash() {
  
  return txhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailReq::release_txhash() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailReq.txhash)
  
  return txhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailReq::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailReq.txhash)
}

// string addr = 3;
inline void GetTxInfoDetailReq::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailReq::addr() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailReq.addr)
  return _internal_addr();
}
inline void GetTxInfoDetailReq::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailReq.addr)
}
inline std::string* GetTxInfoDetailReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailReq.addr)
  return _internal_mutable_addr();
}
inline const std::string& GetTxInfoDetailReq::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void GetTxInfoDetailReq::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailReq::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailReq.addr)
}
inline void GetTxInfoDetailReq::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailReq.addr)
}
inline void GetTxInfoDetailReq::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailReq.addr)
}
inline std::string* GetTxInfoDetailReq::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailReq::release_addr() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailReq.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailReq::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailReq.addr)
}

// -------------------------------------------------------------------

// GetTxInfoDetailAck

// string version = 1;
inline void GetTxInfoDetailAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::version() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.version)
  return _internal_version();
}
inline void GetTxInfoDetailAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.version)
}
inline std::string* GetTxInfoDetailAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetTxInfoDetailAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.version)
}
inline void GetTxInfoDetailAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.version)
}
inline void GetTxInfoDetailAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.version)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_version() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.version)
}

// int32 code = 2;
inline void GetTxInfoDetailAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxInfoDetailAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxInfoDetailAck::code() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.code)
  return _internal_code();
}
inline void GetTxInfoDetailAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetTxInfoDetailAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.code)
}

// string description = 3;
inline void GetTxInfoDetailAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::description() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.description)
  return _internal_description();
}
inline void GetTxInfoDetailAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.description)
}
inline std::string* GetTxInfoDetailAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetTxInfoDetailAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.description)
}
inline void GetTxInfoDetailAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.description)
}
inline void GetTxInfoDetailAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.description)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_description() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.description)
}

// string blockhash = 4;
inline void GetTxInfoDetailAck::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::blockhash() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.blockhash)
  return _internal_blockhash();
}
inline void GetTxInfoDetailAck::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.blockhash)
}
inline std::string* GetTxInfoDetailAck::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& GetTxInfoDetailAck::_internal_blockhash() const {
  return blockhash_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_blockhash(std::string&& value) {
  
  blockhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.blockhash)
}
inline void GetTxInfoDetailAck::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.blockhash)
}
inline void GetTxInfoDetailAck::set_blockhash(const char* value, size_t size) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.blockhash)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_blockhash() {
  
  return blockhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_blockhash() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.blockhash)
  
  return blockhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.blockhash)
}

// uint32 blockheight = 5;
inline void GetTxInfoDetailAck::clear_blockheight() {
  blockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoDetailAck::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTxInfoDetailAck::blockheight() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.blockheight)
  return _internal_blockheight();
}
inline void GetTxInfoDetailAck::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blockheight_ = value;
}
inline void GetTxInfoDetailAck::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.blockheight)
}

// string txhash = 6;
inline void GetTxInfoDetailAck::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::txhash() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.txhash)
  return _internal_txhash();
}
inline void GetTxInfoDetailAck::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.txhash)
}
inline std::string* GetTxInfoDetailAck::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.txhash)
  return _internal_mutable_txhash();
}
inline const std::string& GetTxInfoDetailAck::_internal_txhash() const {
  return txhash_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_txhash(const std::string& value) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_txhash(std::string&& value) {
  
  txhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.txhash)
}
inline void GetTxInfoDetailAck::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.txhash)
}
inline void GetTxInfoDetailAck::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.txhash)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_txhash() {
  
  return txhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_txhash() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.txhash)
  
  return txhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.txhash)
}

// uint64 time = 7;
inline void GetTxInfoDetailAck::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTxInfoDetailAck::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTxInfoDetailAck::time() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.time)
  return _internal_time();
}
inline void GetTxInfoDetailAck::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void GetTxInfoDetailAck::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.time)
}

// repeated string fromaddr = 8;
inline int GetTxInfoDetailAck::_internal_fromaddr_size() const {
  return fromaddr_.size();
}
inline int GetTxInfoDetailAck::fromaddr_size() const {
  return _internal_fromaddr_size();
}
inline void GetTxInfoDetailAck::clear_fromaddr() {
  fromaddr_.Clear();
}
inline std::string* GetTxInfoDetailAck::add_fromaddr() {
  // @@protoc_insertion_point(field_add_mutable:GetTxInfoDetailAck.fromaddr)
  return _internal_add_fromaddr();
}
inline const std::string& GetTxInfoDetailAck::_internal_fromaddr(int index) const {
  return fromaddr_.Get(index);
}
inline const std::string& GetTxInfoDetailAck::fromaddr(int index) const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.fromaddr)
  return _internal_fromaddr(index);
}
inline std::string* GetTxInfoDetailAck::mutable_fromaddr(int index) {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.fromaddr)
  return fromaddr_.Mutable(index);
}
inline void GetTxInfoDetailAck::set_fromaddr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.fromaddr)
  fromaddr_.Mutable(index)->assign(value);
}
inline void GetTxInfoDetailAck::set_fromaddr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.fromaddr)
  fromaddr_.Mutable(index)->assign(std::move(value));
}
inline void GetTxInfoDetailAck::set_fromaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.fromaddr)
}
inline void GetTxInfoDetailAck::set_fromaddr(int index, const char* value, size_t size) {
  fromaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.fromaddr)
}
inline std::string* GetTxInfoDetailAck::_internal_add_fromaddr() {
  return fromaddr_.Add();
}
inline void GetTxInfoDetailAck::add_fromaddr(const std::string& value) {
  fromaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetTxInfoDetailAck.fromaddr)
}
inline void GetTxInfoDetailAck::add_fromaddr(std::string&& value) {
  fromaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetTxInfoDetailAck.fromaddr)
}
inline void GetTxInfoDetailAck::add_fromaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetTxInfoDetailAck.fromaddr)
}
inline void GetTxInfoDetailAck::add_fromaddr(const char* value, size_t size) {
  fromaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetTxInfoDetailAck.fromaddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxInfoDetailAck::fromaddr() const {
  // @@protoc_insertion_point(field_list:GetTxInfoDetailAck.fromaddr)
  return fromaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxInfoDetailAck::mutable_fromaddr() {
  // @@protoc_insertion_point(field_mutable_list:GetTxInfoDetailAck.fromaddr)
  return &fromaddr_;
}

// repeated .ToAddr toaddr = 9;
inline int GetTxInfoDetailAck::_internal_toaddr_size() const {
  return toaddr_.size();
}
inline int GetTxInfoDetailAck::toaddr_size() const {
  return _internal_toaddr_size();
}
inline void GetTxInfoDetailAck::clear_toaddr() {
  toaddr_.Clear();
}
inline ::ToAddr* GetTxInfoDetailAck::mutable_toaddr(int index) {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.toaddr)
  return toaddr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >*
GetTxInfoDetailAck::mutable_toaddr() {
  // @@protoc_insertion_point(field_mutable_list:GetTxInfoDetailAck.toaddr)
  return &toaddr_;
}
inline const ::ToAddr& GetTxInfoDetailAck::_internal_toaddr(int index) const {
  return toaddr_.Get(index);
}
inline const ::ToAddr& GetTxInfoDetailAck::toaddr(int index) const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.toaddr)
  return _internal_toaddr(index);
}
inline ::ToAddr* GetTxInfoDetailAck::_internal_add_toaddr() {
  return toaddr_.Add();
}
inline ::ToAddr* GetTxInfoDetailAck::add_toaddr() {
  // @@protoc_insertion_point(field_add:GetTxInfoDetailAck.toaddr)
  return _internal_add_toaddr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ToAddr >&
GetTxInfoDetailAck::toaddr() const {
  // @@protoc_insertion_point(field_list:GetTxInfoDetailAck.toaddr)
  return toaddr_;
}

// string gas = 10;
inline void GetTxInfoDetailAck::clear_gas() {
  gas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::gas() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.gas)
  return _internal_gas();
}
inline void GetTxInfoDetailAck::set_gas(const std::string& value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.gas)
}
inline std::string* GetTxInfoDetailAck::mutable_gas() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.gas)
  return _internal_mutable_gas();
}
inline const std::string& GetTxInfoDetailAck::_internal_gas() const {
  return gas_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_gas(const std::string& value) {
  
  gas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_gas(std::string&& value) {
  
  gas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.gas)
}
inline void GetTxInfoDetailAck::set_gas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.gas)
}
inline void GetTxInfoDetailAck::set_gas(const char* value, size_t size) {
  
  gas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.gas)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_gas() {
  
  return gas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_gas() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.gas)
  
  return gas_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_gas(std::string* gas) {
  if (gas != nullptr) {
    
  } else {
    
  }
  gas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gas);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.gas)
}

// string amount = 11;
inline void GetTxInfoDetailAck::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::amount() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.amount)
  return _internal_amount();
}
inline void GetTxInfoDetailAck::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.amount)
}
inline std::string* GetTxInfoDetailAck::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.amount)
  return _internal_mutable_amount();
}
inline const std::string& GetTxInfoDetailAck::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.amount)
}
inline void GetTxInfoDetailAck::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.amount)
}
inline void GetTxInfoDetailAck::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.amount)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_amount() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.amount)
}

// string award = 12;
inline void GetTxInfoDetailAck::clear_award() {
  award_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::award() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.award)
  return _internal_award();
}
inline void GetTxInfoDetailAck::set_award(const std::string& value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.award)
}
inline std::string* GetTxInfoDetailAck::mutable_award() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.award)
  return _internal_mutable_award();
}
inline const std::string& GetTxInfoDetailAck::_internal_award() const {
  return award_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_award(const std::string& value) {
  
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_award(std::string&& value) {
  
  award_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.award)
}
inline void GetTxInfoDetailAck::set_award(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.award)
}
inline void GetTxInfoDetailAck::set_award(const char* value, size_t size) {
  
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.award)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_award() {
  
  return award_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_award() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.award)
  
  return award_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_award(std::string* award) {
  if (award != nullptr) {
    
  } else {
    
  }
  award_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), award);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.award)
}

// string awardGas = 13;
inline void GetTxInfoDetailAck::clear_awardgas() {
  awardgas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::awardgas() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.awardGas)
  return _internal_awardgas();
}
inline void GetTxInfoDetailAck::set_awardgas(const std::string& value) {
  _internal_set_awardgas(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.awardGas)
}
inline std::string* GetTxInfoDetailAck::mutable_awardgas() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.awardGas)
  return _internal_mutable_awardgas();
}
inline const std::string& GetTxInfoDetailAck::_internal_awardgas() const {
  return awardgas_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_awardgas(const std::string& value) {
  
  awardgas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_awardgas(std::string&& value) {
  
  awardgas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.awardGas)
}
inline void GetTxInfoDetailAck::set_awardgas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awardgas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.awardGas)
}
inline void GetTxInfoDetailAck::set_awardgas(const char* value, size_t size) {
  
  awardgas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.awardGas)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_awardgas() {
  
  return awardgas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_awardgas() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.awardGas)
  
  return awardgas_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_awardgas(std::string* awardgas) {
  if (awardgas != nullptr) {
    
  } else {
    
  }
  awardgas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awardgas);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.awardGas)
}

// string awardAmount = 14;
inline void GetTxInfoDetailAck::clear_awardamount() {
  awardamount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxInfoDetailAck::awardamount() const {
  // @@protoc_insertion_point(field_get:GetTxInfoDetailAck.awardAmount)
  return _internal_awardamount();
}
inline void GetTxInfoDetailAck::set_awardamount(const std::string& value) {
  _internal_set_awardamount(value);
  // @@protoc_insertion_point(field_set:GetTxInfoDetailAck.awardAmount)
}
inline std::string* GetTxInfoDetailAck::mutable_awardamount() {
  // @@protoc_insertion_point(field_mutable:GetTxInfoDetailAck.awardAmount)
  return _internal_mutable_awardamount();
}
inline const std::string& GetTxInfoDetailAck::_internal_awardamount() const {
  return awardamount_.GetNoArena();
}
inline void GetTxInfoDetailAck::_internal_set_awardamount(const std::string& value) {
  
  awardamount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxInfoDetailAck::set_awardamount(std::string&& value) {
  
  awardamount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxInfoDetailAck.awardAmount)
}
inline void GetTxInfoDetailAck::set_awardamount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awardamount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxInfoDetailAck.awardAmount)
}
inline void GetTxInfoDetailAck::set_awardamount(const char* value, size_t size) {
  
  awardamount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxInfoDetailAck.awardAmount)
}
inline std::string* GetTxInfoDetailAck::_internal_mutable_awardamount() {
  
  return awardamount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxInfoDetailAck::release_awardamount() {
  // @@protoc_insertion_point(field_release:GetTxInfoDetailAck.awardAmount)
  
  return awardamount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxInfoDetailAck::set_allocated_awardamount(std::string* awardamount) {
  if (awardamount != nullptr) {
    
  } else {
    
  }
  awardamount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awardamount);
  // @@protoc_insertion_point(field_set_allocated:GetTxInfoDetailAck.awardAmount)
}

// -------------------------------------------------------------------

// GetBlockInfoListReq

// string version = 1;
inline void GetBlockInfoListReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoListReq::version() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListReq.version)
  return _internal_version();
}
inline void GetBlockInfoListReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListReq.version)
}
inline std::string* GetBlockInfoListReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoListReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetBlockInfoListReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetBlockInfoListReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoListReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoListReq.version)
}
inline void GetBlockInfoListReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoListReq.version)
}
inline void GetBlockInfoListReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoListReq.version)
}
inline std::string* GetBlockInfoListReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoListReq::release_version() {
  // @@protoc_insertion_point(field_release:GetBlockInfoListReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoListReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoListReq.version)
}

// uint32 index = 2;
inline void GetBlockInfoListReq::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListReq::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListReq::index() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListReq.index)
  return _internal_index();
}
inline void GetBlockInfoListReq::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void GetBlockInfoListReq::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListReq.index)
}

// uint32 count = 3;
inline void GetBlockInfoListReq::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListReq::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListReq::count() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListReq.count)
  return _internal_count();
}
inline void GetBlockInfoListReq::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void GetBlockInfoListReq::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListReq.count)
}

// -------------------------------------------------------------------

// BlockInfoItem

// string blockhash = 1;
inline void BlockInfoItem::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfoItem::blockhash() const {
  // @@protoc_insertion_point(field_get:BlockInfoItem.blockhash)
  return _internal_blockhash();
}
inline void BlockInfoItem::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:BlockInfoItem.blockhash)
}
inline std::string* BlockInfoItem::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:BlockInfoItem.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& BlockInfoItem::_internal_blockhash() const {
  return blockhash_.GetNoArena();
}
inline void BlockInfoItem::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfoItem::set_blockhash(std::string&& value) {
  
  blockhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfoItem.blockhash)
}
inline void BlockInfoItem::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfoItem.blockhash)
}
inline void BlockInfoItem::set_blockhash(const char* value, size_t size) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfoItem.blockhash)
}
inline std::string* BlockInfoItem::_internal_mutable_blockhash() {
  
  return blockhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfoItem::release_blockhash() {
  // @@protoc_insertion_point(field_release:BlockInfoItem.blockhash)
  
  return blockhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfoItem::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:BlockInfoItem.blockhash)
}

// uint32 blockheight = 2;
inline void BlockInfoItem::clear_blockheight() {
  blockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfoItem::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockInfoItem::blockheight() const {
  // @@protoc_insertion_point(field_get:BlockInfoItem.blockheight)
  return _internal_blockheight();
}
inline void BlockInfoItem::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blockheight_ = value;
}
inline void BlockInfoItem::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:BlockInfoItem.blockheight)
}

// uint64 time = 3;
inline void BlockInfoItem::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfoItem::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfoItem::time() const {
  // @@protoc_insertion_point(field_get:BlockInfoItem.time)
  return _internal_time();
}
inline void BlockInfoItem::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void BlockInfoItem::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:BlockInfoItem.time)
}

// string txHash = 4;
inline void BlockInfoItem::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfoItem::txhash() const {
  // @@protoc_insertion_point(field_get:BlockInfoItem.txHash)
  return _internal_txhash();
}
inline void BlockInfoItem::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:BlockInfoItem.txHash)
}
inline std::string* BlockInfoItem::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:BlockInfoItem.txHash)
  return _internal_mutable_txhash();
}
inline const std::string& BlockInfoItem::_internal_txhash() const {
  return txhash_.GetNoArena();
}
inline void BlockInfoItem::_internal_set_txhash(const std::string& value) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfoItem::set_txhash(std::string&& value) {
  
  txhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfoItem.txHash)
}
inline void BlockInfoItem::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfoItem.txHash)
}
inline void BlockInfoItem::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfoItem.txHash)
}
inline std::string* BlockInfoItem::_internal_mutable_txhash() {
  
  return txhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfoItem::release_txhash() {
  // @@protoc_insertion_point(field_release:BlockInfoItem.txHash)
  
  return txhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfoItem::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:BlockInfoItem.txHash)
}

// repeated string fromAddr = 5;
inline int BlockInfoItem::_internal_fromaddr_size() const {
  return fromaddr_.size();
}
inline int BlockInfoItem::fromaddr_size() const {
  return _internal_fromaddr_size();
}
inline void BlockInfoItem::clear_fromaddr() {
  fromaddr_.Clear();
}
inline std::string* BlockInfoItem::add_fromaddr() {
  // @@protoc_insertion_point(field_add_mutable:BlockInfoItem.fromAddr)
  return _internal_add_fromaddr();
}
inline const std::string& BlockInfoItem::_internal_fromaddr(int index) const {
  return fromaddr_.Get(index);
}
inline const std::string& BlockInfoItem::fromaddr(int index) const {
  // @@protoc_insertion_point(field_get:BlockInfoItem.fromAddr)
  return _internal_fromaddr(index);
}
inline std::string* BlockInfoItem::mutable_fromaddr(int index) {
  // @@protoc_insertion_point(field_mutable:BlockInfoItem.fromAddr)
  return fromaddr_.Mutable(index);
}
inline void BlockInfoItem::set_fromaddr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BlockInfoItem.fromAddr)
  fromaddr_.Mutable(index)->assign(value);
}
inline void BlockInfoItem::set_fromaddr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BlockInfoItem.fromAddr)
  fromaddr_.Mutable(index)->assign(std::move(value));
}
inline void BlockInfoItem::set_fromaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BlockInfoItem.fromAddr)
}
inline void BlockInfoItem::set_fromaddr(int index, const char* value, size_t size) {
  fromaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BlockInfoItem.fromAddr)
}
inline std::string* BlockInfoItem::_internal_add_fromaddr() {
  return fromaddr_.Add();
}
inline void BlockInfoItem::add_fromaddr(const std::string& value) {
  fromaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BlockInfoItem.fromAddr)
}
inline void BlockInfoItem::add_fromaddr(std::string&& value) {
  fromaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BlockInfoItem.fromAddr)
}
inline void BlockInfoItem::add_fromaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BlockInfoItem.fromAddr)
}
inline void BlockInfoItem::add_fromaddr(const char* value, size_t size) {
  fromaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BlockInfoItem.fromAddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockInfoItem::fromaddr() const {
  // @@protoc_insertion_point(field_list:BlockInfoItem.fromAddr)
  return fromaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockInfoItem::mutable_fromaddr() {
  // @@protoc_insertion_point(field_mutable_list:BlockInfoItem.fromAddr)
  return &fromaddr_;
}

// repeated string toAddr = 6;
inline int BlockInfoItem::_internal_toaddr_size() const {
  return toaddr_.size();
}
inline int BlockInfoItem::toaddr_size() const {
  return _internal_toaddr_size();
}
inline void BlockInfoItem::clear_toaddr() {
  toaddr_.Clear();
}
inline std::string* BlockInfoItem::add_toaddr() {
  // @@protoc_insertion_point(field_add_mutable:BlockInfoItem.toAddr)
  return _internal_add_toaddr();
}
inline const std::string& BlockInfoItem::_internal_toaddr(int index) const {
  return toaddr_.Get(index);
}
inline const std::string& BlockInfoItem::toaddr(int index) const {
  // @@protoc_insertion_point(field_get:BlockInfoItem.toAddr)
  return _internal_toaddr(index);
}
inline std::string* BlockInfoItem::mutable_toaddr(int index) {
  // @@protoc_insertion_point(field_mutable:BlockInfoItem.toAddr)
  return toaddr_.Mutable(index);
}
inline void BlockInfoItem::set_toaddr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BlockInfoItem.toAddr)
  toaddr_.Mutable(index)->assign(value);
}
inline void BlockInfoItem::set_toaddr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BlockInfoItem.toAddr)
  toaddr_.Mutable(index)->assign(std::move(value));
}
inline void BlockInfoItem::set_toaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BlockInfoItem.toAddr)
}
inline void BlockInfoItem::set_toaddr(int index, const char* value, size_t size) {
  toaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BlockInfoItem.toAddr)
}
inline std::string* BlockInfoItem::_internal_add_toaddr() {
  return toaddr_.Add();
}
inline void BlockInfoItem::add_toaddr(const std::string& value) {
  toaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BlockInfoItem.toAddr)
}
inline void BlockInfoItem::add_toaddr(std::string&& value) {
  toaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BlockInfoItem.toAddr)
}
inline void BlockInfoItem::add_toaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BlockInfoItem.toAddr)
}
inline void BlockInfoItem::add_toaddr(const char* value, size_t size) {
  toaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BlockInfoItem.toAddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockInfoItem::toaddr() const {
  // @@protoc_insertion_point(field_list:BlockInfoItem.toAddr)
  return toaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockInfoItem::mutable_toaddr() {
  // @@protoc_insertion_point(field_mutable_list:BlockInfoItem.toAddr)
  return &toaddr_;
}

// string amount = 7;
inline void BlockInfoItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfoItem::amount() const {
  // @@protoc_insertion_point(field_get:BlockInfoItem.amount)
  return _internal_amount();
}
inline void BlockInfoItem::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:BlockInfoItem.amount)
}
inline std::string* BlockInfoItem::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:BlockInfoItem.amount)
  return _internal_mutable_amount();
}
inline const std::string& BlockInfoItem::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void BlockInfoItem::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfoItem::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfoItem.amount)
}
inline void BlockInfoItem::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfoItem.amount)
}
inline void BlockInfoItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfoItem.amount)
}
inline std::string* BlockInfoItem::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfoItem::release_amount() {
  // @@protoc_insertion_point(field_release:BlockInfoItem.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfoItem::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:BlockInfoItem.amount)
}

// -------------------------------------------------------------------

// GetBlockInfoListAck

// string version = 1;
inline void GetBlockInfoListAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoListAck::version() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListAck.version)
  return _internal_version();
}
inline void GetBlockInfoListAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListAck.version)
}
inline std::string* GetBlockInfoListAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoListAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetBlockInfoListAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetBlockInfoListAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoListAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoListAck.version)
}
inline void GetBlockInfoListAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoListAck.version)
}
inline void GetBlockInfoListAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoListAck.version)
}
inline std::string* GetBlockInfoListAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoListAck::release_version() {
  // @@protoc_insertion_point(field_release:GetBlockInfoListAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoListAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoListAck.version)
}

// int32 code = 2;
inline void GetBlockInfoListAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoListAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoListAck::code() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListAck.code)
  return _internal_code();
}
inline void GetBlockInfoListAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetBlockInfoListAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListAck.code)
}

// string description = 3;
inline void GetBlockInfoListAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoListAck::description() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListAck.description)
  return _internal_description();
}
inline void GetBlockInfoListAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListAck.description)
}
inline std::string* GetBlockInfoListAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoListAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetBlockInfoListAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetBlockInfoListAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoListAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoListAck.description)
}
inline void GetBlockInfoListAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoListAck.description)
}
inline void GetBlockInfoListAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoListAck.description)
}
inline std::string* GetBlockInfoListAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoListAck::release_description() {
  // @@protoc_insertion_point(field_release:GetBlockInfoListAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoListAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoListAck.description)
}

// uint32 top = 4;
inline void GetBlockInfoListAck::clear_top() {
  top_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListAck::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListAck::top() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListAck.top)
  return _internal_top();
}
inline void GetBlockInfoListAck::_internal_set_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  top_ = value;
}
inline void GetBlockInfoListAck::set_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListAck.top)
}

// uint32 txcount = 5;
inline void GetBlockInfoListAck::clear_txcount() {
  txcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListAck::_internal_txcount() const {
  return txcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoListAck::txcount() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListAck.txcount)
  return _internal_txcount();
}
inline void GetBlockInfoListAck::_internal_set_txcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  txcount_ = value;
}
inline void GetBlockInfoListAck::set_txcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_txcount(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoListAck.txcount)
}

// repeated .BlockInfoItem list = 6;
inline int GetBlockInfoListAck::_internal_list_size() const {
  return list_.size();
}
inline int GetBlockInfoListAck::list_size() const {
  return _internal_list_size();
}
inline void GetBlockInfoListAck::clear_list() {
  list_.Clear();
}
inline ::BlockInfoItem* GetBlockInfoListAck::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoListAck.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoItem >*
GetBlockInfoListAck::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:GetBlockInfoListAck.list)
  return &list_;
}
inline const ::BlockInfoItem& GetBlockInfoListAck::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::BlockInfoItem& GetBlockInfoListAck::list(int index) const {
  // @@protoc_insertion_point(field_get:GetBlockInfoListAck.list)
  return _internal_list(index);
}
inline ::BlockInfoItem* GetBlockInfoListAck::_internal_add_list() {
  return list_.Add();
}
inline ::BlockInfoItem* GetBlockInfoListAck::add_list() {
  // @@protoc_insertion_point(field_add:GetBlockInfoListAck.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoItem >&
GetBlockInfoListAck::list() const {
  // @@protoc_insertion_point(field_list:GetBlockInfoListAck.list)
  return list_;
}

// -------------------------------------------------------------------

// GetBlockInfoDetailReq

// string version = 1;
inline void GetBlockInfoDetailReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailReq::version() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailReq.version)
  return _internal_version();
}
inline void GetBlockInfoDetailReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailReq.version)
}
inline std::string* GetBlockInfoDetailReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetBlockInfoDetailReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetBlockInfoDetailReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailReq.version)
}
inline void GetBlockInfoDetailReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailReq.version)
}
inline void GetBlockInfoDetailReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailReq.version)
}
inline std::string* GetBlockInfoDetailReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailReq::release_version() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailReq.version)
}

// string blockhash = 2;
inline void GetBlockInfoDetailReq::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailReq::blockhash() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailReq.blockhash)
  return _internal_blockhash();
}
inline void GetBlockInfoDetailReq::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailReq.blockhash)
}
inline std::string* GetBlockInfoDetailReq::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailReq.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& GetBlockInfoDetailReq::_internal_blockhash() const {
  return blockhash_.GetNoArena();
}
inline void GetBlockInfoDetailReq::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailReq::set_blockhash(std::string&& value) {
  
  blockhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailReq.blockhash)
}
inline void GetBlockInfoDetailReq::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailReq.blockhash)
}
inline void GetBlockInfoDetailReq::set_blockhash(const char* value, size_t size) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailReq.blockhash)
}
inline std::string* GetBlockInfoDetailReq::_internal_mutable_blockhash() {
  
  return blockhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailReq::release_blockhash() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailReq.blockhash)
  
  return blockhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailReq::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailReq.blockhash)
}

// -------------------------------------------------------------------

// BlockInfoOutAddr

// string addr = 1;
inline void BlockInfoOutAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfoOutAddr::addr() const {
  // @@protoc_insertion_point(field_get:BlockInfoOutAddr.addr)
  return _internal_addr();
}
inline void BlockInfoOutAddr::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:BlockInfoOutAddr.addr)
}
inline std::string* BlockInfoOutAddr::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:BlockInfoOutAddr.addr)
  return _internal_mutable_addr();
}
inline const std::string& BlockInfoOutAddr::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void BlockInfoOutAddr::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfoOutAddr::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfoOutAddr.addr)
}
inline void BlockInfoOutAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfoOutAddr.addr)
}
inline void BlockInfoOutAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfoOutAddr.addr)
}
inline std::string* BlockInfoOutAddr::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfoOutAddr::release_addr() {
  // @@protoc_insertion_point(field_release:BlockInfoOutAddr.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfoOutAddr::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:BlockInfoOutAddr.addr)
}

// string amount = 2;
inline void BlockInfoOutAddr::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInfoOutAddr::amount() const {
  // @@protoc_insertion_point(field_get:BlockInfoOutAddr.amount)
  return _internal_amount();
}
inline void BlockInfoOutAddr::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:BlockInfoOutAddr.amount)
}
inline std::string* BlockInfoOutAddr::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:BlockInfoOutAddr.amount)
  return _internal_mutable_amount();
}
inline const std::string& BlockInfoOutAddr::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void BlockInfoOutAddr::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockInfoOutAddr::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockInfoOutAddr.amount)
}
inline void BlockInfoOutAddr::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockInfoOutAddr.amount)
}
inline void BlockInfoOutAddr::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockInfoOutAddr.amount)
}
inline std::string* BlockInfoOutAddr::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInfoOutAddr::release_amount() {
  // @@protoc_insertion_point(field_release:BlockInfoOutAddr.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInfoOutAddr::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:BlockInfoOutAddr.amount)
}

// -------------------------------------------------------------------

// GetBlockInfoDetailAck

// string version = 1;
inline void GetBlockInfoDetailAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailAck::version() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.version)
  return _internal_version();
}
inline void GetBlockInfoDetailAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.version)
}
inline std::string* GetBlockInfoDetailAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetBlockInfoDetailAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetBlockInfoDetailAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailAck.version)
}
inline void GetBlockInfoDetailAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailAck.version)
}
inline void GetBlockInfoDetailAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailAck.version)
}
inline std::string* GetBlockInfoDetailAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailAck::release_version() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailAck.version)
}

// int32 code = 2;
inline void GetBlockInfoDetailAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoDetailAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBlockInfoDetailAck::code() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.code)
  return _internal_code();
}
inline void GetBlockInfoDetailAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetBlockInfoDetailAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.code)
}

// string description = 3;
inline void GetBlockInfoDetailAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailAck::description() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.description)
  return _internal_description();
}
inline void GetBlockInfoDetailAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.description)
}
inline std::string* GetBlockInfoDetailAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetBlockInfoDetailAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetBlockInfoDetailAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailAck.description)
}
inline void GetBlockInfoDetailAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailAck.description)
}
inline void GetBlockInfoDetailAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailAck.description)
}
inline std::string* GetBlockInfoDetailAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailAck::release_description() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailAck.description)
}

// string blockhash = 4;
inline void GetBlockInfoDetailAck::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailAck::blockhash() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.blockhash)
  return _internal_blockhash();
}
inline void GetBlockInfoDetailAck::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.blockhash)
}
inline std::string* GetBlockInfoDetailAck::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& GetBlockInfoDetailAck::_internal_blockhash() const {
  return blockhash_.GetNoArena();
}
inline void GetBlockInfoDetailAck::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailAck::set_blockhash(std::string&& value) {
  
  blockhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailAck.blockhash)
}
inline void GetBlockInfoDetailAck::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailAck.blockhash)
}
inline void GetBlockInfoDetailAck::set_blockhash(const char* value, size_t size) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailAck.blockhash)
}
inline std::string* GetBlockInfoDetailAck::_internal_mutable_blockhash() {
  
  return blockhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailAck::release_blockhash() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailAck.blockhash)
  
  return blockhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailAck::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailAck.blockhash)
}

// uint32 blockheight = 5;
inline void GetBlockInfoDetailAck::clear_blockheight() {
  blockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoDetailAck::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBlockInfoDetailAck::blockheight() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.blockheight)
  return _internal_blockheight();
}
inline void GetBlockInfoDetailAck::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blockheight_ = value;
}
inline void GetBlockInfoDetailAck::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.blockheight)
}

// string merkleRoot = 6;
inline void GetBlockInfoDetailAck::clear_merkleroot() {
  merkleroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailAck::merkleroot() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.merkleRoot)
  return _internal_merkleroot();
}
inline void GetBlockInfoDetailAck::set_merkleroot(const std::string& value) {
  _internal_set_merkleroot(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.merkleRoot)
}
inline std::string* GetBlockInfoDetailAck::mutable_merkleroot() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.merkleRoot)
  return _internal_mutable_merkleroot();
}
inline const std::string& GetBlockInfoDetailAck::_internal_merkleroot() const {
  return merkleroot_.GetNoArena();
}
inline void GetBlockInfoDetailAck::_internal_set_merkleroot(const std::string& value) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailAck::set_merkleroot(std::string&& value) {
  
  merkleroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailAck.merkleRoot)
}
inline void GetBlockInfoDetailAck::set_merkleroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailAck.merkleRoot)
}
inline void GetBlockInfoDetailAck::set_merkleroot(const char* value, size_t size) {
  
  merkleroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailAck.merkleRoot)
}
inline std::string* GetBlockInfoDetailAck::_internal_mutable_merkleroot() {
  
  return merkleroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailAck::release_merkleroot() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailAck.merkleRoot)
  
  return merkleroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailAck::set_allocated_merkleroot(std::string* merkleroot) {
  if (merkleroot != nullptr) {
    
  } else {
    
  }
  merkleroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merkleroot);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailAck.merkleRoot)
}

// string prevHash = 7;
inline void GetBlockInfoDetailAck::clear_prevhash() {
  prevhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailAck::prevhash() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.prevHash)
  return _internal_prevhash();
}
inline void GetBlockInfoDetailAck::set_prevhash(const std::string& value) {
  _internal_set_prevhash(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.prevHash)
}
inline std::string* GetBlockInfoDetailAck::mutable_prevhash() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.prevHash)
  return _internal_mutable_prevhash();
}
inline const std::string& GetBlockInfoDetailAck::_internal_prevhash() const {
  return prevhash_.GetNoArena();
}
inline void GetBlockInfoDetailAck::_internal_set_prevhash(const std::string& value) {
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailAck::set_prevhash(std::string&& value) {
  
  prevhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailAck.prevHash)
}
inline void GetBlockInfoDetailAck::set_prevhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailAck.prevHash)
}
inline void GetBlockInfoDetailAck::set_prevhash(const char* value, size_t size) {
  
  prevhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailAck.prevHash)
}
inline std::string* GetBlockInfoDetailAck::_internal_mutable_prevhash() {
  
  return prevhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailAck::release_prevhash() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailAck.prevHash)
  
  return prevhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailAck::set_allocated_prevhash(std::string* prevhash) {
  if (prevhash != nullptr) {
    
  } else {
    
  }
  prevhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevhash);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailAck.prevHash)
}

// uint64 time = 8;
inline void GetBlockInfoDetailAck::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockInfoDetailAck::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlockInfoDetailAck::time() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.time)
  return _internal_time();
}
inline void GetBlockInfoDetailAck::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void GetBlockInfoDetailAck::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.time)
}

// string tatalAmount = 9;
inline void GetBlockInfoDetailAck::clear_tatalamount() {
  tatalamount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockInfoDetailAck::tatalamount() const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.tatalAmount)
  return _internal_tatalamount();
}
inline void GetBlockInfoDetailAck::set_tatalamount(const std::string& value) {
  _internal_set_tatalamount(value);
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.tatalAmount)
}
inline std::string* GetBlockInfoDetailAck::mutable_tatalamount() {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.tatalAmount)
  return _internal_mutable_tatalamount();
}
inline const std::string& GetBlockInfoDetailAck::_internal_tatalamount() const {
  return tatalamount_.GetNoArena();
}
inline void GetBlockInfoDetailAck::_internal_set_tatalamount(const std::string& value) {
  
  tatalamount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockInfoDetailAck::set_tatalamount(std::string&& value) {
  
  tatalamount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetBlockInfoDetailAck.tatalAmount)
}
inline void GetBlockInfoDetailAck::set_tatalamount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tatalamount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailAck.tatalAmount)
}
inline void GetBlockInfoDetailAck::set_tatalamount(const char* value, size_t size) {
  
  tatalamount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailAck.tatalAmount)
}
inline std::string* GetBlockInfoDetailAck::_internal_mutable_tatalamount() {
  
  return tatalamount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockInfoDetailAck::release_tatalamount() {
  // @@protoc_insertion_point(field_release:GetBlockInfoDetailAck.tatalAmount)
  
  return tatalamount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockInfoDetailAck::set_allocated_tatalamount(std::string* tatalamount) {
  if (tatalamount != nullptr) {
    
  } else {
    
  }
  tatalamount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tatalamount);
  // @@protoc_insertion_point(field_set_allocated:GetBlockInfoDetailAck.tatalAmount)
}

// repeated string signer = 10;
inline int GetBlockInfoDetailAck::_internal_signer_size() const {
  return signer_.size();
}
inline int GetBlockInfoDetailAck::signer_size() const {
  return _internal_signer_size();
}
inline void GetBlockInfoDetailAck::clear_signer() {
  signer_.Clear();
}
inline std::string* GetBlockInfoDetailAck::add_signer() {
  // @@protoc_insertion_point(field_add_mutable:GetBlockInfoDetailAck.signer)
  return _internal_add_signer();
}
inline const std::string& GetBlockInfoDetailAck::_internal_signer(int index) const {
  return signer_.Get(index);
}
inline const std::string& GetBlockInfoDetailAck::signer(int index) const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.signer)
  return _internal_signer(index);
}
inline std::string* GetBlockInfoDetailAck::mutable_signer(int index) {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.signer)
  return signer_.Mutable(index);
}
inline void GetBlockInfoDetailAck::set_signer(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.signer)
  signer_.Mutable(index)->assign(value);
}
inline void GetBlockInfoDetailAck::set_signer(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:GetBlockInfoDetailAck.signer)
  signer_.Mutable(index)->assign(std::move(value));
}
inline void GetBlockInfoDetailAck::set_signer(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetBlockInfoDetailAck.signer)
}
inline void GetBlockInfoDetailAck::set_signer(int index, const char* value, size_t size) {
  signer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetBlockInfoDetailAck.signer)
}
inline std::string* GetBlockInfoDetailAck::_internal_add_signer() {
  return signer_.Add();
}
inline void GetBlockInfoDetailAck::add_signer(const std::string& value) {
  signer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetBlockInfoDetailAck.signer)
}
inline void GetBlockInfoDetailAck::add_signer(std::string&& value) {
  signer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetBlockInfoDetailAck.signer)
}
inline void GetBlockInfoDetailAck::add_signer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetBlockInfoDetailAck.signer)
}
inline void GetBlockInfoDetailAck::add_signer(const char* value, size_t size) {
  signer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetBlockInfoDetailAck.signer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBlockInfoDetailAck::signer() const {
  // @@protoc_insertion_point(field_list:GetBlockInfoDetailAck.signer)
  return signer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBlockInfoDetailAck::mutable_signer() {
  // @@protoc_insertion_point(field_mutable_list:GetBlockInfoDetailAck.signer)
  return &signer_;
}

// repeated .BlockInfoOutAddr blockInfoOutAddr = 11;
inline int GetBlockInfoDetailAck::_internal_blockinfooutaddr_size() const {
  return blockinfooutaddr_.size();
}
inline int GetBlockInfoDetailAck::blockinfooutaddr_size() const {
  return _internal_blockinfooutaddr_size();
}
inline void GetBlockInfoDetailAck::clear_blockinfooutaddr() {
  blockinfooutaddr_.Clear();
}
inline ::BlockInfoOutAddr* GetBlockInfoDetailAck::mutable_blockinfooutaddr(int index) {
  // @@protoc_insertion_point(field_mutable:GetBlockInfoDetailAck.blockInfoOutAddr)
  return blockinfooutaddr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoOutAddr >*
GetBlockInfoDetailAck::mutable_blockinfooutaddr() {
  // @@protoc_insertion_point(field_mutable_list:GetBlockInfoDetailAck.blockInfoOutAddr)
  return &blockinfooutaddr_;
}
inline const ::BlockInfoOutAddr& GetBlockInfoDetailAck::_internal_blockinfooutaddr(int index) const {
  return blockinfooutaddr_.Get(index);
}
inline const ::BlockInfoOutAddr& GetBlockInfoDetailAck::blockinfooutaddr(int index) const {
  // @@protoc_insertion_point(field_get:GetBlockInfoDetailAck.blockInfoOutAddr)
  return _internal_blockinfooutaddr(index);
}
inline ::BlockInfoOutAddr* GetBlockInfoDetailAck::_internal_add_blockinfooutaddr() {
  return blockinfooutaddr_.Add();
}
inline ::BlockInfoOutAddr* GetBlockInfoDetailAck::add_blockinfooutaddr() {
  // @@protoc_insertion_point(field_add:GetBlockInfoDetailAck.blockInfoOutAddr)
  return _internal_add_blockinfooutaddr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BlockInfoOutAddr >&
GetBlockInfoDetailAck::blockinfooutaddr() const {
  // @@protoc_insertion_point(field_list:GetBlockInfoDetailAck.blockInfoOutAddr)
  return blockinfooutaddr_;
}

// -------------------------------------------------------------------

// TestConnectReq

// string version = 1;
inline void TestConnectReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestConnectReq::version() const {
  // @@protoc_insertion_point(field_get:TestConnectReq.version)
  return _internal_version();
}
inline void TestConnectReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TestConnectReq.version)
}
inline std::string* TestConnectReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TestConnectReq.version)
  return _internal_mutable_version();
}
inline const std::string& TestConnectReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void TestConnectReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestConnectReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestConnectReq.version)
}
inline void TestConnectReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestConnectReq.version)
}
inline void TestConnectReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestConnectReq.version)
}
inline std::string* TestConnectReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConnectReq::release_version() {
  // @@protoc_insertion_point(field_release:TestConnectReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConnectReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TestConnectReq.version)
}

// -------------------------------------------------------------------

// TestConnectAck

// string version = 1;
inline void TestConnectAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestConnectAck::version() const {
  // @@protoc_insertion_point(field_get:TestConnectAck.version)
  return _internal_version();
}
inline void TestConnectAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TestConnectAck.version)
}
inline std::string* TestConnectAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TestConnectAck.version)
  return _internal_mutable_version();
}
inline const std::string& TestConnectAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void TestConnectAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestConnectAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TestConnectAck.version)
}
inline void TestConnectAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TestConnectAck.version)
}
inline void TestConnectAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TestConnectAck.version)
}
inline std::string* TestConnectAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestConnectAck::release_version() {
  // @@protoc_insertion_point(field_release:TestConnectAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestConnectAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TestConnectAck.version)
}

// int32 code = 2;
inline void TestConnectAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConnectAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestConnectAck::code() const {
  // @@protoc_insertion_point(field_get:TestConnectAck.code)
  return _internal_code();
}
inline void TestConnectAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void TestConnectAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:TestConnectAck.code)
}

// -------------------------------------------------------------------

// Device2PubNetRandomReq

// string version = 1;
inline void Device2PubNetRandomReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device2PubNetRandomReq::version() const {
  // @@protoc_insertion_point(field_get:Device2PubNetRandomReq.version)
  return _internal_version();
}
inline void Device2PubNetRandomReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Device2PubNetRandomReq.version)
}
inline std::string* Device2PubNetRandomReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:Device2PubNetRandomReq.version)
  return _internal_mutable_version();
}
inline const std::string& Device2PubNetRandomReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void Device2PubNetRandomReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device2PubNetRandomReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Device2PubNetRandomReq.version)
}
inline void Device2PubNetRandomReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device2PubNetRandomReq.version)
}
inline void Device2PubNetRandomReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device2PubNetRandomReq.version)
}
inline std::string* Device2PubNetRandomReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device2PubNetRandomReq::release_version() {
  // @@protoc_insertion_point(field_release:Device2PubNetRandomReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device2PubNetRandomReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Device2PubNetRandomReq.version)
}

// string id = 2;
inline void Device2PubNetRandomReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device2PubNetRandomReq::id() const {
  // @@protoc_insertion_point(field_get:Device2PubNetRandomReq.id)
  return _internal_id();
}
inline void Device2PubNetRandomReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Device2PubNetRandomReq.id)
}
inline std::string* Device2PubNetRandomReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Device2PubNetRandomReq.id)
  return _internal_mutable_id();
}
inline const std::string& Device2PubNetRandomReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void Device2PubNetRandomReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device2PubNetRandomReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Device2PubNetRandomReq.id)
}
inline void Device2PubNetRandomReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device2PubNetRandomReq.id)
}
inline void Device2PubNetRandomReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device2PubNetRandomReq.id)
}
inline std::string* Device2PubNetRandomReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device2PubNetRandomReq::release_id() {
  // @@protoc_insertion_point(field_release:Device2PubNetRandomReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device2PubNetRandomReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Device2PubNetRandomReq.id)
}

// -------------------------------------------------------------------

// RandomPubNet2DeviceAck

// string version = 1;
inline void RandomPubNet2DeviceAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RandomPubNet2DeviceAck::version() const {
  // @@protoc_insertion_point(field_get:RandomPubNet2DeviceAck.version)
  return _internal_version();
}
inline void RandomPubNet2DeviceAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:RandomPubNet2DeviceAck.version)
}
inline std::string* RandomPubNet2DeviceAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:RandomPubNet2DeviceAck.version)
  return _internal_mutable_version();
}
inline const std::string& RandomPubNet2DeviceAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void RandomPubNet2DeviceAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RandomPubNet2DeviceAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RandomPubNet2DeviceAck.version)
}
inline void RandomPubNet2DeviceAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RandomPubNet2DeviceAck.version)
}
inline void RandomPubNet2DeviceAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RandomPubNet2DeviceAck.version)
}
inline std::string* RandomPubNet2DeviceAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RandomPubNet2DeviceAck::release_version() {
  // @@protoc_insertion_point(field_release:RandomPubNet2DeviceAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RandomPubNet2DeviceAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:RandomPubNet2DeviceAck.version)
}

// string description = 2;
inline void RandomPubNet2DeviceAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RandomPubNet2DeviceAck::description() const {
  // @@protoc_insertion_point(field_get:RandomPubNet2DeviceAck.description)
  return _internal_description();
}
inline void RandomPubNet2DeviceAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:RandomPubNet2DeviceAck.description)
}
inline std::string* RandomPubNet2DeviceAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:RandomPubNet2DeviceAck.description)
  return _internal_mutable_description();
}
inline const std::string& RandomPubNet2DeviceAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void RandomPubNet2DeviceAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RandomPubNet2DeviceAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RandomPubNet2DeviceAck.description)
}
inline void RandomPubNet2DeviceAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RandomPubNet2DeviceAck.description)
}
inline void RandomPubNet2DeviceAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RandomPubNet2DeviceAck.description)
}
inline std::string* RandomPubNet2DeviceAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RandomPubNet2DeviceAck::release_description() {
  // @@protoc_insertion_point(field_release:RandomPubNet2DeviceAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RandomPubNet2DeviceAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:RandomPubNet2DeviceAck.description)
}

// string id = 3;
inline void RandomPubNet2DeviceAck::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RandomPubNet2DeviceAck::id() const {
  // @@protoc_insertion_point(field_get:RandomPubNet2DeviceAck.id)
  return _internal_id();
}
inline void RandomPubNet2DeviceAck::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RandomPubNet2DeviceAck.id)
}
inline std::string* RandomPubNet2DeviceAck::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RandomPubNet2DeviceAck.id)
  return _internal_mutable_id();
}
inline const std::string& RandomPubNet2DeviceAck::_internal_id() const {
  return id_.GetNoArena();
}
inline void RandomPubNet2DeviceAck::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RandomPubNet2DeviceAck::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RandomPubNet2DeviceAck.id)
}
inline void RandomPubNet2DeviceAck::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RandomPubNet2DeviceAck.id)
}
inline void RandomPubNet2DeviceAck::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RandomPubNet2DeviceAck.id)
}
inline std::string* RandomPubNet2DeviceAck::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RandomPubNet2DeviceAck::release_id() {
  // @@protoc_insertion_point(field_release:RandomPubNet2DeviceAck.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RandomPubNet2DeviceAck::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:RandomPubNet2DeviceAck.id)
}

// -------------------------------------------------------------------

// Device2AllDevReq

// string version = 1;
inline void Device2AllDevReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device2AllDevReq::version() const {
  // @@protoc_insertion_point(field_get:Device2AllDevReq.version)
  return _internal_version();
}
inline void Device2AllDevReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Device2AllDevReq.version)
}
inline std::string* Device2AllDevReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:Device2AllDevReq.version)
  return _internal_mutable_version();
}
inline const std::string& Device2AllDevReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void Device2AllDevReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device2AllDevReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Device2AllDevReq.version)
}
inline void Device2AllDevReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device2AllDevReq.version)
}
inline void Device2AllDevReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device2AllDevReq.version)
}
inline std::string* Device2AllDevReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device2AllDevReq::release_version() {
  // @@protoc_insertion_point(field_release:Device2AllDevReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device2AllDevReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Device2AllDevReq.version)
}

// string id = 2;
inline void Device2AllDevReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device2AllDevReq::id() const {
  // @@protoc_insertion_point(field_get:Device2AllDevReq.id)
  return _internal_id();
}
inline void Device2AllDevReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Device2AllDevReq.id)
}
inline std::string* Device2AllDevReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Device2AllDevReq.id)
  return _internal_mutable_id();
}
inline const std::string& Device2AllDevReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void Device2AllDevReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device2AllDevReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Device2AllDevReq.id)
}
inline void Device2AllDevReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device2AllDevReq.id)
}
inline void Device2AllDevReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device2AllDevReq.id)
}
inline std::string* Device2AllDevReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device2AllDevReq::release_id() {
  // @@protoc_insertion_point(field_release:Device2AllDevReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device2AllDevReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Device2AllDevReq.id)
}

// -------------------------------------------------------------------

// Feedback2DeviceAck

// string version = 1;
inline void Feedback2DeviceAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Feedback2DeviceAck::version() const {
  // @@protoc_insertion_point(field_get:Feedback2DeviceAck.version)
  return _internal_version();
}
inline void Feedback2DeviceAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Feedback2DeviceAck.version)
}
inline std::string* Feedback2DeviceAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:Feedback2DeviceAck.version)
  return _internal_mutable_version();
}
inline const std::string& Feedback2DeviceAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void Feedback2DeviceAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Feedback2DeviceAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Feedback2DeviceAck.version)
}
inline void Feedback2DeviceAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Feedback2DeviceAck.version)
}
inline void Feedback2DeviceAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Feedback2DeviceAck.version)
}
inline std::string* Feedback2DeviceAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Feedback2DeviceAck::release_version() {
  // @@protoc_insertion_point(field_release:Feedback2DeviceAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Feedback2DeviceAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Feedback2DeviceAck.version)
}

// string id = 2;
inline void Feedback2DeviceAck::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Feedback2DeviceAck::id() const {
  // @@protoc_insertion_point(field_get:Feedback2DeviceAck.id)
  return _internal_id();
}
inline void Feedback2DeviceAck::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Feedback2DeviceAck.id)
}
inline std::string* Feedback2DeviceAck::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Feedback2DeviceAck.id)
  return _internal_mutable_id();
}
inline const std::string& Feedback2DeviceAck::_internal_id() const {
  return id_.GetNoArena();
}
inline void Feedback2DeviceAck::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Feedback2DeviceAck::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Feedback2DeviceAck.id)
}
inline void Feedback2DeviceAck::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Feedback2DeviceAck.id)
}
inline void Feedback2DeviceAck::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Feedback2DeviceAck.id)
}
inline std::string* Feedback2DeviceAck::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Feedback2DeviceAck::release_id() {
  // @@protoc_insertion_point(field_release:Feedback2DeviceAck.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Feedback2DeviceAck::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Feedback2DeviceAck.id)
}

// -------------------------------------------------------------------

// DataTransReq

// string version = 1;
inline void DataTransReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataTransReq::version() const {
  // @@protoc_insertion_point(field_get:DataTransReq.version)
  return _internal_version();
}
inline void DataTransReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:DataTransReq.version)
}
inline std::string* DataTransReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:DataTransReq.version)
  return _internal_mutable_version();
}
inline const std::string& DataTransReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void DataTransReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataTransReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataTransReq.version)
}
inline void DataTransReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTransReq.version)
}
inline void DataTransReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTransReq.version)
}
inline std::string* DataTransReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTransReq::release_version() {
  // @@protoc_insertion_point(field_release:DataTransReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTransReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:DataTransReq.version)
}

// string id = 2;
inline void DataTransReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataTransReq::id() const {
  // @@protoc_insertion_point(field_get:DataTransReq.id)
  return _internal_id();
}
inline void DataTransReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DataTransReq.id)
}
inline std::string* DataTransReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:DataTransReq.id)
  return _internal_mutable_id();
}
inline const std::string& DataTransReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void DataTransReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataTransReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataTransReq.id)
}
inline void DataTransReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataTransReq.id)
}
inline void DataTransReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataTransReq.id)
}
inline std::string* DataTransReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataTransReq::release_id() {
  // @@protoc_insertion_point(field_release:DataTransReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataTransReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:DataTransReq.id)
}

// -------------------------------------------------------------------

// TransData

// string version = 1;
inline void TransData::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransData::version() const {
  // @@protoc_insertion_point(field_get:TransData.version)
  return _internal_version();
}
inline void TransData::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TransData.version)
}
inline std::string* TransData::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TransData.version)
  return _internal_mutable_version();
}
inline const std::string& TransData::_internal_version() const {
  return version_.GetNoArena();
}
inline void TransData::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransData::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransData.version)
}
inline void TransData::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransData.version)
}
inline void TransData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransData.version)
}
inline std::string* TransData::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransData::release_version() {
  // @@protoc_insertion_point(field_release:TransData.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TransData.version)
}

// string description = 2;
inline void TransData::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransData::description() const {
  // @@protoc_insertion_point(field_get:TransData.description)
  return _internal_description();
}
inline void TransData::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:TransData.description)
}
inline std::string* TransData::mutable_description() {
  // @@protoc_insertion_point(field_mutable:TransData.description)
  return _internal_mutable_description();
}
inline const std::string& TransData::_internal_description() const {
  return description_.GetNoArena();
}
inline void TransData::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransData::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransData.description)
}
inline void TransData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransData.description)
}
inline void TransData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransData.description)
}
inline std::string* TransData::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransData::release_description() {
  // @@protoc_insertion_point(field_release:TransData.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:TransData.description)
}

// bytes encodedata = 3;
inline void TransData::clear_encodedata() {
  encodedata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransData::encodedata() const {
  // @@protoc_insertion_point(field_get:TransData.encodedata)
  return _internal_encodedata();
}
inline void TransData::set_encodedata(const std::string& value) {
  _internal_set_encodedata(value);
  // @@protoc_insertion_point(field_set:TransData.encodedata)
}
inline std::string* TransData::mutable_encodedata() {
  // @@protoc_insertion_point(field_mutable:TransData.encodedata)
  return _internal_mutable_encodedata();
}
inline const std::string& TransData::_internal_encodedata() const {
  return encodedata_.GetNoArena();
}
inline void TransData::_internal_set_encodedata(const std::string& value) {
  
  encodedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransData::set_encodedata(std::string&& value) {
  
  encodedata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransData.encodedata)
}
inline void TransData::set_encodedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encodedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransData.encodedata)
}
inline void TransData::set_encodedata(const void* value, size_t size) {
  
  encodedata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransData.encodedata)
}
inline std::string* TransData::_internal_mutable_encodedata() {
  
  return encodedata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransData::release_encodedata() {
  // @@protoc_insertion_point(field_release:TransData.encodedata)
  
  return encodedata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransData::set_allocated_encodedata(std::string* encodedata) {
  if (encodedata != nullptr) {
    
  } else {
    
  }
  encodedata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encodedata);
  // @@protoc_insertion_point(field_set_allocated:TransData.encodedata)
}

// bytes origindata = 4;
inline void TransData::clear_origindata() {
  origindata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransData::origindata() const {
  // @@protoc_insertion_point(field_get:TransData.origindata)
  return _internal_origindata();
}
inline void TransData::set_origindata(const std::string& value) {
  _internal_set_origindata(value);
  // @@protoc_insertion_point(field_set:TransData.origindata)
}
inline std::string* TransData::mutable_origindata() {
  // @@protoc_insertion_point(field_mutable:TransData.origindata)
  return _internal_mutable_origindata();
}
inline const std::string& TransData::_internal_origindata() const {
  return origindata_.GetNoArena();
}
inline void TransData::_internal_set_origindata(const std::string& value) {
  
  origindata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransData::set_origindata(std::string&& value) {
  
  origindata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransData.origindata)
}
inline void TransData::set_origindata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origindata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransData.origindata)
}
inline void TransData::set_origindata(const void* value, size_t size) {
  
  origindata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransData.origindata)
}
inline std::string* TransData::_internal_mutable_origindata() {
  
  return origindata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransData::release_origindata() {
  // @@protoc_insertion_point(field_release:TransData.origindata)
  
  return origindata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransData::set_allocated_origindata(std::string* origindata) {
  if (origindata != nullptr) {
    
  } else {
    
  }
  origindata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origindata);
  // @@protoc_insertion_point(field_set_allocated:TransData.origindata)
}

// string id = 5;
inline void TransData::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransData::id() const {
  // @@protoc_insertion_point(field_get:TransData.id)
  return _internal_id();
}
inline void TransData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TransData.id)
}
inline std::string* TransData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:TransData.id)
  return _internal_mutable_id();
}
inline const std::string& TransData::_internal_id() const {
  return id_.GetNoArena();
}
inline void TransData::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransData::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransData.id)
}
inline void TransData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransData.id)
}
inline void TransData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransData.id)
}
inline std::string* TransData::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransData::release_id() {
  // @@protoc_insertion_point(field_release:TransData.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TransData.id)
}

// -------------------------------------------------------------------

// GetTxPendingListReq

// string version = 1;
inline void GetTxPendingListReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxPendingListReq::version() const {
  // @@protoc_insertion_point(field_get:GetTxPendingListReq.version)
  return _internal_version();
}
inline void GetTxPendingListReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetTxPendingListReq.version)
}
inline std::string* GetTxPendingListReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetTxPendingListReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetTxPendingListReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetTxPendingListReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxPendingListReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxPendingListReq.version)
}
inline void GetTxPendingListReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxPendingListReq.version)
}
inline void GetTxPendingListReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxPendingListReq.version)
}
inline std::string* GetTxPendingListReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxPendingListReq::release_version() {
  // @@protoc_insertion_point(field_release:GetTxPendingListReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxPendingListReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetTxPendingListReq.version)
}

// repeated string addr = 2;
inline int GetTxPendingListReq::_internal_addr_size() const {
  return addr_.size();
}
inline int GetTxPendingListReq::addr_size() const {
  return _internal_addr_size();
}
inline void GetTxPendingListReq::clear_addr() {
  addr_.Clear();
}
inline std::string* GetTxPendingListReq::add_addr() {
  // @@protoc_insertion_point(field_add_mutable:GetTxPendingListReq.addr)
  return _internal_add_addr();
}
inline const std::string& GetTxPendingListReq::_internal_addr(int index) const {
  return addr_.Get(index);
}
inline const std::string& GetTxPendingListReq::addr(int index) const {
  // @@protoc_insertion_point(field_get:GetTxPendingListReq.addr)
  return _internal_addr(index);
}
inline std::string* GetTxPendingListReq::mutable_addr(int index) {
  // @@protoc_insertion_point(field_mutable:GetTxPendingListReq.addr)
  return addr_.Mutable(index);
}
inline void GetTxPendingListReq::set_addr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:GetTxPendingListReq.addr)
  addr_.Mutable(index)->assign(value);
}
inline void GetTxPendingListReq::set_addr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:GetTxPendingListReq.addr)
  addr_.Mutable(index)->assign(std::move(value));
}
inline void GetTxPendingListReq::set_addr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetTxPendingListReq.addr)
}
inline void GetTxPendingListReq::set_addr(int index, const char* value, size_t size) {
  addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetTxPendingListReq.addr)
}
inline std::string* GetTxPendingListReq::_internal_add_addr() {
  return addr_.Add();
}
inline void GetTxPendingListReq::add_addr(const std::string& value) {
  addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetTxPendingListReq.addr)
}
inline void GetTxPendingListReq::add_addr(std::string&& value) {
  addr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetTxPendingListReq.addr)
}
inline void GetTxPendingListReq::add_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetTxPendingListReq.addr)
}
inline void GetTxPendingListReq::add_addr(const char* value, size_t size) {
  addr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetTxPendingListReq.addr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxPendingListReq::addr() const {
  // @@protoc_insertion_point(field_list:GetTxPendingListReq.addr)
  return addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxPendingListReq::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:GetTxPendingListReq.addr)
  return &addr_;
}

// -------------------------------------------------------------------

// TxPendingItem

// string txHash = 1;
inline void TxPendingItem::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxPendingItem::txhash() const {
  // @@protoc_insertion_point(field_get:TxPendingItem.txHash)
  return _internal_txhash();
}
inline void TxPendingItem::set_txhash(const std::string& value) {
  _internal_set_txhash(value);
  // @@protoc_insertion_point(field_set:TxPendingItem.txHash)
}
inline std::string* TxPendingItem::mutable_txhash() {
  // @@protoc_insertion_point(field_mutable:TxPendingItem.txHash)
  return _internal_mutable_txhash();
}
inline const std::string& TxPendingItem::_internal_txhash() const {
  return txhash_.GetNoArena();
}
inline void TxPendingItem::_internal_set_txhash(const std::string& value) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxPendingItem::set_txhash(std::string&& value) {
  
  txhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxPendingItem.txHash)
}
inline void TxPendingItem::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxPendingItem.txHash)
}
inline void TxPendingItem::set_txhash(const char* value, size_t size) {
  
  txhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxPendingItem.txHash)
}
inline std::string* TxPendingItem::_internal_mutable_txhash() {
  
  return txhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxPendingItem::release_txhash() {
  // @@protoc_insertion_point(field_release:TxPendingItem.txHash)
  
  return txhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxPendingItem::set_allocated_txhash(std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:TxPendingItem.txHash)
}

// repeated string vins = 2;
inline int TxPendingItem::_internal_vins_size() const {
  return vins_.size();
}
inline int TxPendingItem::vins_size() const {
  return _internal_vins_size();
}
inline void TxPendingItem::clear_vins() {
  vins_.Clear();
}
inline std::string* TxPendingItem::add_vins() {
  // @@protoc_insertion_point(field_add_mutable:TxPendingItem.vins)
  return _internal_add_vins();
}
inline const std::string& TxPendingItem::_internal_vins(int index) const {
  return vins_.Get(index);
}
inline const std::string& TxPendingItem::vins(int index) const {
  // @@protoc_insertion_point(field_get:TxPendingItem.vins)
  return _internal_vins(index);
}
inline std::string* TxPendingItem::mutable_vins(int index) {
  // @@protoc_insertion_point(field_mutable:TxPendingItem.vins)
  return vins_.Mutable(index);
}
inline void TxPendingItem::set_vins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TxPendingItem.vins)
  vins_.Mutable(index)->assign(value);
}
inline void TxPendingItem::set_vins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TxPendingItem.vins)
  vins_.Mutable(index)->assign(std::move(value));
}
inline void TxPendingItem::set_vins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxPendingItem.vins)
}
inline void TxPendingItem::set_vins(int index, const char* value, size_t size) {
  vins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxPendingItem.vins)
}
inline std::string* TxPendingItem::_internal_add_vins() {
  return vins_.Add();
}
inline void TxPendingItem::add_vins(const std::string& value) {
  vins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxPendingItem.vins)
}
inline void TxPendingItem::add_vins(std::string&& value) {
  vins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxPendingItem.vins)
}
inline void TxPendingItem::add_vins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxPendingItem.vins)
}
inline void TxPendingItem::add_vins(const char* value, size_t size) {
  vins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxPendingItem.vins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxPendingItem::vins() const {
  // @@protoc_insertion_point(field_list:TxPendingItem.vins)
  return vins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxPendingItem::mutable_vins() {
  // @@protoc_insertion_point(field_mutable_list:TxPendingItem.vins)
  return &vins_;
}

// repeated string fromaddr = 3;
inline int TxPendingItem::_internal_fromaddr_size() const {
  return fromaddr_.size();
}
inline int TxPendingItem::fromaddr_size() const {
  return _internal_fromaddr_size();
}
inline void TxPendingItem::clear_fromaddr() {
  fromaddr_.Clear();
}
inline std::string* TxPendingItem::add_fromaddr() {
  // @@protoc_insertion_point(field_add_mutable:TxPendingItem.fromaddr)
  return _internal_add_fromaddr();
}
inline const std::string& TxPendingItem::_internal_fromaddr(int index) const {
  return fromaddr_.Get(index);
}
inline const std::string& TxPendingItem::fromaddr(int index) const {
  // @@protoc_insertion_point(field_get:TxPendingItem.fromaddr)
  return _internal_fromaddr(index);
}
inline std::string* TxPendingItem::mutable_fromaddr(int index) {
  // @@protoc_insertion_point(field_mutable:TxPendingItem.fromaddr)
  return fromaddr_.Mutable(index);
}
inline void TxPendingItem::set_fromaddr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TxPendingItem.fromaddr)
  fromaddr_.Mutable(index)->assign(value);
}
inline void TxPendingItem::set_fromaddr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TxPendingItem.fromaddr)
  fromaddr_.Mutable(index)->assign(std::move(value));
}
inline void TxPendingItem::set_fromaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxPendingItem.fromaddr)
}
inline void TxPendingItem::set_fromaddr(int index, const char* value, size_t size) {
  fromaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxPendingItem.fromaddr)
}
inline std::string* TxPendingItem::_internal_add_fromaddr() {
  return fromaddr_.Add();
}
inline void TxPendingItem::add_fromaddr(const std::string& value) {
  fromaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxPendingItem.fromaddr)
}
inline void TxPendingItem::add_fromaddr(std::string&& value) {
  fromaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxPendingItem.fromaddr)
}
inline void TxPendingItem::add_fromaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxPendingItem.fromaddr)
}
inline void TxPendingItem::add_fromaddr(const char* value, size_t size) {
  fromaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxPendingItem.fromaddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxPendingItem::fromaddr() const {
  // @@protoc_insertion_point(field_list:TxPendingItem.fromaddr)
  return fromaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxPendingItem::mutable_fromaddr() {
  // @@protoc_insertion_point(field_mutable_list:TxPendingItem.fromaddr)
  return &fromaddr_;
}

// repeated string toaddr = 4;
inline int TxPendingItem::_internal_toaddr_size() const {
  return toaddr_.size();
}
inline int TxPendingItem::toaddr_size() const {
  return _internal_toaddr_size();
}
inline void TxPendingItem::clear_toaddr() {
  toaddr_.Clear();
}
inline std::string* TxPendingItem::add_toaddr() {
  // @@protoc_insertion_point(field_add_mutable:TxPendingItem.toaddr)
  return _internal_add_toaddr();
}
inline const std::string& TxPendingItem::_internal_toaddr(int index) const {
  return toaddr_.Get(index);
}
inline const std::string& TxPendingItem::toaddr(int index) const {
  // @@protoc_insertion_point(field_get:TxPendingItem.toaddr)
  return _internal_toaddr(index);
}
inline std::string* TxPendingItem::mutable_toaddr(int index) {
  // @@protoc_insertion_point(field_mutable:TxPendingItem.toaddr)
  return toaddr_.Mutable(index);
}
inline void TxPendingItem::set_toaddr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TxPendingItem.toaddr)
  toaddr_.Mutable(index)->assign(value);
}
inline void TxPendingItem::set_toaddr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TxPendingItem.toaddr)
  toaddr_.Mutable(index)->assign(std::move(value));
}
inline void TxPendingItem::set_toaddr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toaddr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TxPendingItem.toaddr)
}
inline void TxPendingItem::set_toaddr(int index, const char* value, size_t size) {
  toaddr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TxPendingItem.toaddr)
}
inline std::string* TxPendingItem::_internal_add_toaddr() {
  return toaddr_.Add();
}
inline void TxPendingItem::add_toaddr(const std::string& value) {
  toaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TxPendingItem.toaddr)
}
inline void TxPendingItem::add_toaddr(std::string&& value) {
  toaddr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TxPendingItem.toaddr)
}
inline void TxPendingItem::add_toaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toaddr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TxPendingItem.toaddr)
}
inline void TxPendingItem::add_toaddr(const char* value, size_t size) {
  toaddr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TxPendingItem.toaddr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxPendingItem::toaddr() const {
  // @@protoc_insertion_point(field_list:TxPendingItem.toaddr)
  return toaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxPendingItem::mutable_toaddr() {
  // @@protoc_insertion_point(field_mutable_list:TxPendingItem.toaddr)
  return &toaddr_;
}

// string amount = 5;
inline void TxPendingItem::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxPendingItem::amount() const {
  // @@protoc_insertion_point(field_get:TxPendingItem.amount)
  return _internal_amount();
}
inline void TxPendingItem::set_amount(const std::string& value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:TxPendingItem.amount)
}
inline std::string* TxPendingItem::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:TxPendingItem.amount)
  return _internal_mutable_amount();
}
inline const std::string& TxPendingItem::_internal_amount() const {
  return amount_.GetNoArena();
}
inline void TxPendingItem::_internal_set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxPendingItem::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxPendingItem.amount)
}
inline void TxPendingItem::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxPendingItem.amount)
}
inline void TxPendingItem::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxPendingItem.amount)
}
inline std::string* TxPendingItem::_internal_mutable_amount() {
  
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxPendingItem::release_amount() {
  // @@protoc_insertion_point(field_release:TxPendingItem.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxPendingItem::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:TxPendingItem.amount)
}

// uint64 time = 6;
inline void TxPendingItem::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxPendingItem::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxPendingItem::time() const {
  // @@protoc_insertion_point(field_get:TxPendingItem.time)
  return _internal_time();
}
inline void TxPendingItem::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void TxPendingItem::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:TxPendingItem.time)
}

// string detail = 7;
inline void TxPendingItem::clear_detail() {
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxPendingItem::detail() const {
  // @@protoc_insertion_point(field_get:TxPendingItem.detail)
  return _internal_detail();
}
inline void TxPendingItem::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:TxPendingItem.detail)
}
inline std::string* TxPendingItem::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:TxPendingItem.detail)
  return _internal_mutable_detail();
}
inline const std::string& TxPendingItem::_internal_detail() const {
  return detail_.GetNoArena();
}
inline void TxPendingItem::_internal_set_detail(const std::string& value) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxPendingItem::set_detail(std::string&& value) {
  
  detail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxPendingItem.detail)
}
inline void TxPendingItem::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxPendingItem.detail)
}
inline void TxPendingItem::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxPendingItem.detail)
}
inline std::string* TxPendingItem::_internal_mutable_detail() {
  
  return detail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxPendingItem::release_detail() {
  // @@protoc_insertion_point(field_release:TxPendingItem.detail)
  
  return detail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxPendingItem::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:TxPendingItem.detail)
}

// -------------------------------------------------------------------

// GetTxPendingListAck

// string version = 1;
inline void GetTxPendingListAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxPendingListAck::version() const {
  // @@protoc_insertion_point(field_get:GetTxPendingListAck.version)
  return _internal_version();
}
inline void GetTxPendingListAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetTxPendingListAck.version)
}
inline std::string* GetTxPendingListAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetTxPendingListAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetTxPendingListAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetTxPendingListAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxPendingListAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxPendingListAck.version)
}
inline void GetTxPendingListAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxPendingListAck.version)
}
inline void GetTxPendingListAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxPendingListAck.version)
}
inline std::string* GetTxPendingListAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxPendingListAck::release_version() {
  // @@protoc_insertion_point(field_release:GetTxPendingListAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxPendingListAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetTxPendingListAck.version)
}

// int32 code = 2;
inline void GetTxPendingListAck::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxPendingListAck::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTxPendingListAck::code() const {
  // @@protoc_insertion_point(field_get:GetTxPendingListAck.code)
  return _internal_code();
}
inline void GetTxPendingListAck::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetTxPendingListAck::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GetTxPendingListAck.code)
}

// string description = 3;
inline void GetTxPendingListAck::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTxPendingListAck::description() const {
  // @@protoc_insertion_point(field_get:GetTxPendingListAck.description)
  return _internal_description();
}
inline void GetTxPendingListAck::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:GetTxPendingListAck.description)
}
inline std::string* GetTxPendingListAck::mutable_description() {
  // @@protoc_insertion_point(field_mutable:GetTxPendingListAck.description)
  return _internal_mutable_description();
}
inline const std::string& GetTxPendingListAck::_internal_description() const {
  return description_.GetNoArena();
}
inline void GetTxPendingListAck::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTxPendingListAck::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetTxPendingListAck.description)
}
inline void GetTxPendingListAck::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetTxPendingListAck.description)
}
inline void GetTxPendingListAck::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetTxPendingListAck.description)
}
inline std::string* GetTxPendingListAck::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTxPendingListAck::release_description() {
  // @@protoc_insertion_point(field_release:GetTxPendingListAck.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTxPendingListAck::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:GetTxPendingListAck.description)
}

// repeated string addr = 4;
inline int GetTxPendingListAck::_internal_addr_size() const {
  return addr_.size();
}
inline int GetTxPendingListAck::addr_size() const {
  return _internal_addr_size();
}
inline void GetTxPendingListAck::clear_addr() {
  addr_.Clear();
}
inline std::string* GetTxPendingListAck::add_addr() {
  // @@protoc_insertion_point(field_add_mutable:GetTxPendingListAck.addr)
  return _internal_add_addr();
}
inline const std::string& GetTxPendingListAck::_internal_addr(int index) const {
  return addr_.Get(index);
}
inline const std::string& GetTxPendingListAck::addr(int index) const {
  // @@protoc_insertion_point(field_get:GetTxPendingListAck.addr)
  return _internal_addr(index);
}
inline std::string* GetTxPendingListAck::mutable_addr(int index) {
  // @@protoc_insertion_point(field_mutable:GetTxPendingListAck.addr)
  return addr_.Mutable(index);
}
inline void GetTxPendingListAck::set_addr(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:GetTxPendingListAck.addr)
  addr_.Mutable(index)->assign(value);
}
inline void GetTxPendingListAck::set_addr(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:GetTxPendingListAck.addr)
  addr_.Mutable(index)->assign(std::move(value));
}
inline void GetTxPendingListAck::set_addr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetTxPendingListAck.addr)
}
inline void GetTxPendingListAck::set_addr(int index, const char* value, size_t size) {
  addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetTxPendingListAck.addr)
}
inline std::string* GetTxPendingListAck::_internal_add_addr() {
  return addr_.Add();
}
inline void GetTxPendingListAck::add_addr(const std::string& value) {
  addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetTxPendingListAck.addr)
}
inline void GetTxPendingListAck::add_addr(std::string&& value) {
  addr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetTxPendingListAck.addr)
}
inline void GetTxPendingListAck::add_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetTxPendingListAck.addr)
}
inline void GetTxPendingListAck::add_addr(const char* value, size_t size) {
  addr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetTxPendingListAck.addr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxPendingListAck::addr() const {
  // @@protoc_insertion_point(field_list:GetTxPendingListAck.addr)
  return addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxPendingListAck::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:GetTxPendingListAck.addr)
  return &addr_;
}

// repeated .TxPendingItem list = 5;
inline int GetTxPendingListAck::_internal_list_size() const {
  return list_.size();
}
inline int GetTxPendingListAck::list_size() const {
  return _internal_list_size();
}
inline void GetTxPendingListAck::clear_list() {
  list_.Clear();
}
inline ::TxPendingItem* GetTxPendingListAck::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:GetTxPendingListAck.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxPendingItem >*
GetTxPendingListAck::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:GetTxPendingListAck.list)
  return &list_;
}
inline const ::TxPendingItem& GetTxPendingListAck::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::TxPendingItem& GetTxPendingListAck::list(int index) const {
  // @@protoc_insertion_point(field_get:GetTxPendingListAck.list)
  return _internal_list(index);
}
inline ::TxPendingItem* GetTxPendingListAck::_internal_add_list() {
  return list_.Add();
}
inline ::TxPendingItem* GetTxPendingListAck::add_list() {
  // @@protoc_insertion_point(field_add:GetTxPendingListAck.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TxPendingItem >&
GetTxPendingListAck::list() const {
  // @@protoc_insertion_point(field_list:GetTxPendingListAck.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GetServiceInfoAck_SyncStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GetServiceInfoAck_SyncStatus>() {
  return ::GetServiceInfoAck_SyncStatus_descriptor();
}
template <> struct is_proto_enum< ::DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceType>() {
  return ::DeviceType_descriptor();
}
template <> struct is_proto_enum< ::DeviceLang> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceLang>() {
  return ::DeviceLang_descriptor();
}
template <> struct is_proto_enum< ::TxInfoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TxInfoType>() {
  return ::TxInfoType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_interface_2eproto
