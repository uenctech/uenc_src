// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca_protomsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ca_5fprotomsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ca_5fprotomsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ca_5fprotomsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ca_5fprotomsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ca_5fprotomsg_2eproto;
class BuileBlockBroadcastMsg;
class BuileBlockBroadcastMsgDefaultTypeInternal;
extern BuileBlockBroadcastMsgDefaultTypeInternal _BuileBlockBroadcastMsg_default_instance_;
class CheckHash;
class CheckHashDefaultTypeInternal;
extern CheckHashDefaultTypeInternal _CheckHash_default_instance_;
class ConfirmTransactionAck;
class ConfirmTransactionAckDefaultTypeInternal;
extern ConfirmTransactionAckDefaultTypeInternal _ConfirmTransactionAck_default_instance_;
class ConfirmTransactionReq;
class ConfirmTransactionReqDefaultTypeInternal;
extern ConfirmTransactionReqDefaultTypeInternal _ConfirmTransactionReq_default_instance_;
class GetDevInfoAck;
class GetDevInfoAckDefaultTypeInternal;
extern GetDevInfoAckDefaultTypeInternal _GetDevInfoAck_default_instance_;
class GetDevInfoReq;
class GetDevInfoReqDefaultTypeInternal;
extern GetDevInfoReqDefaultTypeInternal _GetDevInfoReq_default_instance_;
class SignNodeMsg;
class SignNodeMsgDefaultTypeInternal;
extern SignNodeMsgDefaultTypeInternal _SignNodeMsg_default_instance_;
class SyncBlockInfoAck;
class SyncBlockInfoAckDefaultTypeInternal;
extern SyncBlockInfoAckDefaultTypeInternal _SyncBlockInfoAck_default_instance_;
class SyncBlockInfoReq;
class SyncBlockInfoReqDefaultTypeInternal;
extern SyncBlockInfoReqDefaultTypeInternal _SyncBlockInfoReq_default_instance_;
class SyncGetPledgeNodeAck;
class SyncGetPledgeNodeAckDefaultTypeInternal;
extern SyncGetPledgeNodeAckDefaultTypeInternal _SyncGetPledgeNodeAck_default_instance_;
class SyncGetPledgeNodeReq;
class SyncGetPledgeNodeReqDefaultTypeInternal;
extern SyncGetPledgeNodeReqDefaultTypeInternal _SyncGetPledgeNodeReq_default_instance_;
class SyncGetnodeInfoAck;
class SyncGetnodeInfoAckDefaultTypeInternal;
extern SyncGetnodeInfoAckDefaultTypeInternal _SyncGetnodeInfoAck_default_instance_;
class SyncGetnodeInfoReq;
class SyncGetnodeInfoReqDefaultTypeInternal;
extern SyncGetnodeInfoReqDefaultTypeInternal _SyncGetnodeInfoReq_default_instance_;
class SyncHeaderMsg;
class SyncHeaderMsgDefaultTypeInternal;
extern SyncHeaderMsgDefaultTypeInternal _SyncHeaderMsg_default_instance_;
class SyncLoseBlockAck;
class SyncLoseBlockAckDefaultTypeInternal;
extern SyncLoseBlockAckDefaultTypeInternal _SyncLoseBlockAck_default_instance_;
class SyncLoseBlockReq;
class SyncLoseBlockReqDefaultTypeInternal;
extern SyncLoseBlockReqDefaultTypeInternal _SyncLoseBlockReq_default_instance_;
class SyncVerifyPledgeNodeAck;
class SyncVerifyPledgeNodeAckDefaultTypeInternal;
extern SyncVerifyPledgeNodeAckDefaultTypeInternal _SyncVerifyPledgeNodeAck_default_instance_;
class SyncVerifyPledgeNodeReq;
class SyncVerifyPledgeNodeReqDefaultTypeInternal;
extern SyncVerifyPledgeNodeReqDefaultTypeInternal _SyncVerifyPledgeNodeReq_default_instance_;
class TxMsg;
class TxMsgDefaultTypeInternal;
extern TxMsgDefaultTypeInternal _TxMsg_default_instance_;
class TxPendingBroadcastMsg;
class TxPendingBroadcastMsgDefaultTypeInternal;
extern TxPendingBroadcastMsgDefaultTypeInternal _TxPendingBroadcastMsg_default_instance_;
class VerifyReliableNodeAck;
class VerifyReliableNodeAckDefaultTypeInternal;
extern VerifyReliableNodeAckDefaultTypeInternal _VerifyReliableNodeAck_default_instance_;
class VerifyReliableNodeReq;
class VerifyReliableNodeReqDefaultTypeInternal;
extern VerifyReliableNodeReqDefaultTypeInternal _VerifyReliableNodeReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BuileBlockBroadcastMsg* Arena::CreateMaybeMessage<::BuileBlockBroadcastMsg>(Arena*);
template<> ::CheckHash* Arena::CreateMaybeMessage<::CheckHash>(Arena*);
template<> ::ConfirmTransactionAck* Arena::CreateMaybeMessage<::ConfirmTransactionAck>(Arena*);
template<> ::ConfirmTransactionReq* Arena::CreateMaybeMessage<::ConfirmTransactionReq>(Arena*);
template<> ::GetDevInfoAck* Arena::CreateMaybeMessage<::GetDevInfoAck>(Arena*);
template<> ::GetDevInfoReq* Arena::CreateMaybeMessage<::GetDevInfoReq>(Arena*);
template<> ::SignNodeMsg* Arena::CreateMaybeMessage<::SignNodeMsg>(Arena*);
template<> ::SyncBlockInfoAck* Arena::CreateMaybeMessage<::SyncBlockInfoAck>(Arena*);
template<> ::SyncBlockInfoReq* Arena::CreateMaybeMessage<::SyncBlockInfoReq>(Arena*);
template<> ::SyncGetPledgeNodeAck* Arena::CreateMaybeMessage<::SyncGetPledgeNodeAck>(Arena*);
template<> ::SyncGetPledgeNodeReq* Arena::CreateMaybeMessage<::SyncGetPledgeNodeReq>(Arena*);
template<> ::SyncGetnodeInfoAck* Arena::CreateMaybeMessage<::SyncGetnodeInfoAck>(Arena*);
template<> ::SyncGetnodeInfoReq* Arena::CreateMaybeMessage<::SyncGetnodeInfoReq>(Arena*);
template<> ::SyncHeaderMsg* Arena::CreateMaybeMessage<::SyncHeaderMsg>(Arena*);
template<> ::SyncLoseBlockAck* Arena::CreateMaybeMessage<::SyncLoseBlockAck>(Arena*);
template<> ::SyncLoseBlockReq* Arena::CreateMaybeMessage<::SyncLoseBlockReq>(Arena*);
template<> ::SyncVerifyPledgeNodeAck* Arena::CreateMaybeMessage<::SyncVerifyPledgeNodeAck>(Arena*);
template<> ::SyncVerifyPledgeNodeReq* Arena::CreateMaybeMessage<::SyncVerifyPledgeNodeReq>(Arena*);
template<> ::TxMsg* Arena::CreateMaybeMessage<::TxMsg>(Arena*);
template<> ::TxPendingBroadcastMsg* Arena::CreateMaybeMessage<::TxPendingBroadcastMsg>(Arena*);
template<> ::VerifyReliableNodeAck* Arena::CreateMaybeMessage<::VerifyReliableNodeAck>(Arena*);
template<> ::VerifyReliableNodeReq* Arena::CreateMaybeMessage<::VerifyReliableNodeReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ConfirmCacheFlag : int {
  ConfirmUnknownFlag = 0,
  ConfirmTxFlag = 1,
  ConfirmRpcFlag = 2,
  ConfirmCacheFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConfirmCacheFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConfirmCacheFlag_IsValid(int value);
constexpr ConfirmCacheFlag ConfirmCacheFlag_MIN = ConfirmUnknownFlag;
constexpr ConfirmCacheFlag ConfirmCacheFlag_MAX = ConfirmRpcFlag;
constexpr int ConfirmCacheFlag_ARRAYSIZE = ConfirmCacheFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfirmCacheFlag_descriptor();
template<typename T>
inline const std::string& ConfirmCacheFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfirmCacheFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfirmCacheFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfirmCacheFlag_descriptor(), enum_t_value);
}
inline bool ConfirmCacheFlag_Parse(
    const std::string& name, ConfirmCacheFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfirmCacheFlag>(
    ConfirmCacheFlag_descriptor(), name, value);
}
// ===================================================================

class SyncHeaderMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncHeaderMsg) */ {
 public:
  SyncHeaderMsg();
  virtual ~SyncHeaderMsg();

  SyncHeaderMsg(const SyncHeaderMsg& from);
  SyncHeaderMsg(SyncHeaderMsg&& from) noexcept
    : SyncHeaderMsg() {
    *this = ::std::move(from);
  }

  inline SyncHeaderMsg& operator=(const SyncHeaderMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncHeaderMsg& operator=(SyncHeaderMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncHeaderMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncHeaderMsg* internal_default_instance() {
    return reinterpret_cast<const SyncHeaderMsg*>(
               &_SyncHeaderMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncHeaderMsg& a, SyncHeaderMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncHeaderMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncHeaderMsg* New() const final {
    return CreateMaybeMessage<SyncHeaderMsg>(nullptr);
  }

  SyncHeaderMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncHeaderMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncHeaderMsg& from);
  void MergeFrom(const SyncHeaderMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncHeaderMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncHeaderMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 4,
  };
  // bytes version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes id = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:SyncHeaderMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class CheckHash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CheckHash) */ {
 public:
  CheckHash();
  virtual ~CheckHash();

  CheckHash(const CheckHash& from);
  CheckHash(CheckHash&& from) noexcept
    : CheckHash() {
    *this = ::std::move(from);
  }

  inline CheckHash& operator=(const CheckHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckHash& operator=(CheckHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckHash* internal_default_instance() {
    return reinterpret_cast<const CheckHash*>(
               &_CheckHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckHash& a, CheckHash& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckHash* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckHash* New() const final {
    return CreateMaybeMessage<CheckHash>(nullptr);
  }

  CheckHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckHash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckHash& from);
  void MergeFrom(const CheckHash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckHash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CheckHash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 3,
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // string hash = 3;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 begin = 1;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CheckHash)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncGetPledgeNodeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetPledgeNodeReq) */ {
 public:
  SyncGetPledgeNodeReq();
  virtual ~SyncGetPledgeNodeReq();

  SyncGetPledgeNodeReq(const SyncGetPledgeNodeReq& from);
  SyncGetPledgeNodeReq(SyncGetPledgeNodeReq&& from) noexcept
    : SyncGetPledgeNodeReq() {
    *this = ::std::move(from);
  }

  inline SyncGetPledgeNodeReq& operator=(const SyncGetPledgeNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetPledgeNodeReq& operator=(SyncGetPledgeNodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncGetPledgeNodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncGetPledgeNodeReq* internal_default_instance() {
    return reinterpret_cast<const SyncGetPledgeNodeReq*>(
               &_SyncGetPledgeNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncGetPledgeNodeReq& a, SyncGetPledgeNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetPledgeNodeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncGetPledgeNodeReq* New() const final {
    return CreateMaybeMessage<SyncGetPledgeNodeReq>(nullptr);
  }

  SyncGetPledgeNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncGetPledgeNodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncGetPledgeNodeReq& from);
  void MergeFrom(const SyncGetPledgeNodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetPledgeNodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetPledgeNodeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncHeaderMsgFieldNumber = 1,
  };
  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // @@protoc_insertion_point(class_scope:SyncGetPledgeNodeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SyncHeaderMsg* syncheadermsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncGetPledgeNodeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetPledgeNodeAck) */ {
 public:
  SyncGetPledgeNodeAck();
  virtual ~SyncGetPledgeNodeAck();

  SyncGetPledgeNodeAck(const SyncGetPledgeNodeAck& from);
  SyncGetPledgeNodeAck(SyncGetPledgeNodeAck&& from) noexcept
    : SyncGetPledgeNodeAck() {
    *this = ::std::move(from);
  }

  inline SyncGetPledgeNodeAck& operator=(const SyncGetPledgeNodeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetPledgeNodeAck& operator=(SyncGetPledgeNodeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncGetPledgeNodeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncGetPledgeNodeAck* internal_default_instance() {
    return reinterpret_cast<const SyncGetPledgeNodeAck*>(
               &_SyncGetPledgeNodeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SyncGetPledgeNodeAck& a, SyncGetPledgeNodeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetPledgeNodeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncGetPledgeNodeAck* New() const final {
    return CreateMaybeMessage<SyncGetPledgeNodeAck>(nullptr);
  }

  SyncGetPledgeNodeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncGetPledgeNodeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncGetPledgeNodeAck& from);
  void MergeFrom(const SyncGetPledgeNodeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetPledgeNodeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetPledgeNodeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:SyncGetPledgeNodeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncVerifyPledgeNodeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncVerifyPledgeNodeReq) */ {
 public:
  SyncVerifyPledgeNodeReq();
  virtual ~SyncVerifyPledgeNodeReq();

  SyncVerifyPledgeNodeReq(const SyncVerifyPledgeNodeReq& from);
  SyncVerifyPledgeNodeReq(SyncVerifyPledgeNodeReq&& from) noexcept
    : SyncVerifyPledgeNodeReq() {
    *this = ::std::move(from);
  }

  inline SyncVerifyPledgeNodeReq& operator=(const SyncVerifyPledgeNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncVerifyPledgeNodeReq& operator=(SyncVerifyPledgeNodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncVerifyPledgeNodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncVerifyPledgeNodeReq* internal_default_instance() {
    return reinterpret_cast<const SyncVerifyPledgeNodeReq*>(
               &_SyncVerifyPledgeNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SyncVerifyPledgeNodeReq& a, SyncVerifyPledgeNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncVerifyPledgeNodeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncVerifyPledgeNodeReq* New() const final {
    return CreateMaybeMessage<SyncVerifyPledgeNodeReq>(nullptr);
  }

  SyncVerifyPledgeNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncVerifyPledgeNodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncVerifyPledgeNodeReq& from);
  void MergeFrom(const SyncVerifyPledgeNodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncVerifyPledgeNodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncVerifyPledgeNodeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kSyncHeaderMsgFieldNumber = 1,
  };
  // repeated string ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // @@protoc_insertion_point(class_scope:SyncVerifyPledgeNodeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::SyncHeaderMsg* syncheadermsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncVerifyPledgeNodeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncVerifyPledgeNodeAck) */ {
 public:
  SyncVerifyPledgeNodeAck();
  virtual ~SyncVerifyPledgeNodeAck();

  SyncVerifyPledgeNodeAck(const SyncVerifyPledgeNodeAck& from);
  SyncVerifyPledgeNodeAck(SyncVerifyPledgeNodeAck&& from) noexcept
    : SyncVerifyPledgeNodeAck() {
    *this = ::std::move(from);
  }

  inline SyncVerifyPledgeNodeAck& operator=(const SyncVerifyPledgeNodeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncVerifyPledgeNodeAck& operator=(SyncVerifyPledgeNodeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncVerifyPledgeNodeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncVerifyPledgeNodeAck* internal_default_instance() {
    return reinterpret_cast<const SyncVerifyPledgeNodeAck*>(
               &_SyncVerifyPledgeNodeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SyncVerifyPledgeNodeAck& a, SyncVerifyPledgeNodeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncVerifyPledgeNodeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncVerifyPledgeNodeAck* New() const final {
    return CreateMaybeMessage<SyncVerifyPledgeNodeAck>(nullptr);
  }

  SyncVerifyPledgeNodeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncVerifyPledgeNodeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncVerifyPledgeNodeAck& from);
  void MergeFrom(const SyncVerifyPledgeNodeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncVerifyPledgeNodeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncVerifyPledgeNodeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:SyncVerifyPledgeNodeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncGetnodeInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetnodeInfoReq) */ {
 public:
  SyncGetnodeInfoReq();
  virtual ~SyncGetnodeInfoReq();

  SyncGetnodeInfoReq(const SyncGetnodeInfoReq& from);
  SyncGetnodeInfoReq(SyncGetnodeInfoReq&& from) noexcept
    : SyncGetnodeInfoReq() {
    *this = ::std::move(from);
  }

  inline SyncGetnodeInfoReq& operator=(const SyncGetnodeInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetnodeInfoReq& operator=(SyncGetnodeInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncGetnodeInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncGetnodeInfoReq* internal_default_instance() {
    return reinterpret_cast<const SyncGetnodeInfoReq*>(
               &_SyncGetnodeInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SyncGetnodeInfoReq& a, SyncGetnodeInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetnodeInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncGetnodeInfoReq* New() const final {
    return CreateMaybeMessage<SyncGetnodeInfoReq>(nullptr);
  }

  SyncGetnodeInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncGetnodeInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncGetnodeInfoReq& from);
  void MergeFrom(const SyncGetnodeInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetnodeInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetnodeInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncHeaderMsgFieldNumber = 1,
    kHeightFieldNumber = 2,
    kSyncNumFieldNumber = 3,
  };
  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // uint64 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 syncNum = 3;
  void clear_syncnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 syncnum() const;
  void set_syncnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_syncnum() const;
  void _internal_set_syncnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncGetnodeInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SyncHeaderMsg* syncheadermsg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 syncnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncGetnodeInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncGetnodeInfoAck) */ {
 public:
  SyncGetnodeInfoAck();
  virtual ~SyncGetnodeInfoAck();

  SyncGetnodeInfoAck(const SyncGetnodeInfoAck& from);
  SyncGetnodeInfoAck(SyncGetnodeInfoAck&& from) noexcept
    : SyncGetnodeInfoAck() {
    *this = ::std::move(from);
  }

  inline SyncGetnodeInfoAck& operator=(const SyncGetnodeInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncGetnodeInfoAck& operator=(SyncGetnodeInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncGetnodeInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncGetnodeInfoAck* internal_default_instance() {
    return reinterpret_cast<const SyncGetnodeInfoAck*>(
               &_SyncGetnodeInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SyncGetnodeInfoAck& a, SyncGetnodeInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncGetnodeInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncGetnodeInfoAck* New() const final {
    return CreateMaybeMessage<SyncGetnodeInfoAck>(nullptr);
  }

  SyncGetnodeInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncGetnodeInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncGetnodeInfoAck& from);
  void MergeFrom(const SyncGetnodeInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncGetnodeInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncGetnodeInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 3,
    kCheckHashForwardFieldNumber = 4,
    kCheckHashBackwardFieldNumber = 5,
    kSyncHeaderMsgFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // bytes hash = 3;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes checkHashForward = 4;
  void clear_checkhashforward();
  const std::string& checkhashforward() const;
  void set_checkhashforward(const std::string& value);
  void set_checkhashforward(std::string&& value);
  void set_checkhashforward(const char* value);
  void set_checkhashforward(const void* value, size_t size);
  std::string* mutable_checkhashforward();
  std::string* release_checkhashforward();
  void set_allocated_checkhashforward(std::string* checkhashforward);
  private:
  const std::string& _internal_checkhashforward() const;
  void _internal_set_checkhashforward(const std::string& value);
  std::string* _internal_mutable_checkhashforward();
  public:

  // bytes checkHashBackward = 5;
  void clear_checkhashbackward();
  const std::string& checkhashbackward() const;
  void set_checkhashbackward(const std::string& value);
  void set_checkhashbackward(std::string&& value);
  void set_checkhashbackward(const char* value);
  void set_checkhashbackward(const void* value, size_t size);
  std::string* mutable_checkhashbackward();
  std::string* release_checkhashbackward();
  void set_allocated_checkhashbackward(std::string* checkhashbackward);
  private:
  const std::string& _internal_checkhashbackward() const;
  void _internal_set_checkhashbackward(const std::string& value);
  std::string* _internal_mutable_checkhashbackward();
  public:

  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // uint64 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncGetnodeInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkhashforward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkhashbackward_;
  ::SyncHeaderMsg* syncheadermsg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class VerifyReliableNodeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerifyReliableNodeReq) */ {
 public:
  VerifyReliableNodeReq();
  virtual ~VerifyReliableNodeReq();

  VerifyReliableNodeReq(const VerifyReliableNodeReq& from);
  VerifyReliableNodeReq(VerifyReliableNodeReq&& from) noexcept
    : VerifyReliableNodeReq() {
    *this = ::std::move(from);
  }

  inline VerifyReliableNodeReq& operator=(const VerifyReliableNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyReliableNodeReq& operator=(VerifyReliableNodeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyReliableNodeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyReliableNodeReq* internal_default_instance() {
    return reinterpret_cast<const VerifyReliableNodeReq*>(
               &_VerifyReliableNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VerifyReliableNodeReq& a, VerifyReliableNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyReliableNodeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyReliableNodeReq* New() const final {
    return CreateMaybeMessage<VerifyReliableNodeReq>(nullptr);
  }

  VerifyReliableNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyReliableNodeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyReliableNodeReq& from);
  void MergeFrom(const VerifyReliableNodeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyReliableNodeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerifyReliableNodeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncHeaderMsgFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // int64 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:VerifyReliableNodeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SyncHeaderMsg* syncheadermsg_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class VerifyReliableNodeAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VerifyReliableNodeAck) */ {
 public:
  VerifyReliableNodeAck();
  virtual ~VerifyReliableNodeAck();

  VerifyReliableNodeAck(const VerifyReliableNodeAck& from);
  VerifyReliableNodeAck(VerifyReliableNodeAck&& from) noexcept
    : VerifyReliableNodeAck() {
    *this = ::std::move(from);
  }

  inline VerifyReliableNodeAck& operator=(const VerifyReliableNodeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyReliableNodeAck& operator=(VerifyReliableNodeAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyReliableNodeAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyReliableNodeAck* internal_default_instance() {
    return reinterpret_cast<const VerifyReliableNodeAck*>(
               &_VerifyReliableNodeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VerifyReliableNodeAck& a, VerifyReliableNodeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyReliableNodeAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyReliableNodeAck* New() const final {
    return CreateMaybeMessage<VerifyReliableNodeAck>(nullptr);
  }

  VerifyReliableNodeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyReliableNodeAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyReliableNodeAck& from);
  void MergeFrom(const VerifyReliableNodeAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyReliableNodeAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VerifyReliableNodeAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kHashFieldNumber = 4,
    kSyncHeaderMsgFieldNumber = 1,
    kHeightFieldNumber = 3,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes hash = 4;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // uint64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:VerifyReliableNodeAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::SyncHeaderMsg* syncheadermsg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncBlockInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncBlockInfoReq) */ {
 public:
  SyncBlockInfoReq();
  virtual ~SyncBlockInfoReq();

  SyncBlockInfoReq(const SyncBlockInfoReq& from);
  SyncBlockInfoReq(SyncBlockInfoReq&& from) noexcept
    : SyncBlockInfoReq() {
    *this = ::std::move(from);
  }

  inline SyncBlockInfoReq& operator=(const SyncBlockInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBlockInfoReq& operator=(SyncBlockInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncBlockInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncBlockInfoReq* internal_default_instance() {
    return reinterpret_cast<const SyncBlockInfoReq*>(
               &_SyncBlockInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SyncBlockInfoReq& a, SyncBlockInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBlockInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBlockInfoReq* New() const final {
    return CreateMaybeMessage<SyncBlockInfoReq>(nullptr);
  }

  SyncBlockInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBlockInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBlockInfoReq& from);
  void MergeFrom(const SyncBlockInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBlockInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncBlockInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckhashFieldNumber = 3,
    kIdFieldNumber = 6,
    kSyncHeaderMsgFieldNumber = 1,
    kHeightFieldNumber = 2,
    kMaxNumFieldNumber = 4,
    kMaxHeightFieldNumber = 5,
  };
  // repeated .CheckHash checkhash = 3;
  int checkhash_size() const;
  private:
  int _internal_checkhash_size() const;
  public:
  void clear_checkhash();
  ::CheckHash* mutable_checkhash(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >*
      mutable_checkhash();
  private:
  const ::CheckHash& _internal_checkhash(int index) const;
  ::CheckHash* _internal_add_checkhash();
  public:
  const ::CheckHash& checkhash(int index) const;
  ::CheckHash* add_checkhash();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >&
      checkhash() const;

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // uint64 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_num = 4;
  void clear_max_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_num() const;
  void set_max_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_num() const;
  void _internal_set_max_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_height = 5;
  void clear_max_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_height() const;
  void set_max_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_height() const;
  void _internal_set_max_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncBlockInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash > checkhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::SyncHeaderMsg* syncheadermsg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncBlockInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncBlockInfoAck) */ {
 public:
  SyncBlockInfoAck();
  virtual ~SyncBlockInfoAck();

  SyncBlockInfoAck(const SyncBlockInfoAck& from);
  SyncBlockInfoAck(SyncBlockInfoAck&& from) noexcept
    : SyncBlockInfoAck() {
    *this = ::std::move(from);
  }

  inline SyncBlockInfoAck& operator=(const SyncBlockInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBlockInfoAck& operator=(SyncBlockInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncBlockInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncBlockInfoAck* internal_default_instance() {
    return reinterpret_cast<const SyncBlockInfoAck*>(
               &_SyncBlockInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SyncBlockInfoAck& a, SyncBlockInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBlockInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBlockInfoAck* New() const final {
    return CreateMaybeMessage<SyncBlockInfoAck>(nullptr);
  }

  SyncBlockInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBlockInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBlockInfoAck& from);
  void MergeFrom(const SyncBlockInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBlockInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncBlockInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvalidCheckhashFieldNumber = 2,
    kBlocksFieldNumber = 3,
    kPoolblocksFieldNumber = 4,
    kSyncHeaderMsgFieldNumber = 1,
  };
  // repeated .CheckHash invalid_checkhash = 2;
  int invalid_checkhash_size() const;
  private:
  int _internal_invalid_checkhash_size() const;
  public:
  void clear_invalid_checkhash();
  ::CheckHash* mutable_invalid_checkhash(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >*
      mutable_invalid_checkhash();
  private:
  const ::CheckHash& _internal_invalid_checkhash(int index) const;
  ::CheckHash* _internal_add_invalid_checkhash();
  public:
  const ::CheckHash& invalid_checkhash(int index) const;
  ::CheckHash* add_invalid_checkhash();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >&
      invalid_checkhash() const;

  // bytes blocks = 3;
  void clear_blocks();
  const std::string& blocks() const;
  void set_blocks(const std::string& value);
  void set_blocks(std::string&& value);
  void set_blocks(const char* value);
  void set_blocks(const void* value, size_t size);
  std::string* mutable_blocks();
  std::string* release_blocks();
  void set_allocated_blocks(std::string* blocks);
  private:
  const std::string& _internal_blocks() const;
  void _internal_set_blocks(const std::string& value);
  std::string* _internal_mutable_blocks();
  public:

  // bytes poolblocks = 4;
  void clear_poolblocks();
  const std::string& poolblocks() const;
  void set_poolblocks(const std::string& value);
  void set_poolblocks(std::string&& value);
  void set_poolblocks(const char* value);
  void set_poolblocks(const void* value, size_t size);
  std::string* mutable_poolblocks();
  std::string* release_poolblocks();
  void set_allocated_poolblocks(std::string* poolblocks);
  private:
  const std::string& _internal_poolblocks() const;
  void _internal_set_poolblocks(const std::string& value);
  std::string* _internal_mutable_poolblocks();
  public:

  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // @@protoc_insertion_point(class_scope:SyncBlockInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash > invalid_checkhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poolblocks_;
  ::SyncHeaderMsg* syncheadermsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncLoseBlockReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncLoseBlockReq) */ {
 public:
  SyncLoseBlockReq();
  virtual ~SyncLoseBlockReq();

  SyncLoseBlockReq(const SyncLoseBlockReq& from);
  SyncLoseBlockReq(SyncLoseBlockReq&& from) noexcept
    : SyncLoseBlockReq() {
    *this = ::std::move(from);
  }

  inline SyncLoseBlockReq& operator=(const SyncLoseBlockReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncLoseBlockReq& operator=(SyncLoseBlockReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncLoseBlockReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncLoseBlockReq* internal_default_instance() {
    return reinterpret_cast<const SyncLoseBlockReq*>(
               &_SyncLoseBlockReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SyncLoseBlockReq& a, SyncLoseBlockReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncLoseBlockReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncLoseBlockReq* New() const final {
    return CreateMaybeMessage<SyncLoseBlockReq>(nullptr);
  }

  SyncLoseBlockReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncLoseBlockReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncLoseBlockReq& from);
  void MergeFrom(const SyncLoseBlockReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncLoseBlockReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncLoseBlockReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllHashFieldNumber = 4,
    kSyncHeaderMsgFieldNumber = 1,
    kBeginFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // string all_hash = 4;
  void clear_all_hash();
  const std::string& all_hash() const;
  void set_all_hash(const std::string& value);
  void set_all_hash(std::string&& value);
  void set_all_hash(const char* value);
  void set_all_hash(const char* value, size_t size);
  std::string* mutable_all_hash();
  std::string* release_all_hash();
  void set_allocated_all_hash(std::string* all_hash);
  private:
  const std::string& _internal_all_hash() const;
  void _internal_set_all_hash(const std::string& value);
  std::string* _internal_mutable_all_hash();
  public:

  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // uint64 begin = 2;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SyncLoseBlockReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr all_hash_;
  ::SyncHeaderMsg* syncheadermsg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SyncLoseBlockAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncLoseBlockAck) */ {
 public:
  SyncLoseBlockAck();
  virtual ~SyncLoseBlockAck();

  SyncLoseBlockAck(const SyncLoseBlockAck& from);
  SyncLoseBlockAck(SyncLoseBlockAck&& from) noexcept
    : SyncLoseBlockAck() {
    *this = ::std::move(from);
  }

  inline SyncLoseBlockAck& operator=(const SyncLoseBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncLoseBlockAck& operator=(SyncLoseBlockAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncLoseBlockAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncLoseBlockAck* internal_default_instance() {
    return reinterpret_cast<const SyncLoseBlockAck*>(
               &_SyncLoseBlockAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SyncLoseBlockAck& a, SyncLoseBlockAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncLoseBlockAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncLoseBlockAck* New() const final {
    return CreateMaybeMessage<SyncLoseBlockAck>(nullptr);
  }

  SyncLoseBlockAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncLoseBlockAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncLoseBlockAck& from);
  void MergeFrom(const SyncLoseBlockAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncLoseBlockAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncLoseBlockAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kSyncHeaderMsgFieldNumber = 1,
  };
  // bytes blocks = 2;
  void clear_blocks();
  const std::string& blocks() const;
  void set_blocks(const std::string& value);
  void set_blocks(std::string&& value);
  void set_blocks(const char* value);
  void set_blocks(const void* value, size_t size);
  std::string* mutable_blocks();
  std::string* release_blocks();
  void set_allocated_blocks(std::string* blocks);
  private:
  const std::string& _internal_blocks() const;
  void _internal_set_blocks(const std::string& value);
  std::string* _internal_mutable_blocks();
  public:

  // .SyncHeaderMsg syncHeaderMsg = 1;
  bool has_syncheadermsg() const;
  private:
  bool _internal_has_syncheadermsg() const;
  public:
  void clear_syncheadermsg();
  const ::SyncHeaderMsg& syncheadermsg() const;
  ::SyncHeaderMsg* release_syncheadermsg();
  ::SyncHeaderMsg* mutable_syncheadermsg();
  void set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg);
  private:
  const ::SyncHeaderMsg& _internal_syncheadermsg() const;
  ::SyncHeaderMsg* _internal_mutable_syncheadermsg();
  public:

  // @@protoc_insertion_point(class_scope:SyncLoseBlockAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blocks_;
  ::SyncHeaderMsg* syncheadermsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class SignNodeMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SignNodeMsg) */ {
 public:
  SignNodeMsg();
  virtual ~SignNodeMsg();

  SignNodeMsg(const SignNodeMsg& from);
  SignNodeMsg(SignNodeMsg&& from) noexcept
    : SignNodeMsg() {
    *this = ::std::move(from);
  }

  inline SignNodeMsg& operator=(const SignNodeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignNodeMsg& operator=(SignNodeMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignNodeMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignNodeMsg* internal_default_instance() {
    return reinterpret_cast<const SignNodeMsg*>(
               &_SignNodeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SignNodeMsg& a, SignNodeMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SignNodeMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignNodeMsg* New() const final {
    return CreateMaybeMessage<SignNodeMsg>(nullptr);
  }

  SignNodeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignNodeMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignNodeMsg& from);
  void MergeFrom(const SignNodeMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignNodeMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SignNodeMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignMsgFieldNumber = 2,
    kSignPubKeyFieldNumber = 3,
    kGasFeeFieldNumber = 4,
    kOnlineTimeFieldNumber = 5,
    kAwardTotalFieldNumber = 6,
    kSignSumFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes signMsg = 2;
  void clear_signmsg();
  const std::string& signmsg() const;
  void set_signmsg(const std::string& value);
  void set_signmsg(std::string&& value);
  void set_signmsg(const char* value);
  void set_signmsg(const void* value, size_t size);
  std::string* mutable_signmsg();
  std::string* release_signmsg();
  void set_allocated_signmsg(std::string* signmsg);
  private:
  const std::string& _internal_signmsg() const;
  void _internal_set_signmsg(const std::string& value);
  std::string* _internal_mutable_signmsg();
  public:

  // bytes signPubKey = 3;
  void clear_signpubkey();
  const std::string& signpubkey() const;
  void set_signpubkey(const std::string& value);
  void set_signpubkey(std::string&& value);
  void set_signpubkey(const char* value);
  void set_signpubkey(const void* value, size_t size);
  std::string* mutable_signpubkey();
  std::string* release_signpubkey();
  void set_allocated_signpubkey(std::string* signpubkey);
  private:
  const std::string& _internal_signpubkey() const;
  void _internal_set_signpubkey(const std::string& value);
  std::string* _internal_mutable_signpubkey();
  public:

  // string gasFee = 4;
  void clear_gasfee();
  const std::string& gasfee() const;
  void set_gasfee(const std::string& value);
  void set_gasfee(std::string&& value);
  void set_gasfee(const char* value);
  void set_gasfee(const char* value, size_t size);
  std::string* mutable_gasfee();
  std::string* release_gasfee();
  void set_allocated_gasfee(std::string* gasfee);
  private:
  const std::string& _internal_gasfee() const;
  void _internal_set_gasfee(const std::string& value);
  std::string* _internal_mutable_gasfee();
  public:

  // double onlineTime = 5;
  void clear_onlinetime();
  double onlinetime() const;
  void set_onlinetime(double value);
  private:
  double _internal_onlinetime() const;
  void _internal_set_onlinetime(double value);
  public:

  // uint64 awardTotal = 6;
  void clear_awardtotal();
  ::PROTOBUF_NAMESPACE_ID::uint64 awardtotal() const;
  void set_awardtotal(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_awardtotal() const;
  void _internal_set_awardtotal(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 signSum = 7;
  void clear_signsum();
  ::PROTOBUF_NAMESPACE_ID::uint64 signsum() const;
  void set_signsum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signsum() const;
  void _internal_set_signsum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:SignNodeMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signpubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasfee_;
  double onlinetime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 awardtotal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signsum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class TxMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxMsg) */ {
 public:
  TxMsg();
  virtual ~TxMsg();

  TxMsg(const TxMsg& from);
  TxMsg(TxMsg&& from) noexcept
    : TxMsg() {
    *this = ::std::move(from);
  }

  inline TxMsg& operator=(const TxMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxMsg& operator=(TxMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxMsg* internal_default_instance() {
    return reinterpret_cast<const TxMsg*>(
               &_TxMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TxMsg& a, TxMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TxMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxMsg* New() const final {
    return CreateMaybeMessage<TxMsg>(nullptr);
  }

  TxMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxMsg& from);
  void MergeFrom(const TxMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignNodeMsgFieldNumber = 5,
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
    kTxFieldNumber = 3,
    kTxEncodeHashFieldNumber = 4,
    kPrevBlkHashFieldNumber = 7,
    kTopFieldNumber = 6,
    kTryCountDownFieldNumber = 8,
  };
  // repeated .SignNodeMsg signNodeMsg = 5;
  int signnodemsg_size() const;
  private:
  int _internal_signnodemsg_size() const;
  public:
  void clear_signnodemsg();
  ::SignNodeMsg* mutable_signnodemsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >*
      mutable_signnodemsg();
  private:
  const ::SignNodeMsg& _internal_signnodemsg(int index) const;
  ::SignNodeMsg* _internal_add_signnodemsg();
  public:
  const ::SignNodeMsg& signnodemsg(int index) const;
  ::SignNodeMsg* add_signnodemsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >&
      signnodemsg() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes tx = 3;
  void clear_tx();
  const std::string& tx() const;
  void set_tx(const std::string& value);
  void set_tx(std::string&& value);
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  std::string* mutable_tx();
  std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // string txEncodeHash = 4;
  void clear_txencodehash();
  const std::string& txencodehash() const;
  void set_txencodehash(const std::string& value);
  void set_txencodehash(std::string&& value);
  void set_txencodehash(const char* value);
  void set_txencodehash(const char* value, size_t size);
  std::string* mutable_txencodehash();
  std::string* release_txencodehash();
  void set_allocated_txencodehash(std::string* txencodehash);
  private:
  const std::string& _internal_txencodehash() const;
  void _internal_set_txencodehash(const std::string& value);
  std::string* _internal_mutable_txencodehash();
  public:

  // string prevBlkHash = 7;
  void clear_prevblkhash();
  const std::string& prevblkhash() const;
  void set_prevblkhash(const std::string& value);
  void set_prevblkhash(std::string&& value);
  void set_prevblkhash(const char* value);
  void set_prevblkhash(const char* value, size_t size);
  std::string* mutable_prevblkhash();
  std::string* release_prevblkhash();
  void set_allocated_prevblkhash(std::string* prevblkhash);
  private:
  const std::string& _internal_prevblkhash() const;
  void _internal_set_prevblkhash(const std::string& value);
  std::string* _internal_mutable_prevblkhash();
  public:

  // uint64 top = 6;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::uint64 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 tryCountDown = 8;
  void clear_trycountdown();
  ::PROTOBUF_NAMESPACE_ID::int32 trycountdown() const;
  void set_trycountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trycountdown() const;
  void _internal_set_trycountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TxMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg > signnodemsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txencodehash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevblkhash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 top_;
  ::PROTOBUF_NAMESPACE_ID::int32 trycountdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class BuileBlockBroadcastMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuileBlockBroadcastMsg) */ {
 public:
  BuileBlockBroadcastMsg();
  virtual ~BuileBlockBroadcastMsg();

  BuileBlockBroadcastMsg(const BuileBlockBroadcastMsg& from);
  BuileBlockBroadcastMsg(BuileBlockBroadcastMsg&& from) noexcept
    : BuileBlockBroadcastMsg() {
    *this = ::std::move(from);
  }

  inline BuileBlockBroadcastMsg& operator=(const BuileBlockBroadcastMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuileBlockBroadcastMsg& operator=(BuileBlockBroadcastMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuileBlockBroadcastMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuileBlockBroadcastMsg* internal_default_instance() {
    return reinterpret_cast<const BuileBlockBroadcastMsg*>(
               &_BuileBlockBroadcastMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BuileBlockBroadcastMsg& a, BuileBlockBroadcastMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BuileBlockBroadcastMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuileBlockBroadcastMsg* New() const final {
    return CreateMaybeMessage<BuileBlockBroadcastMsg>(nullptr);
  }

  BuileBlockBroadcastMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuileBlockBroadcastMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuileBlockBroadcastMsg& from);
  void MergeFrom(const BuileBlockBroadcastMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuileBlockBroadcastMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuileBlockBroadcastMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kBlockRawFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes blockRaw = 2;
  void clear_blockraw();
  const std::string& blockraw() const;
  void set_blockraw(const std::string& value);
  void set_blockraw(std::string&& value);
  void set_blockraw(const char* value);
  void set_blockraw(const void* value, size_t size);
  std::string* mutable_blockraw();
  std::string* release_blockraw();
  void set_allocated_blockraw(std::string* blockraw);
  private:
  const std::string& _internal_blockraw() const;
  void _internal_set_blockraw(const std::string& value);
  std::string* _internal_mutable_blockraw();
  public:

  // @@protoc_insertion_point(class_scope:BuileBlockBroadcastMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockraw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class TxPendingBroadcastMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TxPendingBroadcastMsg) */ {
 public:
  TxPendingBroadcastMsg();
  virtual ~TxPendingBroadcastMsg();

  TxPendingBroadcastMsg(const TxPendingBroadcastMsg& from);
  TxPendingBroadcastMsg(TxPendingBroadcastMsg&& from) noexcept
    : TxPendingBroadcastMsg() {
    *this = ::std::move(from);
  }

  inline TxPendingBroadcastMsg& operator=(const TxPendingBroadcastMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxPendingBroadcastMsg& operator=(TxPendingBroadcastMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxPendingBroadcastMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxPendingBroadcastMsg* internal_default_instance() {
    return reinterpret_cast<const TxPendingBroadcastMsg*>(
               &_TxPendingBroadcastMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TxPendingBroadcastMsg& a, TxPendingBroadcastMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TxPendingBroadcastMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxPendingBroadcastMsg* New() const final {
    return CreateMaybeMessage<TxPendingBroadcastMsg>(nullptr);
  }

  TxPendingBroadcastMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxPendingBroadcastMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxPendingBroadcastMsg& from);
  void MergeFrom(const TxPendingBroadcastMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxPendingBroadcastMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TxPendingBroadcastMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTxRawFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes txRaw = 2;
  void clear_txraw();
  const std::string& txraw() const;
  void set_txraw(const std::string& value);
  void set_txraw(std::string&& value);
  void set_txraw(const char* value);
  void set_txraw(const void* value, size_t size);
  std::string* mutable_txraw();
  std::string* release_txraw();
  void set_allocated_txraw(std::string* txraw);
  private:
  const std::string& _internal_txraw() const;
  void _internal_set_txraw(const std::string& value);
  std::string* _internal_mutable_txraw();
  public:

  // @@protoc_insertion_point(class_scope:TxPendingBroadcastMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txraw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class GetDevInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevInfoReq) */ {
 public:
  GetDevInfoReq();
  virtual ~GetDevInfoReq();

  GetDevInfoReq(const GetDevInfoReq& from);
  GetDevInfoReq(GetDevInfoReq&& from) noexcept
    : GetDevInfoReq() {
    *this = ::std::move(from);
  }

  inline GetDevInfoReq& operator=(const GetDevInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevInfoReq& operator=(GetDevInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetDevInfoReq*>(
               &_GetDevInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetDevInfoReq& a, GetDevInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevInfoReq* New() const final {
    return CreateMaybeMessage<GetDevInfoReq>(nullptr);
  }

  GetDevInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevInfoReq& from);
  void MergeFrom(const GetDevInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:GetDevInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class GetDevInfoAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDevInfoAck) */ {
 public:
  GetDevInfoAck();
  virtual ~GetDevInfoAck();

  GetDevInfoAck(const GetDevInfoAck& from);
  GetDevInfoAck(GetDevInfoAck&& from) noexcept
    : GetDevInfoAck() {
    *this = ::std::move(from);
  }

  inline GetDevInfoAck& operator=(const GetDevInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDevInfoAck& operator=(GetDevInfoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDevInfoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDevInfoAck* internal_default_instance() {
    return reinterpret_cast<const GetDevInfoAck*>(
               &_GetDevInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetDevInfoAck& a, GetDevInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDevInfoAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDevInfoAck* New() const final {
    return CreateMaybeMessage<GetDevInfoAck>(nullptr);
  }

  GetDevInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDevInfoAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDevInfoAck& from);
  void MergeFrom(const GetDevInfoAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDevInfoAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDevInfoAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
    kHashFieldNumber = 4,
    kBase58AddrFieldNumber = 5,
    kHeightFieldNumber = 3,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string hash = 4;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string base58addr = 5;
  void clear_base58addr();
  const std::string& base58addr() const;
  void set_base58addr(const std::string& value);
  void set_base58addr(std::string&& value);
  void set_base58addr(const char* value);
  void set_base58addr(const char* value, size_t size);
  std::string* mutable_base58addr();
  std::string* release_base58addr();
  void set_allocated_base58addr(std::string* base58addr);
  private:
  const std::string& _internal_base58addr() const;
  void _internal_set_base58addr(const std::string& value);
  std::string* _internal_mutable_base58addr();
  public:

  // uint64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:GetDevInfoAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base58addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class ConfirmTransactionReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfirmTransactionReq) */ {
 public:
  ConfirmTransactionReq();
  virtual ~ConfirmTransactionReq();

  ConfirmTransactionReq(const ConfirmTransactionReq& from);
  ConfirmTransactionReq(ConfirmTransactionReq&& from) noexcept
    : ConfirmTransactionReq() {
    *this = ::std::move(from);
  }

  inline ConfirmTransactionReq& operator=(const ConfirmTransactionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmTransactionReq& operator=(ConfirmTransactionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfirmTransactionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfirmTransactionReq* internal_default_instance() {
    return reinterpret_cast<const ConfirmTransactionReq*>(
               &_ConfirmTransactionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ConfirmTransactionReq& a, ConfirmTransactionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmTransactionReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfirmTransactionReq* New() const final {
    return CreateMaybeMessage<ConfirmTransactionReq>(nullptr);
  }

  ConfirmTransactionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfirmTransactionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfirmTransactionReq& from);
  void MergeFrom(const ConfirmTransactionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmTransactionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfirmTransactionReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
    kTxHashFieldNumber = 3,
    kFlagFieldNumber = 4,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string tx_hash = 3;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // .ConfirmCacheFlag flag = 4;
  void clear_flag();
  ::ConfirmCacheFlag flag() const;
  void set_flag(::ConfirmCacheFlag value);
  private:
  ::ConfirmCacheFlag _internal_flag() const;
  void _internal_set_flag(::ConfirmCacheFlag value);
  public:

  // @@protoc_insertion_point(class_scope:ConfirmTransactionReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  int flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// -------------------------------------------------------------------

class ConfirmTransactionAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfirmTransactionAck) */ {
 public:
  ConfirmTransactionAck();
  virtual ~ConfirmTransactionAck();

  ConfirmTransactionAck(const ConfirmTransactionAck& from);
  ConfirmTransactionAck(ConfirmTransactionAck&& from) noexcept
    : ConfirmTransactionAck() {
    *this = ::std::move(from);
  }

  inline ConfirmTransactionAck& operator=(const ConfirmTransactionAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmTransactionAck& operator=(ConfirmTransactionAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfirmTransactionAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfirmTransactionAck* internal_default_instance() {
    return reinterpret_cast<const ConfirmTransactionAck*>(
               &_ConfirmTransactionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ConfirmTransactionAck& a, ConfirmTransactionAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmTransactionAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfirmTransactionAck* New() const final {
    return CreateMaybeMessage<ConfirmTransactionAck>(nullptr);
  }

  ConfirmTransactionAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfirmTransactionAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfirmTransactionAck& from);
  void MergeFrom(const ConfirmTransactionAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmTransactionAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfirmTransactionAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ca_5fprotomsg_2eproto);
    return ::descriptor_table_ca_5fprotomsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kIdFieldNumber = 2,
    kTxHashFieldNumber = 3,
    kBlockRawFieldNumber = 6,
    kFlagFieldNumber = 4,
    kSuccessFieldNumber = 5,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string tx_hash = 3;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // bytes block_raw = 6;
  void clear_block_raw();
  const std::string& block_raw() const;
  void set_block_raw(const std::string& value);
  void set_block_raw(std::string&& value);
  void set_block_raw(const char* value);
  void set_block_raw(const void* value, size_t size);
  std::string* mutable_block_raw();
  std::string* release_block_raw();
  void set_allocated_block_raw(std::string* block_raw);
  private:
  const std::string& _internal_block_raw() const;
  void _internal_set_block_raw(const std::string& value);
  std::string* _internal_mutable_block_raw();
  public:

  // .ConfirmCacheFlag flag = 4;
  void clear_flag();
  ::ConfirmCacheFlag flag() const;
  void set_flag(::ConfirmCacheFlag value);
  private:
  ::ConfirmCacheFlag _internal_flag() const;
  void _internal_set_flag(::ConfirmCacheFlag value);
  public:

  // bool success = 5;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ConfirmTransactionAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_raw_;
  int flag_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ca_5fprotomsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncHeaderMsg

// bytes version = 1;
inline void SyncHeaderMsg::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncHeaderMsg::version() const {
  // @@protoc_insertion_point(field_get:SyncHeaderMsg.version)
  return _internal_version();
}
inline void SyncHeaderMsg::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SyncHeaderMsg.version)
}
inline std::string* SyncHeaderMsg::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SyncHeaderMsg.version)
  return _internal_mutable_version();
}
inline const std::string& SyncHeaderMsg::_internal_version() const {
  return version_.GetNoArena();
}
inline void SyncHeaderMsg::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncHeaderMsg::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncHeaderMsg.version)
}
inline void SyncHeaderMsg::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncHeaderMsg.version)
}
inline void SyncHeaderMsg::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncHeaderMsg.version)
}
inline std::string* SyncHeaderMsg::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncHeaderMsg::release_version() {
  // @@protoc_insertion_point(field_release:SyncHeaderMsg.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncHeaderMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SyncHeaderMsg.version)
}

// bytes id = 4;
inline void SyncHeaderMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncHeaderMsg::id() const {
  // @@protoc_insertion_point(field_get:SyncHeaderMsg.id)
  return _internal_id();
}
inline void SyncHeaderMsg::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SyncHeaderMsg.id)
}
inline std::string* SyncHeaderMsg::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SyncHeaderMsg.id)
  return _internal_mutable_id();
}
inline const std::string& SyncHeaderMsg::_internal_id() const {
  return id_.GetNoArena();
}
inline void SyncHeaderMsg::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncHeaderMsg::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncHeaderMsg.id)
}
inline void SyncHeaderMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncHeaderMsg.id)
}
inline void SyncHeaderMsg::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncHeaderMsg.id)
}
inline std::string* SyncHeaderMsg::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncHeaderMsg::release_id() {
  // @@protoc_insertion_point(field_release:SyncHeaderMsg.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncHeaderMsg::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SyncHeaderMsg.id)
}

// -------------------------------------------------------------------

// CheckHash

// uint64 begin = 1;
inline void CheckHash::clear_begin() {
  begin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckHash::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckHash::begin() const {
  // @@protoc_insertion_point(field_get:CheckHash.begin)
  return _internal_begin();
}
inline void CheckHash::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  begin_ = value;
}
inline void CheckHash::set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:CheckHash.begin)
}

// uint64 end = 2;
inline void CheckHash::clear_end() {
  end_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckHash::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckHash::end() const {
  // @@protoc_insertion_point(field_get:CheckHash.end)
  return _internal_end();
}
inline void CheckHash::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_ = value;
}
inline void CheckHash::set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:CheckHash.end)
}

// string hash = 3;
inline void CheckHash::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckHash::hash() const {
  // @@protoc_insertion_point(field_get:CheckHash.hash)
  return _internal_hash();
}
inline void CheckHash::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:CheckHash.hash)
}
inline std::string* CheckHash::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:CheckHash.hash)
  return _internal_mutable_hash();
}
inline const std::string& CheckHash::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void CheckHash::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckHash::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CheckHash.hash)
}
inline void CheckHash::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CheckHash.hash)
}
inline void CheckHash::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CheckHash.hash)
}
inline std::string* CheckHash::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckHash::release_hash() {
  // @@protoc_insertion_point(field_release:CheckHash.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckHash::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:CheckHash.hash)
}

// -------------------------------------------------------------------

// SyncGetPledgeNodeReq

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncGetPledgeNodeReq::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncGetPledgeNodeReq::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncGetPledgeNodeReq::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncGetPledgeNodeReq::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncGetPledgeNodeReq::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncGetPledgeNodeReq.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncGetPledgeNodeReq::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncGetPledgeNodeReq.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncGetPledgeNodeReq::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncGetPledgeNodeReq::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncGetPledgeNodeReq.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncGetPledgeNodeReq::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncGetPledgeNodeReq.syncHeaderMsg)
}

// -------------------------------------------------------------------

// SyncGetPledgeNodeAck

// repeated string ids = 1;
inline int SyncGetPledgeNodeAck::_internal_ids_size() const {
  return ids_.size();
}
inline int SyncGetPledgeNodeAck::ids_size() const {
  return _internal_ids_size();
}
inline void SyncGetPledgeNodeAck::clear_ids() {
  ids_.Clear();
}
inline std::string* SyncGetPledgeNodeAck::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:SyncGetPledgeNodeAck.ids)
  return _internal_add_ids();
}
inline const std::string& SyncGetPledgeNodeAck::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& SyncGetPledgeNodeAck::ids(int index) const {
  // @@protoc_insertion_point(field_get:SyncGetPledgeNodeAck.ids)
  return _internal_ids(index);
}
inline std::string* SyncGetPledgeNodeAck::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:SyncGetPledgeNodeAck.ids)
  return ids_.Mutable(index);
}
inline void SyncGetPledgeNodeAck::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SyncGetPledgeNodeAck.ids)
  ids_.Mutable(index)->assign(value);
}
inline void SyncGetPledgeNodeAck::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SyncGetPledgeNodeAck.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void SyncGetPledgeNodeAck::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncGetPledgeNodeAck.ids)
}
inline void SyncGetPledgeNodeAck::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncGetPledgeNodeAck.ids)
}
inline std::string* SyncGetPledgeNodeAck::_internal_add_ids() {
  return ids_.Add();
}
inline void SyncGetPledgeNodeAck::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncGetPledgeNodeAck.ids)
}
inline void SyncGetPledgeNodeAck::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncGetPledgeNodeAck.ids)
}
inline void SyncGetPledgeNodeAck::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncGetPledgeNodeAck.ids)
}
inline void SyncGetPledgeNodeAck::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncGetPledgeNodeAck.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncGetPledgeNodeAck::ids() const {
  // @@protoc_insertion_point(field_list:SyncGetPledgeNodeAck.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncGetPledgeNodeAck::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:SyncGetPledgeNodeAck.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// SyncVerifyPledgeNodeReq

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncVerifyPledgeNodeReq::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncVerifyPledgeNodeReq::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncVerifyPledgeNodeReq::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncVerifyPledgeNodeReq::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncVerifyPledgeNodeReq::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncVerifyPledgeNodeReq.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncVerifyPledgeNodeReq::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncVerifyPledgeNodeReq.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncVerifyPledgeNodeReq::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncVerifyPledgeNodeReq::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncVerifyPledgeNodeReq.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncVerifyPledgeNodeReq::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncVerifyPledgeNodeReq.syncHeaderMsg)
}

// repeated string ids = 2;
inline int SyncVerifyPledgeNodeReq::_internal_ids_size() const {
  return ids_.size();
}
inline int SyncVerifyPledgeNodeReq::ids_size() const {
  return _internal_ids_size();
}
inline void SyncVerifyPledgeNodeReq::clear_ids() {
  ids_.Clear();
}
inline std::string* SyncVerifyPledgeNodeReq::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:SyncVerifyPledgeNodeReq.ids)
  return _internal_add_ids();
}
inline const std::string& SyncVerifyPledgeNodeReq::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& SyncVerifyPledgeNodeReq::ids(int index) const {
  // @@protoc_insertion_point(field_get:SyncVerifyPledgeNodeReq.ids)
  return _internal_ids(index);
}
inline std::string* SyncVerifyPledgeNodeReq::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:SyncVerifyPledgeNodeReq.ids)
  return ids_.Mutable(index);
}
inline void SyncVerifyPledgeNodeReq::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SyncVerifyPledgeNodeReq.ids)
  ids_.Mutable(index)->assign(value);
}
inline void SyncVerifyPledgeNodeReq::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SyncVerifyPledgeNodeReq.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void SyncVerifyPledgeNodeReq::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncVerifyPledgeNodeReq.ids)
}
inline void SyncVerifyPledgeNodeReq::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncVerifyPledgeNodeReq.ids)
}
inline std::string* SyncVerifyPledgeNodeReq::_internal_add_ids() {
  return ids_.Add();
}
inline void SyncVerifyPledgeNodeReq::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncVerifyPledgeNodeReq.ids)
}
inline void SyncVerifyPledgeNodeReq::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncVerifyPledgeNodeReq.ids)
}
inline void SyncVerifyPledgeNodeReq::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncVerifyPledgeNodeReq.ids)
}
inline void SyncVerifyPledgeNodeReq::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncVerifyPledgeNodeReq.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncVerifyPledgeNodeReq::ids() const {
  // @@protoc_insertion_point(field_list:SyncVerifyPledgeNodeReq.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncVerifyPledgeNodeReq::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:SyncVerifyPledgeNodeReq.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// SyncVerifyPledgeNodeAck

// repeated string ids = 1;
inline int SyncVerifyPledgeNodeAck::_internal_ids_size() const {
  return ids_.size();
}
inline int SyncVerifyPledgeNodeAck::ids_size() const {
  return _internal_ids_size();
}
inline void SyncVerifyPledgeNodeAck::clear_ids() {
  ids_.Clear();
}
inline std::string* SyncVerifyPledgeNodeAck::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:SyncVerifyPledgeNodeAck.ids)
  return _internal_add_ids();
}
inline const std::string& SyncVerifyPledgeNodeAck::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& SyncVerifyPledgeNodeAck::ids(int index) const {
  // @@protoc_insertion_point(field_get:SyncVerifyPledgeNodeAck.ids)
  return _internal_ids(index);
}
inline std::string* SyncVerifyPledgeNodeAck::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:SyncVerifyPledgeNodeAck.ids)
  return ids_.Mutable(index);
}
inline void SyncVerifyPledgeNodeAck::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SyncVerifyPledgeNodeAck.ids)
  ids_.Mutable(index)->assign(value);
}
inline void SyncVerifyPledgeNodeAck::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SyncVerifyPledgeNodeAck.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void SyncVerifyPledgeNodeAck::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SyncVerifyPledgeNodeAck.ids)
}
inline void SyncVerifyPledgeNodeAck::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SyncVerifyPledgeNodeAck.ids)
}
inline std::string* SyncVerifyPledgeNodeAck::_internal_add_ids() {
  return ids_.Add();
}
inline void SyncVerifyPledgeNodeAck::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SyncVerifyPledgeNodeAck.ids)
}
inline void SyncVerifyPledgeNodeAck::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SyncVerifyPledgeNodeAck.ids)
}
inline void SyncVerifyPledgeNodeAck::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SyncVerifyPledgeNodeAck.ids)
}
inline void SyncVerifyPledgeNodeAck::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SyncVerifyPledgeNodeAck.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncVerifyPledgeNodeAck::ids() const {
  // @@protoc_insertion_point(field_list:SyncVerifyPledgeNodeAck.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncVerifyPledgeNodeAck::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:SyncVerifyPledgeNodeAck.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// SyncGetnodeInfoReq

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncGetnodeInfoReq::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncGetnodeInfoReq::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncGetnodeInfoReq::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncGetnodeInfoReq::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncGetnodeInfoReq::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoReq.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncGetnodeInfoReq::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncGetnodeInfoReq.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncGetnodeInfoReq::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncGetnodeInfoReq::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncGetnodeInfoReq.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncGetnodeInfoReq::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncGetnodeInfoReq.syncHeaderMsg)
}

// uint64 height = 2;
inline void SyncGetnodeInfoReq::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncGetnodeInfoReq::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncGetnodeInfoReq::height() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoReq.height)
  return _internal_height();
}
inline void SyncGetnodeInfoReq::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void SyncGetnodeInfoReq::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SyncGetnodeInfoReq.height)
}

// uint64 syncNum = 3;
inline void SyncGetnodeInfoReq::clear_syncnum() {
  syncnum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncGetnodeInfoReq::_internal_syncnum() const {
  return syncnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncGetnodeInfoReq::syncnum() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoReq.syncNum)
  return _internal_syncnum();
}
inline void SyncGetnodeInfoReq::_internal_set_syncnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  syncnum_ = value;
}
inline void SyncGetnodeInfoReq::set_syncnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_syncnum(value);
  // @@protoc_insertion_point(field_set:SyncGetnodeInfoReq.syncNum)
}

// -------------------------------------------------------------------

// SyncGetnodeInfoAck

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncGetnodeInfoAck::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncGetnodeInfoAck::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncGetnodeInfoAck::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncGetnodeInfoAck::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncGetnodeInfoAck::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoAck.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncGetnodeInfoAck::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncGetnodeInfoAck.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncGetnodeInfoAck::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncGetnodeInfoAck::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncGetnodeInfoAck.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncGetnodeInfoAck::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncGetnodeInfoAck.syncHeaderMsg)
}

// uint64 height = 2;
inline void SyncGetnodeInfoAck::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncGetnodeInfoAck::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncGetnodeInfoAck::height() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoAck.height)
  return _internal_height();
}
inline void SyncGetnodeInfoAck::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void SyncGetnodeInfoAck::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SyncGetnodeInfoAck.height)
}

// bytes hash = 3;
inline void SyncGetnodeInfoAck::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncGetnodeInfoAck::hash() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoAck.hash)
  return _internal_hash();
}
inline void SyncGetnodeInfoAck::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:SyncGetnodeInfoAck.hash)
}
inline std::string* SyncGetnodeInfoAck::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:SyncGetnodeInfoAck.hash)
  return _internal_mutable_hash();
}
inline const std::string& SyncGetnodeInfoAck::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void SyncGetnodeInfoAck::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncGetnodeInfoAck::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncGetnodeInfoAck.hash)
}
inline void SyncGetnodeInfoAck::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncGetnodeInfoAck.hash)
}
inline void SyncGetnodeInfoAck::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncGetnodeInfoAck.hash)
}
inline std::string* SyncGetnodeInfoAck::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncGetnodeInfoAck::release_hash() {
  // @@protoc_insertion_point(field_release:SyncGetnodeInfoAck.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncGetnodeInfoAck::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:SyncGetnodeInfoAck.hash)
}

// bytes checkHashForward = 4;
inline void SyncGetnodeInfoAck::clear_checkhashforward() {
  checkhashforward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncGetnodeInfoAck::checkhashforward() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoAck.checkHashForward)
  return _internal_checkhashforward();
}
inline void SyncGetnodeInfoAck::set_checkhashforward(const std::string& value) {
  _internal_set_checkhashforward(value);
  // @@protoc_insertion_point(field_set:SyncGetnodeInfoAck.checkHashForward)
}
inline std::string* SyncGetnodeInfoAck::mutable_checkhashforward() {
  // @@protoc_insertion_point(field_mutable:SyncGetnodeInfoAck.checkHashForward)
  return _internal_mutable_checkhashforward();
}
inline const std::string& SyncGetnodeInfoAck::_internal_checkhashforward() const {
  return checkhashforward_.GetNoArena();
}
inline void SyncGetnodeInfoAck::_internal_set_checkhashforward(const std::string& value) {
  
  checkhashforward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncGetnodeInfoAck::set_checkhashforward(std::string&& value) {
  
  checkhashforward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncGetnodeInfoAck.checkHashForward)
}
inline void SyncGetnodeInfoAck::set_checkhashforward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkhashforward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncGetnodeInfoAck.checkHashForward)
}
inline void SyncGetnodeInfoAck::set_checkhashforward(const void* value, size_t size) {
  
  checkhashforward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncGetnodeInfoAck.checkHashForward)
}
inline std::string* SyncGetnodeInfoAck::_internal_mutable_checkhashforward() {
  
  return checkhashforward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncGetnodeInfoAck::release_checkhashforward() {
  // @@protoc_insertion_point(field_release:SyncGetnodeInfoAck.checkHashForward)
  
  return checkhashforward_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncGetnodeInfoAck::set_allocated_checkhashforward(std::string* checkhashforward) {
  if (checkhashforward != nullptr) {
    
  } else {
    
  }
  checkhashforward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkhashforward);
  // @@protoc_insertion_point(field_set_allocated:SyncGetnodeInfoAck.checkHashForward)
}

// bytes checkHashBackward = 5;
inline void SyncGetnodeInfoAck::clear_checkhashbackward() {
  checkhashbackward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncGetnodeInfoAck::checkhashbackward() const {
  // @@protoc_insertion_point(field_get:SyncGetnodeInfoAck.checkHashBackward)
  return _internal_checkhashbackward();
}
inline void SyncGetnodeInfoAck::set_checkhashbackward(const std::string& value) {
  _internal_set_checkhashbackward(value);
  // @@protoc_insertion_point(field_set:SyncGetnodeInfoAck.checkHashBackward)
}
inline std::string* SyncGetnodeInfoAck::mutable_checkhashbackward() {
  // @@protoc_insertion_point(field_mutable:SyncGetnodeInfoAck.checkHashBackward)
  return _internal_mutable_checkhashbackward();
}
inline const std::string& SyncGetnodeInfoAck::_internal_checkhashbackward() const {
  return checkhashbackward_.GetNoArena();
}
inline void SyncGetnodeInfoAck::_internal_set_checkhashbackward(const std::string& value) {
  
  checkhashbackward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncGetnodeInfoAck::set_checkhashbackward(std::string&& value) {
  
  checkhashbackward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncGetnodeInfoAck.checkHashBackward)
}
inline void SyncGetnodeInfoAck::set_checkhashbackward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checkhashbackward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncGetnodeInfoAck.checkHashBackward)
}
inline void SyncGetnodeInfoAck::set_checkhashbackward(const void* value, size_t size) {
  
  checkhashbackward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncGetnodeInfoAck.checkHashBackward)
}
inline std::string* SyncGetnodeInfoAck::_internal_mutable_checkhashbackward() {
  
  return checkhashbackward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncGetnodeInfoAck::release_checkhashbackward() {
  // @@protoc_insertion_point(field_release:SyncGetnodeInfoAck.checkHashBackward)
  
  return checkhashbackward_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncGetnodeInfoAck::set_allocated_checkhashbackward(std::string* checkhashbackward) {
  if (checkhashbackward != nullptr) {
    
  } else {
    
  }
  checkhashbackward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkhashbackward);
  // @@protoc_insertion_point(field_set_allocated:SyncGetnodeInfoAck.checkHashBackward)
}

// -------------------------------------------------------------------

// VerifyReliableNodeReq

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool VerifyReliableNodeReq::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool VerifyReliableNodeReq::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void VerifyReliableNodeReq::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& VerifyReliableNodeReq::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& VerifyReliableNodeReq::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:VerifyReliableNodeReq.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* VerifyReliableNodeReq::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:VerifyReliableNodeReq.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* VerifyReliableNodeReq::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* VerifyReliableNodeReq::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:VerifyReliableNodeReq.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void VerifyReliableNodeReq::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:VerifyReliableNodeReq.syncHeaderMsg)
}

// int64 height = 2;
inline void VerifyReliableNodeReq::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VerifyReliableNodeReq::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VerifyReliableNodeReq::height() const {
  // @@protoc_insertion_point(field_get:VerifyReliableNodeReq.height)
  return _internal_height();
}
inline void VerifyReliableNodeReq::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void VerifyReliableNodeReq::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:VerifyReliableNodeReq.height)
}

// -------------------------------------------------------------------

// VerifyReliableNodeAck

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool VerifyReliableNodeAck::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool VerifyReliableNodeAck::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void VerifyReliableNodeAck::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& VerifyReliableNodeAck::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& VerifyReliableNodeAck::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:VerifyReliableNodeAck.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* VerifyReliableNodeAck::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:VerifyReliableNodeAck.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* VerifyReliableNodeAck::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* VerifyReliableNodeAck::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:VerifyReliableNodeAck.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void VerifyReliableNodeAck::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:VerifyReliableNodeAck.syncHeaderMsg)
}

// string id = 2;
inline void VerifyReliableNodeAck::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyReliableNodeAck::id() const {
  // @@protoc_insertion_point(field_get:VerifyReliableNodeAck.id)
  return _internal_id();
}
inline void VerifyReliableNodeAck::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:VerifyReliableNodeAck.id)
}
inline std::string* VerifyReliableNodeAck::mutable_id() {
  // @@protoc_insertion_point(field_mutable:VerifyReliableNodeAck.id)
  return _internal_mutable_id();
}
inline const std::string& VerifyReliableNodeAck::_internal_id() const {
  return id_.GetNoArena();
}
inline void VerifyReliableNodeAck::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyReliableNodeAck::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerifyReliableNodeAck.id)
}
inline void VerifyReliableNodeAck::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerifyReliableNodeAck.id)
}
inline void VerifyReliableNodeAck::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerifyReliableNodeAck.id)
}
inline std::string* VerifyReliableNodeAck::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyReliableNodeAck::release_id() {
  // @@protoc_insertion_point(field_release:VerifyReliableNodeAck.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyReliableNodeAck::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:VerifyReliableNodeAck.id)
}

// uint64 height = 3;
inline void VerifyReliableNodeAck::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerifyReliableNodeAck::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VerifyReliableNodeAck::height() const {
  // @@protoc_insertion_point(field_get:VerifyReliableNodeAck.height)
  return _internal_height();
}
inline void VerifyReliableNodeAck::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void VerifyReliableNodeAck::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:VerifyReliableNodeAck.height)
}

// bytes hash = 4;
inline void VerifyReliableNodeAck::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyReliableNodeAck::hash() const {
  // @@protoc_insertion_point(field_get:VerifyReliableNodeAck.hash)
  return _internal_hash();
}
inline void VerifyReliableNodeAck::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:VerifyReliableNodeAck.hash)
}
inline std::string* VerifyReliableNodeAck::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:VerifyReliableNodeAck.hash)
  return _internal_mutable_hash();
}
inline const std::string& VerifyReliableNodeAck::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void VerifyReliableNodeAck::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyReliableNodeAck::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VerifyReliableNodeAck.hash)
}
inline void VerifyReliableNodeAck::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VerifyReliableNodeAck.hash)
}
inline void VerifyReliableNodeAck::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VerifyReliableNodeAck.hash)
}
inline std::string* VerifyReliableNodeAck::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyReliableNodeAck::release_hash() {
  // @@protoc_insertion_point(field_release:VerifyReliableNodeAck.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyReliableNodeAck::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:VerifyReliableNodeAck.hash)
}

// -------------------------------------------------------------------

// SyncBlockInfoReq

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncBlockInfoReq::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncBlockInfoReq::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncBlockInfoReq::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncBlockInfoReq::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncBlockInfoReq::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoReq.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncBlockInfoReq::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncBlockInfoReq.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncBlockInfoReq::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncBlockInfoReq::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncBlockInfoReq.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncBlockInfoReq::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncBlockInfoReq.syncHeaderMsg)
}

// uint64 height = 2;
inline void SyncBlockInfoReq::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncBlockInfoReq::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncBlockInfoReq::height() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoReq.height)
  return _internal_height();
}
inline void SyncBlockInfoReq::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void SyncBlockInfoReq::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SyncBlockInfoReq.height)
}

// repeated .CheckHash checkhash = 3;
inline int SyncBlockInfoReq::_internal_checkhash_size() const {
  return checkhash_.size();
}
inline int SyncBlockInfoReq::checkhash_size() const {
  return _internal_checkhash_size();
}
inline void SyncBlockInfoReq::clear_checkhash() {
  checkhash_.Clear();
}
inline ::CheckHash* SyncBlockInfoReq::mutable_checkhash(int index) {
  // @@protoc_insertion_point(field_mutable:SyncBlockInfoReq.checkhash)
  return checkhash_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >*
SyncBlockInfoReq::mutable_checkhash() {
  // @@protoc_insertion_point(field_mutable_list:SyncBlockInfoReq.checkhash)
  return &checkhash_;
}
inline const ::CheckHash& SyncBlockInfoReq::_internal_checkhash(int index) const {
  return checkhash_.Get(index);
}
inline const ::CheckHash& SyncBlockInfoReq::checkhash(int index) const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoReq.checkhash)
  return _internal_checkhash(index);
}
inline ::CheckHash* SyncBlockInfoReq::_internal_add_checkhash() {
  return checkhash_.Add();
}
inline ::CheckHash* SyncBlockInfoReq::add_checkhash() {
  // @@protoc_insertion_point(field_add:SyncBlockInfoReq.checkhash)
  return _internal_add_checkhash();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >&
SyncBlockInfoReq::checkhash() const {
  // @@protoc_insertion_point(field_list:SyncBlockInfoReq.checkhash)
  return checkhash_;
}

// uint64 max_num = 4;
inline void SyncBlockInfoReq::clear_max_num() {
  max_num_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncBlockInfoReq::_internal_max_num() const {
  return max_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncBlockInfoReq::max_num() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoReq.max_num)
  return _internal_max_num();
}
inline void SyncBlockInfoReq::_internal_set_max_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_num_ = value;
}
inline void SyncBlockInfoReq::set_max_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_num(value);
  // @@protoc_insertion_point(field_set:SyncBlockInfoReq.max_num)
}

// uint64 max_height = 5;
inline void SyncBlockInfoReq::clear_max_height() {
  max_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncBlockInfoReq::_internal_max_height() const {
  return max_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncBlockInfoReq::max_height() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoReq.max_height)
  return _internal_max_height();
}
inline void SyncBlockInfoReq::_internal_set_max_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_height_ = value;
}
inline void SyncBlockInfoReq::set_max_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_height(value);
  // @@protoc_insertion_point(field_set:SyncBlockInfoReq.max_height)
}

// string id = 6;
inline void SyncBlockInfoReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncBlockInfoReq::id() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoReq.id)
  return _internal_id();
}
inline void SyncBlockInfoReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SyncBlockInfoReq.id)
}
inline std::string* SyncBlockInfoReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SyncBlockInfoReq.id)
  return _internal_mutable_id();
}
inline const std::string& SyncBlockInfoReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void SyncBlockInfoReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncBlockInfoReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncBlockInfoReq.id)
}
inline void SyncBlockInfoReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncBlockInfoReq.id)
}
inline void SyncBlockInfoReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncBlockInfoReq.id)
}
inline std::string* SyncBlockInfoReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncBlockInfoReq::release_id() {
  // @@protoc_insertion_point(field_release:SyncBlockInfoReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncBlockInfoReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SyncBlockInfoReq.id)
}

// -------------------------------------------------------------------

// SyncBlockInfoAck

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncBlockInfoAck::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncBlockInfoAck::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncBlockInfoAck::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncBlockInfoAck::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncBlockInfoAck::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoAck.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncBlockInfoAck::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncBlockInfoAck.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncBlockInfoAck::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncBlockInfoAck::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncBlockInfoAck.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncBlockInfoAck::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncBlockInfoAck.syncHeaderMsg)
}

// repeated .CheckHash invalid_checkhash = 2;
inline int SyncBlockInfoAck::_internal_invalid_checkhash_size() const {
  return invalid_checkhash_.size();
}
inline int SyncBlockInfoAck::invalid_checkhash_size() const {
  return _internal_invalid_checkhash_size();
}
inline void SyncBlockInfoAck::clear_invalid_checkhash() {
  invalid_checkhash_.Clear();
}
inline ::CheckHash* SyncBlockInfoAck::mutable_invalid_checkhash(int index) {
  // @@protoc_insertion_point(field_mutable:SyncBlockInfoAck.invalid_checkhash)
  return invalid_checkhash_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >*
SyncBlockInfoAck::mutable_invalid_checkhash() {
  // @@protoc_insertion_point(field_mutable_list:SyncBlockInfoAck.invalid_checkhash)
  return &invalid_checkhash_;
}
inline const ::CheckHash& SyncBlockInfoAck::_internal_invalid_checkhash(int index) const {
  return invalid_checkhash_.Get(index);
}
inline const ::CheckHash& SyncBlockInfoAck::invalid_checkhash(int index) const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoAck.invalid_checkhash)
  return _internal_invalid_checkhash(index);
}
inline ::CheckHash* SyncBlockInfoAck::_internal_add_invalid_checkhash() {
  return invalid_checkhash_.Add();
}
inline ::CheckHash* SyncBlockInfoAck::add_invalid_checkhash() {
  // @@protoc_insertion_point(field_add:SyncBlockInfoAck.invalid_checkhash)
  return _internal_add_invalid_checkhash();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CheckHash >&
SyncBlockInfoAck::invalid_checkhash() const {
  // @@protoc_insertion_point(field_list:SyncBlockInfoAck.invalid_checkhash)
  return invalid_checkhash_;
}

// bytes blocks = 3;
inline void SyncBlockInfoAck::clear_blocks() {
  blocks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncBlockInfoAck::blocks() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoAck.blocks)
  return _internal_blocks();
}
inline void SyncBlockInfoAck::set_blocks(const std::string& value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:SyncBlockInfoAck.blocks)
}
inline std::string* SyncBlockInfoAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable:SyncBlockInfoAck.blocks)
  return _internal_mutable_blocks();
}
inline const std::string& SyncBlockInfoAck::_internal_blocks() const {
  return blocks_.GetNoArena();
}
inline void SyncBlockInfoAck::_internal_set_blocks(const std::string& value) {
  
  blocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncBlockInfoAck::set_blocks(std::string&& value) {
  
  blocks_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncBlockInfoAck.blocks)
}
inline void SyncBlockInfoAck::set_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncBlockInfoAck.blocks)
}
inline void SyncBlockInfoAck::set_blocks(const void* value, size_t size) {
  
  blocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncBlockInfoAck.blocks)
}
inline std::string* SyncBlockInfoAck::_internal_mutable_blocks() {
  
  return blocks_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncBlockInfoAck::release_blocks() {
  // @@protoc_insertion_point(field_release:SyncBlockInfoAck.blocks)
  
  return blocks_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncBlockInfoAck::set_allocated_blocks(std::string* blocks) {
  if (blocks != nullptr) {
    
  } else {
    
  }
  blocks_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blocks);
  // @@protoc_insertion_point(field_set_allocated:SyncBlockInfoAck.blocks)
}

// bytes poolblocks = 4;
inline void SyncBlockInfoAck::clear_poolblocks() {
  poolblocks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncBlockInfoAck::poolblocks() const {
  // @@protoc_insertion_point(field_get:SyncBlockInfoAck.poolblocks)
  return _internal_poolblocks();
}
inline void SyncBlockInfoAck::set_poolblocks(const std::string& value) {
  _internal_set_poolblocks(value);
  // @@protoc_insertion_point(field_set:SyncBlockInfoAck.poolblocks)
}
inline std::string* SyncBlockInfoAck::mutable_poolblocks() {
  // @@protoc_insertion_point(field_mutable:SyncBlockInfoAck.poolblocks)
  return _internal_mutable_poolblocks();
}
inline const std::string& SyncBlockInfoAck::_internal_poolblocks() const {
  return poolblocks_.GetNoArena();
}
inline void SyncBlockInfoAck::_internal_set_poolblocks(const std::string& value) {
  
  poolblocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncBlockInfoAck::set_poolblocks(std::string&& value) {
  
  poolblocks_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncBlockInfoAck.poolblocks)
}
inline void SyncBlockInfoAck::set_poolblocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poolblocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncBlockInfoAck.poolblocks)
}
inline void SyncBlockInfoAck::set_poolblocks(const void* value, size_t size) {
  
  poolblocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncBlockInfoAck.poolblocks)
}
inline std::string* SyncBlockInfoAck::_internal_mutable_poolblocks() {
  
  return poolblocks_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncBlockInfoAck::release_poolblocks() {
  // @@protoc_insertion_point(field_release:SyncBlockInfoAck.poolblocks)
  
  return poolblocks_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncBlockInfoAck::set_allocated_poolblocks(std::string* poolblocks) {
  if (poolblocks != nullptr) {
    
  } else {
    
  }
  poolblocks_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poolblocks);
  // @@protoc_insertion_point(field_set_allocated:SyncBlockInfoAck.poolblocks)
}

// -------------------------------------------------------------------

// SyncLoseBlockReq

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncLoseBlockReq::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncLoseBlockReq::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncLoseBlockReq::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncLoseBlockReq::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncLoseBlockReq::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncLoseBlockReq.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncLoseBlockReq::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncLoseBlockReq.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncLoseBlockReq::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncLoseBlockReq::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncLoseBlockReq.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncLoseBlockReq::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncLoseBlockReq.syncHeaderMsg)
}

// uint64 begin = 2;
inline void SyncLoseBlockReq::clear_begin() {
  begin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncLoseBlockReq::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncLoseBlockReq::begin() const {
  // @@protoc_insertion_point(field_get:SyncLoseBlockReq.begin)
  return _internal_begin();
}
inline void SyncLoseBlockReq::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  begin_ = value;
}
inline void SyncLoseBlockReq::set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:SyncLoseBlockReq.begin)
}

// uint64 end = 3;
inline void SyncLoseBlockReq::clear_end() {
  end_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncLoseBlockReq::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncLoseBlockReq::end() const {
  // @@protoc_insertion_point(field_get:SyncLoseBlockReq.end)
  return _internal_end();
}
inline void SyncLoseBlockReq::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_ = value;
}
inline void SyncLoseBlockReq::set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:SyncLoseBlockReq.end)
}

// string all_hash = 4;
inline void SyncLoseBlockReq::clear_all_hash() {
  all_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncLoseBlockReq::all_hash() const {
  // @@protoc_insertion_point(field_get:SyncLoseBlockReq.all_hash)
  return _internal_all_hash();
}
inline void SyncLoseBlockReq::set_all_hash(const std::string& value) {
  _internal_set_all_hash(value);
  // @@protoc_insertion_point(field_set:SyncLoseBlockReq.all_hash)
}
inline std::string* SyncLoseBlockReq::mutable_all_hash() {
  // @@protoc_insertion_point(field_mutable:SyncLoseBlockReq.all_hash)
  return _internal_mutable_all_hash();
}
inline const std::string& SyncLoseBlockReq::_internal_all_hash() const {
  return all_hash_.GetNoArena();
}
inline void SyncLoseBlockReq::_internal_set_all_hash(const std::string& value) {
  
  all_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncLoseBlockReq::set_all_hash(std::string&& value) {
  
  all_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncLoseBlockReq.all_hash)
}
inline void SyncLoseBlockReq::set_all_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  all_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncLoseBlockReq.all_hash)
}
inline void SyncLoseBlockReq::set_all_hash(const char* value, size_t size) {
  
  all_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncLoseBlockReq.all_hash)
}
inline std::string* SyncLoseBlockReq::_internal_mutable_all_hash() {
  
  return all_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncLoseBlockReq::release_all_hash() {
  // @@protoc_insertion_point(field_release:SyncLoseBlockReq.all_hash)
  
  return all_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncLoseBlockReq::set_allocated_all_hash(std::string* all_hash) {
  if (all_hash != nullptr) {
    
  } else {
    
  }
  all_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), all_hash);
  // @@protoc_insertion_point(field_set_allocated:SyncLoseBlockReq.all_hash)
}

// -------------------------------------------------------------------

// SyncLoseBlockAck

// .SyncHeaderMsg syncHeaderMsg = 1;
inline bool SyncLoseBlockAck::_internal_has_syncheadermsg() const {
  return this != internal_default_instance() && syncheadermsg_ != nullptr;
}
inline bool SyncLoseBlockAck::has_syncheadermsg() const {
  return _internal_has_syncheadermsg();
}
inline void SyncLoseBlockAck::clear_syncheadermsg() {
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
}
inline const ::SyncHeaderMsg& SyncLoseBlockAck::_internal_syncheadermsg() const {
  const ::SyncHeaderMsg* p = syncheadermsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SyncHeaderMsg*>(
      &::_SyncHeaderMsg_default_instance_);
}
inline const ::SyncHeaderMsg& SyncLoseBlockAck::syncheadermsg() const {
  // @@protoc_insertion_point(field_get:SyncLoseBlockAck.syncHeaderMsg)
  return _internal_syncheadermsg();
}
inline ::SyncHeaderMsg* SyncLoseBlockAck::release_syncheadermsg() {
  // @@protoc_insertion_point(field_release:SyncLoseBlockAck.syncHeaderMsg)
  
  ::SyncHeaderMsg* temp = syncheadermsg_;
  syncheadermsg_ = nullptr;
  return temp;
}
inline ::SyncHeaderMsg* SyncLoseBlockAck::_internal_mutable_syncheadermsg() {
  
  if (syncheadermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::SyncHeaderMsg>(GetArenaNoVirtual());
    syncheadermsg_ = p;
  }
  return syncheadermsg_;
}
inline ::SyncHeaderMsg* SyncLoseBlockAck::mutable_syncheadermsg() {
  // @@protoc_insertion_point(field_mutable:SyncLoseBlockAck.syncHeaderMsg)
  return _internal_mutable_syncheadermsg();
}
inline void SyncLoseBlockAck::set_allocated_syncheadermsg(::SyncHeaderMsg* syncheadermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete syncheadermsg_;
  }
  if (syncheadermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      syncheadermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, syncheadermsg, submessage_arena);
    }
    
  } else {
    
  }
  syncheadermsg_ = syncheadermsg;
  // @@protoc_insertion_point(field_set_allocated:SyncLoseBlockAck.syncHeaderMsg)
}

// bytes blocks = 2;
inline void SyncLoseBlockAck::clear_blocks() {
  blocks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SyncLoseBlockAck::blocks() const {
  // @@protoc_insertion_point(field_get:SyncLoseBlockAck.blocks)
  return _internal_blocks();
}
inline void SyncLoseBlockAck::set_blocks(const std::string& value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:SyncLoseBlockAck.blocks)
}
inline std::string* SyncLoseBlockAck::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable:SyncLoseBlockAck.blocks)
  return _internal_mutable_blocks();
}
inline const std::string& SyncLoseBlockAck::_internal_blocks() const {
  return blocks_.GetNoArena();
}
inline void SyncLoseBlockAck::_internal_set_blocks(const std::string& value) {
  
  blocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncLoseBlockAck::set_blocks(std::string&& value) {
  
  blocks_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncLoseBlockAck.blocks)
}
inline void SyncLoseBlockAck::set_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncLoseBlockAck.blocks)
}
inline void SyncLoseBlockAck::set_blocks(const void* value, size_t size) {
  
  blocks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncLoseBlockAck.blocks)
}
inline std::string* SyncLoseBlockAck::_internal_mutable_blocks() {
  
  return blocks_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncLoseBlockAck::release_blocks() {
  // @@protoc_insertion_point(field_release:SyncLoseBlockAck.blocks)
  
  return blocks_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncLoseBlockAck::set_allocated_blocks(std::string* blocks) {
  if (blocks != nullptr) {
    
  } else {
    
  }
  blocks_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blocks);
  // @@protoc_insertion_point(field_set_allocated:SyncLoseBlockAck.blocks)
}

// -------------------------------------------------------------------

// SignNodeMsg

// string id = 1;
inline void SignNodeMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignNodeMsg::id() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.id)
  return _internal_id();
}
inline void SignNodeMsg::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SignNodeMsg.id)
}
inline std::string* SignNodeMsg::mutable_id() {
  // @@protoc_insertion_point(field_mutable:SignNodeMsg.id)
  return _internal_mutable_id();
}
inline const std::string& SignNodeMsg::_internal_id() const {
  return id_.GetNoArena();
}
inline void SignNodeMsg::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignNodeMsg::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignNodeMsg.id)
}
inline void SignNodeMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignNodeMsg.id)
}
inline void SignNodeMsg::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignNodeMsg.id)
}
inline std::string* SignNodeMsg::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignNodeMsg::release_id() {
  // @@protoc_insertion_point(field_release:SignNodeMsg.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignNodeMsg::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SignNodeMsg.id)
}

// bytes signMsg = 2;
inline void SignNodeMsg::clear_signmsg() {
  signmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignNodeMsg::signmsg() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.signMsg)
  return _internal_signmsg();
}
inline void SignNodeMsg::set_signmsg(const std::string& value) {
  _internal_set_signmsg(value);
  // @@protoc_insertion_point(field_set:SignNodeMsg.signMsg)
}
inline std::string* SignNodeMsg::mutable_signmsg() {
  // @@protoc_insertion_point(field_mutable:SignNodeMsg.signMsg)
  return _internal_mutable_signmsg();
}
inline const std::string& SignNodeMsg::_internal_signmsg() const {
  return signmsg_.GetNoArena();
}
inline void SignNodeMsg::_internal_set_signmsg(const std::string& value) {
  
  signmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignNodeMsg::set_signmsg(std::string&& value) {
  
  signmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignNodeMsg.signMsg)
}
inline void SignNodeMsg::set_signmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignNodeMsg.signMsg)
}
inline void SignNodeMsg::set_signmsg(const void* value, size_t size) {
  
  signmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignNodeMsg.signMsg)
}
inline std::string* SignNodeMsg::_internal_mutable_signmsg() {
  
  return signmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignNodeMsg::release_signmsg() {
  // @@protoc_insertion_point(field_release:SignNodeMsg.signMsg)
  
  return signmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignNodeMsg::set_allocated_signmsg(std::string* signmsg) {
  if (signmsg != nullptr) {
    
  } else {
    
  }
  signmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signmsg);
  // @@protoc_insertion_point(field_set_allocated:SignNodeMsg.signMsg)
}

// bytes signPubKey = 3;
inline void SignNodeMsg::clear_signpubkey() {
  signpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignNodeMsg::signpubkey() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.signPubKey)
  return _internal_signpubkey();
}
inline void SignNodeMsg::set_signpubkey(const std::string& value) {
  _internal_set_signpubkey(value);
  // @@protoc_insertion_point(field_set:SignNodeMsg.signPubKey)
}
inline std::string* SignNodeMsg::mutable_signpubkey() {
  // @@protoc_insertion_point(field_mutable:SignNodeMsg.signPubKey)
  return _internal_mutable_signpubkey();
}
inline const std::string& SignNodeMsg::_internal_signpubkey() const {
  return signpubkey_.GetNoArena();
}
inline void SignNodeMsg::_internal_set_signpubkey(const std::string& value) {
  
  signpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignNodeMsg::set_signpubkey(std::string&& value) {
  
  signpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignNodeMsg.signPubKey)
}
inline void SignNodeMsg::set_signpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignNodeMsg.signPubKey)
}
inline void SignNodeMsg::set_signpubkey(const void* value, size_t size) {
  
  signpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignNodeMsg.signPubKey)
}
inline std::string* SignNodeMsg::_internal_mutable_signpubkey() {
  
  return signpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignNodeMsg::release_signpubkey() {
  // @@protoc_insertion_point(field_release:SignNodeMsg.signPubKey)
  
  return signpubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignNodeMsg::set_allocated_signpubkey(std::string* signpubkey) {
  if (signpubkey != nullptr) {
    
  } else {
    
  }
  signpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signpubkey);
  // @@protoc_insertion_point(field_set_allocated:SignNodeMsg.signPubKey)
}

// string gasFee = 4;
inline void SignNodeMsg::clear_gasfee() {
  gasfee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignNodeMsg::gasfee() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.gasFee)
  return _internal_gasfee();
}
inline void SignNodeMsg::set_gasfee(const std::string& value) {
  _internal_set_gasfee(value);
  // @@protoc_insertion_point(field_set:SignNodeMsg.gasFee)
}
inline std::string* SignNodeMsg::mutable_gasfee() {
  // @@protoc_insertion_point(field_mutable:SignNodeMsg.gasFee)
  return _internal_mutable_gasfee();
}
inline const std::string& SignNodeMsg::_internal_gasfee() const {
  return gasfee_.GetNoArena();
}
inline void SignNodeMsg::_internal_set_gasfee(const std::string& value) {
  
  gasfee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignNodeMsg::set_gasfee(std::string&& value) {
  
  gasfee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignNodeMsg.gasFee)
}
inline void SignNodeMsg::set_gasfee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasfee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignNodeMsg.gasFee)
}
inline void SignNodeMsg::set_gasfee(const char* value, size_t size) {
  
  gasfee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignNodeMsg.gasFee)
}
inline std::string* SignNodeMsg::_internal_mutable_gasfee() {
  
  return gasfee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignNodeMsg::release_gasfee() {
  // @@protoc_insertion_point(field_release:SignNodeMsg.gasFee)
  
  return gasfee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignNodeMsg::set_allocated_gasfee(std::string* gasfee) {
  if (gasfee != nullptr) {
    
  } else {
    
  }
  gasfee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasfee);
  // @@protoc_insertion_point(field_set_allocated:SignNodeMsg.gasFee)
}

// double onlineTime = 5;
inline void SignNodeMsg::clear_onlinetime() {
  onlinetime_ = 0;
}
inline double SignNodeMsg::_internal_onlinetime() const {
  return onlinetime_;
}
inline double SignNodeMsg::onlinetime() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.onlineTime)
  return _internal_onlinetime();
}
inline void SignNodeMsg::_internal_set_onlinetime(double value) {
  
  onlinetime_ = value;
}
inline void SignNodeMsg::set_onlinetime(double value) {
  _internal_set_onlinetime(value);
  // @@protoc_insertion_point(field_set:SignNodeMsg.onlineTime)
}

// uint64 awardTotal = 6;
inline void SignNodeMsg::clear_awardtotal() {
  awardtotal_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignNodeMsg::_internal_awardtotal() const {
  return awardtotal_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignNodeMsg::awardtotal() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.awardTotal)
  return _internal_awardtotal();
}
inline void SignNodeMsg::_internal_set_awardtotal(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  awardtotal_ = value;
}
inline void SignNodeMsg::set_awardtotal(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_awardtotal(value);
  // @@protoc_insertion_point(field_set:SignNodeMsg.awardTotal)
}

// uint64 signSum = 7;
inline void SignNodeMsg::clear_signsum() {
  signsum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignNodeMsg::_internal_signsum() const {
  return signsum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignNodeMsg::signsum() const {
  // @@protoc_insertion_point(field_get:SignNodeMsg.signSum)
  return _internal_signsum();
}
inline void SignNodeMsg::_internal_set_signsum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  signsum_ = value;
}
inline void SignNodeMsg::set_signsum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signsum(value);
  // @@protoc_insertion_point(field_set:SignNodeMsg.signSum)
}

// -------------------------------------------------------------------

// TxMsg

// string version = 1;
inline void TxMsg::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsg::version() const {
  // @@protoc_insertion_point(field_get:TxMsg.version)
  return _internal_version();
}
inline void TxMsg::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TxMsg.version)
}
inline std::string* TxMsg::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TxMsg.version)
  return _internal_mutable_version();
}
inline const std::string& TxMsg::_internal_version() const {
  return version_.GetNoArena();
}
inline void TxMsg::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsg::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsg.version)
}
inline void TxMsg::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsg.version)
}
inline void TxMsg::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsg.version)
}
inline std::string* TxMsg::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsg::release_version() {
  // @@protoc_insertion_point(field_release:TxMsg.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TxMsg.version)
}

// bytes id = 2;
inline void TxMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsg::id() const {
  // @@protoc_insertion_point(field_get:TxMsg.id)
  return _internal_id();
}
inline void TxMsg::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TxMsg.id)
}
inline std::string* TxMsg::mutable_id() {
  // @@protoc_insertion_point(field_mutable:TxMsg.id)
  return _internal_mutable_id();
}
inline const std::string& TxMsg::_internal_id() const {
  return id_.GetNoArena();
}
inline void TxMsg::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsg::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsg.id)
}
inline void TxMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsg.id)
}
inline void TxMsg::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsg.id)
}
inline std::string* TxMsg::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsg::release_id() {
  // @@protoc_insertion_point(field_release:TxMsg.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsg::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:TxMsg.id)
}

// bytes tx = 3;
inline void TxMsg::clear_tx() {
  tx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsg::tx() const {
  // @@protoc_insertion_point(field_get:TxMsg.tx)
  return _internal_tx();
}
inline void TxMsg::set_tx(const std::string& value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:TxMsg.tx)
}
inline std::string* TxMsg::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:TxMsg.tx)
  return _internal_mutable_tx();
}
inline const std::string& TxMsg::_internal_tx() const {
  return tx_.GetNoArena();
}
inline void TxMsg::_internal_set_tx(const std::string& value) {
  
  tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsg::set_tx(std::string&& value) {
  
  tx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsg.tx)
}
inline void TxMsg::set_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsg.tx)
}
inline void TxMsg::set_tx(const void* value, size_t size) {
  
  tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsg.tx)
}
inline std::string* TxMsg::_internal_mutable_tx() {
  
  return tx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsg::release_tx() {
  // @@protoc_insertion_point(field_release:TxMsg.tx)
  
  return tx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsg::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:TxMsg.tx)
}

// string txEncodeHash = 4;
inline void TxMsg::clear_txencodehash() {
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsg::txencodehash() const {
  // @@protoc_insertion_point(field_get:TxMsg.txEncodeHash)
  return _internal_txencodehash();
}
inline void TxMsg::set_txencodehash(const std::string& value) {
  _internal_set_txencodehash(value);
  // @@protoc_insertion_point(field_set:TxMsg.txEncodeHash)
}
inline std::string* TxMsg::mutable_txencodehash() {
  // @@protoc_insertion_point(field_mutable:TxMsg.txEncodeHash)
  return _internal_mutable_txencodehash();
}
inline const std::string& TxMsg::_internal_txencodehash() const {
  return txencodehash_.GetNoArena();
}
inline void TxMsg::_internal_set_txencodehash(const std::string& value) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsg::set_txencodehash(std::string&& value) {
  
  txencodehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsg.txEncodeHash)
}
inline void TxMsg::set_txencodehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsg.txEncodeHash)
}
inline void TxMsg::set_txencodehash(const char* value, size_t size) {
  
  txencodehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsg.txEncodeHash)
}
inline std::string* TxMsg::_internal_mutable_txencodehash() {
  
  return txencodehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsg::release_txencodehash() {
  // @@protoc_insertion_point(field_release:TxMsg.txEncodeHash)
  
  return txencodehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsg::set_allocated_txencodehash(std::string* txencodehash) {
  if (txencodehash != nullptr) {
    
  } else {
    
  }
  txencodehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txencodehash);
  // @@protoc_insertion_point(field_set_allocated:TxMsg.txEncodeHash)
}

// repeated .SignNodeMsg signNodeMsg = 5;
inline int TxMsg::_internal_signnodemsg_size() const {
  return signnodemsg_.size();
}
inline int TxMsg::signnodemsg_size() const {
  return _internal_signnodemsg_size();
}
inline void TxMsg::clear_signnodemsg() {
  signnodemsg_.Clear();
}
inline ::SignNodeMsg* TxMsg::mutable_signnodemsg(int index) {
  // @@protoc_insertion_point(field_mutable:TxMsg.signNodeMsg)
  return signnodemsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >*
TxMsg::mutable_signnodemsg() {
  // @@protoc_insertion_point(field_mutable_list:TxMsg.signNodeMsg)
  return &signnodemsg_;
}
inline const ::SignNodeMsg& TxMsg::_internal_signnodemsg(int index) const {
  return signnodemsg_.Get(index);
}
inline const ::SignNodeMsg& TxMsg::signnodemsg(int index) const {
  // @@protoc_insertion_point(field_get:TxMsg.signNodeMsg)
  return _internal_signnodemsg(index);
}
inline ::SignNodeMsg* TxMsg::_internal_add_signnodemsg() {
  return signnodemsg_.Add();
}
inline ::SignNodeMsg* TxMsg::add_signnodemsg() {
  // @@protoc_insertion_point(field_add:TxMsg.signNodeMsg)
  return _internal_add_signnodemsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SignNodeMsg >&
TxMsg::signnodemsg() const {
  // @@protoc_insertion_point(field_list:TxMsg.signNodeMsg)
  return signnodemsg_;
}

// uint64 top = 6;
inline void TxMsg::clear_top() {
  top_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxMsg::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxMsg::top() const {
  // @@protoc_insertion_point(field_get:TxMsg.top)
  return _internal_top();
}
inline void TxMsg::_internal_set_top(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  top_ = value;
}
inline void TxMsg::set_top(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:TxMsg.top)
}

// string prevBlkHash = 7;
inline void TxMsg::clear_prevblkhash() {
  prevblkhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxMsg::prevblkhash() const {
  // @@protoc_insertion_point(field_get:TxMsg.prevBlkHash)
  return _internal_prevblkhash();
}
inline void TxMsg::set_prevblkhash(const std::string& value) {
  _internal_set_prevblkhash(value);
  // @@protoc_insertion_point(field_set:TxMsg.prevBlkHash)
}
inline std::string* TxMsg::mutable_prevblkhash() {
  // @@protoc_insertion_point(field_mutable:TxMsg.prevBlkHash)
  return _internal_mutable_prevblkhash();
}
inline const std::string& TxMsg::_internal_prevblkhash() const {
  return prevblkhash_.GetNoArena();
}
inline void TxMsg::_internal_set_prevblkhash(const std::string& value) {
  
  prevblkhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxMsg::set_prevblkhash(std::string&& value) {
  
  prevblkhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxMsg.prevBlkHash)
}
inline void TxMsg::set_prevblkhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prevblkhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxMsg.prevBlkHash)
}
inline void TxMsg::set_prevblkhash(const char* value, size_t size) {
  
  prevblkhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxMsg.prevBlkHash)
}
inline std::string* TxMsg::_internal_mutable_prevblkhash() {
  
  return prevblkhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxMsg::release_prevblkhash() {
  // @@protoc_insertion_point(field_release:TxMsg.prevBlkHash)
  
  return prevblkhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxMsg::set_allocated_prevblkhash(std::string* prevblkhash) {
  if (prevblkhash != nullptr) {
    
  } else {
    
  }
  prevblkhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevblkhash);
  // @@protoc_insertion_point(field_set_allocated:TxMsg.prevBlkHash)
}

// int32 tryCountDown = 8;
inline void TxMsg::clear_trycountdown() {
  trycountdown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMsg::_internal_trycountdown() const {
  return trycountdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TxMsg::trycountdown() const {
  // @@protoc_insertion_point(field_get:TxMsg.tryCountDown)
  return _internal_trycountdown();
}
inline void TxMsg::_internal_set_trycountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trycountdown_ = value;
}
inline void TxMsg::set_trycountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trycountdown(value);
  // @@protoc_insertion_point(field_set:TxMsg.tryCountDown)
}

// -------------------------------------------------------------------

// BuileBlockBroadcastMsg

// string version = 1;
inline void BuileBlockBroadcastMsg::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuileBlockBroadcastMsg::version() const {
  // @@protoc_insertion_point(field_get:BuileBlockBroadcastMsg.version)
  return _internal_version();
}
inline void BuileBlockBroadcastMsg::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:BuileBlockBroadcastMsg.version)
}
inline std::string* BuileBlockBroadcastMsg::mutable_version() {
  // @@protoc_insertion_point(field_mutable:BuileBlockBroadcastMsg.version)
  return _internal_mutable_version();
}
inline const std::string& BuileBlockBroadcastMsg::_internal_version() const {
  return version_.GetNoArena();
}
inline void BuileBlockBroadcastMsg::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BuileBlockBroadcastMsg::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BuileBlockBroadcastMsg.version)
}
inline void BuileBlockBroadcastMsg::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BuileBlockBroadcastMsg.version)
}
inline void BuileBlockBroadcastMsg::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BuileBlockBroadcastMsg.version)
}
inline std::string* BuileBlockBroadcastMsg::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuileBlockBroadcastMsg::release_version() {
  // @@protoc_insertion_point(field_release:BuileBlockBroadcastMsg.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuileBlockBroadcastMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:BuileBlockBroadcastMsg.version)
}

// bytes blockRaw = 2;
inline void BuileBlockBroadcastMsg::clear_blockraw() {
  blockraw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuileBlockBroadcastMsg::blockraw() const {
  // @@protoc_insertion_point(field_get:BuileBlockBroadcastMsg.blockRaw)
  return _internal_blockraw();
}
inline void BuileBlockBroadcastMsg::set_blockraw(const std::string& value) {
  _internal_set_blockraw(value);
  // @@protoc_insertion_point(field_set:BuileBlockBroadcastMsg.blockRaw)
}
inline std::string* BuileBlockBroadcastMsg::mutable_blockraw() {
  // @@protoc_insertion_point(field_mutable:BuileBlockBroadcastMsg.blockRaw)
  return _internal_mutable_blockraw();
}
inline const std::string& BuileBlockBroadcastMsg::_internal_blockraw() const {
  return blockraw_.GetNoArena();
}
inline void BuileBlockBroadcastMsg::_internal_set_blockraw(const std::string& value) {
  
  blockraw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BuileBlockBroadcastMsg::set_blockraw(std::string&& value) {
  
  blockraw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BuileBlockBroadcastMsg.blockRaw)
}
inline void BuileBlockBroadcastMsg::set_blockraw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockraw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BuileBlockBroadcastMsg.blockRaw)
}
inline void BuileBlockBroadcastMsg::set_blockraw(const void* value, size_t size) {
  
  blockraw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BuileBlockBroadcastMsg.blockRaw)
}
inline std::string* BuileBlockBroadcastMsg::_internal_mutable_blockraw() {
  
  return blockraw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuileBlockBroadcastMsg::release_blockraw() {
  // @@protoc_insertion_point(field_release:BuileBlockBroadcastMsg.blockRaw)
  
  return blockraw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuileBlockBroadcastMsg::set_allocated_blockraw(std::string* blockraw) {
  if (blockraw != nullptr) {
    
  } else {
    
  }
  blockraw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockraw);
  // @@protoc_insertion_point(field_set_allocated:BuileBlockBroadcastMsg.blockRaw)
}

// -------------------------------------------------------------------

// TxPendingBroadcastMsg

// string version = 1;
inline void TxPendingBroadcastMsg::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxPendingBroadcastMsg::version() const {
  // @@protoc_insertion_point(field_get:TxPendingBroadcastMsg.version)
  return _internal_version();
}
inline void TxPendingBroadcastMsg::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TxPendingBroadcastMsg.version)
}
inline std::string* TxPendingBroadcastMsg::mutable_version() {
  // @@protoc_insertion_point(field_mutable:TxPendingBroadcastMsg.version)
  return _internal_mutable_version();
}
inline const std::string& TxPendingBroadcastMsg::_internal_version() const {
  return version_.GetNoArena();
}
inline void TxPendingBroadcastMsg::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxPendingBroadcastMsg::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxPendingBroadcastMsg.version)
}
inline void TxPendingBroadcastMsg::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxPendingBroadcastMsg.version)
}
inline void TxPendingBroadcastMsg::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxPendingBroadcastMsg.version)
}
inline std::string* TxPendingBroadcastMsg::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxPendingBroadcastMsg::release_version() {
  // @@protoc_insertion_point(field_release:TxPendingBroadcastMsg.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxPendingBroadcastMsg::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:TxPendingBroadcastMsg.version)
}

// bytes txRaw = 2;
inline void TxPendingBroadcastMsg::clear_txraw() {
  txraw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TxPendingBroadcastMsg::txraw() const {
  // @@protoc_insertion_point(field_get:TxPendingBroadcastMsg.txRaw)
  return _internal_txraw();
}
inline void TxPendingBroadcastMsg::set_txraw(const std::string& value) {
  _internal_set_txraw(value);
  // @@protoc_insertion_point(field_set:TxPendingBroadcastMsg.txRaw)
}
inline std::string* TxPendingBroadcastMsg::mutable_txraw() {
  // @@protoc_insertion_point(field_mutable:TxPendingBroadcastMsg.txRaw)
  return _internal_mutable_txraw();
}
inline const std::string& TxPendingBroadcastMsg::_internal_txraw() const {
  return txraw_.GetNoArena();
}
inline void TxPendingBroadcastMsg::_internal_set_txraw(const std::string& value) {
  
  txraw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TxPendingBroadcastMsg::set_txraw(std::string&& value) {
  
  txraw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TxPendingBroadcastMsg.txRaw)
}
inline void TxPendingBroadcastMsg::set_txraw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txraw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxPendingBroadcastMsg.txRaw)
}
inline void TxPendingBroadcastMsg::set_txraw(const void* value, size_t size) {
  
  txraw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxPendingBroadcastMsg.txRaw)
}
inline std::string* TxPendingBroadcastMsg::_internal_mutable_txraw() {
  
  return txraw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TxPendingBroadcastMsg::release_txraw() {
  // @@protoc_insertion_point(field_release:TxPendingBroadcastMsg.txRaw)
  
  return txraw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TxPendingBroadcastMsg::set_allocated_txraw(std::string* txraw) {
  if (txraw != nullptr) {
    
  } else {
    
  }
  txraw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txraw);
  // @@protoc_insertion_point(field_set_allocated:TxPendingBroadcastMsg.txRaw)
}

// -------------------------------------------------------------------

// GetDevInfoReq

// string version = 1;
inline void GetDevInfoReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoReq::version() const {
  // @@protoc_insertion_point(field_get:GetDevInfoReq.version)
  return _internal_version();
}
inline void GetDevInfoReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevInfoReq.version)
}
inline std::string* GetDevInfoReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoReq.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevInfoReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevInfoReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoReq.version)
}
inline void GetDevInfoReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoReq.version)
}
inline void GetDevInfoReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoReq.version)
}
inline std::string* GetDevInfoReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoReq::release_version() {
  // @@protoc_insertion_point(field_release:GetDevInfoReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoReq.version)
}

// string id = 2;
inline void GetDevInfoReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoReq::id() const {
  // @@protoc_insertion_point(field_get:GetDevInfoReq.id)
  return _internal_id();
}
inline void GetDevInfoReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GetDevInfoReq.id)
}
inline std::string* GetDevInfoReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoReq.id)
  return _internal_mutable_id();
}
inline const std::string& GetDevInfoReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void GetDevInfoReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoReq.id)
}
inline void GetDevInfoReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoReq.id)
}
inline void GetDevInfoReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoReq.id)
}
inline std::string* GetDevInfoReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoReq::release_id() {
  // @@protoc_insertion_point(field_release:GetDevInfoReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoReq.id)
}

// -------------------------------------------------------------------

// GetDevInfoAck

// string version = 1;
inline void GetDevInfoAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoAck::version() const {
  // @@protoc_insertion_point(field_get:GetDevInfoAck.version)
  return _internal_version();
}
inline void GetDevInfoAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:GetDevInfoAck.version)
}
inline std::string* GetDevInfoAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoAck.version)
  return _internal_mutable_version();
}
inline const std::string& GetDevInfoAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetDevInfoAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoAck.version)
}
inline void GetDevInfoAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoAck.version)
}
inline void GetDevInfoAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoAck.version)
}
inline std::string* GetDevInfoAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoAck::release_version() {
  // @@protoc_insertion_point(field_release:GetDevInfoAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoAck.version)
}

// string id = 2;
inline void GetDevInfoAck::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoAck::id() const {
  // @@protoc_insertion_point(field_get:GetDevInfoAck.id)
  return _internal_id();
}
inline void GetDevInfoAck::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GetDevInfoAck.id)
}
inline std::string* GetDevInfoAck::mutable_id() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoAck.id)
  return _internal_mutable_id();
}
inline const std::string& GetDevInfoAck::_internal_id() const {
  return id_.GetNoArena();
}
inline void GetDevInfoAck::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoAck::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoAck.id)
}
inline void GetDevInfoAck::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoAck.id)
}
inline void GetDevInfoAck::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoAck.id)
}
inline std::string* GetDevInfoAck::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoAck::release_id() {
  // @@protoc_insertion_point(field_release:GetDevInfoAck.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoAck::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoAck.id)
}

// uint64 height = 3;
inline void GetDevInfoAck::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetDevInfoAck::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetDevInfoAck::height() const {
  // @@protoc_insertion_point(field_get:GetDevInfoAck.height)
  return _internal_height();
}
inline void GetDevInfoAck::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void GetDevInfoAck::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GetDevInfoAck.height)
}

// string hash = 4;
inline void GetDevInfoAck::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoAck::hash() const {
  // @@protoc_insertion_point(field_get:GetDevInfoAck.hash)
  return _internal_hash();
}
inline void GetDevInfoAck::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:GetDevInfoAck.hash)
}
inline std::string* GetDevInfoAck::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoAck.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetDevInfoAck::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void GetDevInfoAck::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoAck::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoAck.hash)
}
inline void GetDevInfoAck::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoAck.hash)
}
inline void GetDevInfoAck::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoAck.hash)
}
inline std::string* GetDevInfoAck::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoAck::release_hash() {
  // @@protoc_insertion_point(field_release:GetDevInfoAck.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoAck::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoAck.hash)
}

// string base58addr = 5;
inline void GetDevInfoAck::clear_base58addr() {
  base58addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDevInfoAck::base58addr() const {
  // @@protoc_insertion_point(field_get:GetDevInfoAck.base58addr)
  return _internal_base58addr();
}
inline void GetDevInfoAck::set_base58addr(const std::string& value) {
  _internal_set_base58addr(value);
  // @@protoc_insertion_point(field_set:GetDevInfoAck.base58addr)
}
inline std::string* GetDevInfoAck::mutable_base58addr() {
  // @@protoc_insertion_point(field_mutable:GetDevInfoAck.base58addr)
  return _internal_mutable_base58addr();
}
inline const std::string& GetDevInfoAck::_internal_base58addr() const {
  return base58addr_.GetNoArena();
}
inline void GetDevInfoAck::_internal_set_base58addr(const std::string& value) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetDevInfoAck::set_base58addr(std::string&& value) {
  
  base58addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetDevInfoAck.base58addr)
}
inline void GetDevInfoAck::set_base58addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetDevInfoAck.base58addr)
}
inline void GetDevInfoAck::set_base58addr(const char* value, size_t size) {
  
  base58addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetDevInfoAck.base58addr)
}
inline std::string* GetDevInfoAck::_internal_mutable_base58addr() {
  
  return base58addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDevInfoAck::release_base58addr() {
  // @@protoc_insertion_point(field_release:GetDevInfoAck.base58addr)
  
  return base58addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDevInfoAck::set_allocated_base58addr(std::string* base58addr) {
  if (base58addr != nullptr) {
    
  } else {
    
  }
  base58addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base58addr);
  // @@protoc_insertion_point(field_set_allocated:GetDevInfoAck.base58addr)
}

// -------------------------------------------------------------------

// ConfirmTransactionReq

// string version = 1;
inline void ConfirmTransactionReq::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmTransactionReq::version() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionReq.version)
  return _internal_version();
}
inline void ConfirmTransactionReq::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionReq.version)
}
inline std::string* ConfirmTransactionReq::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ConfirmTransactionReq.version)
  return _internal_mutable_version();
}
inline const std::string& ConfirmTransactionReq::_internal_version() const {
  return version_.GetNoArena();
}
inline void ConfirmTransactionReq::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmTransactionReq::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfirmTransactionReq.version)
}
inline void ConfirmTransactionReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfirmTransactionReq.version)
}
inline void ConfirmTransactionReq::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfirmTransactionReq.version)
}
inline std::string* ConfirmTransactionReq::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmTransactionReq::release_version() {
  // @@protoc_insertion_point(field_release:ConfirmTransactionReq.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmTransactionReq::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ConfirmTransactionReq.version)
}

// string id = 2;
inline void ConfirmTransactionReq::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmTransactionReq::id() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionReq.id)
  return _internal_id();
}
inline void ConfirmTransactionReq::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionReq.id)
}
inline std::string* ConfirmTransactionReq::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ConfirmTransactionReq.id)
  return _internal_mutable_id();
}
inline const std::string& ConfirmTransactionReq::_internal_id() const {
  return id_.GetNoArena();
}
inline void ConfirmTransactionReq::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmTransactionReq::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfirmTransactionReq.id)
}
inline void ConfirmTransactionReq::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfirmTransactionReq.id)
}
inline void ConfirmTransactionReq::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfirmTransactionReq.id)
}
inline std::string* ConfirmTransactionReq::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmTransactionReq::release_id() {
  // @@protoc_insertion_point(field_release:ConfirmTransactionReq.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmTransactionReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ConfirmTransactionReq.id)
}

// string tx_hash = 3;
inline void ConfirmTransactionReq::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmTransactionReq::tx_hash() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionReq.tx_hash)
  return _internal_tx_hash();
}
inline void ConfirmTransactionReq::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionReq.tx_hash)
}
inline std::string* ConfirmTransactionReq::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:ConfirmTransactionReq.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& ConfirmTransactionReq::_internal_tx_hash() const {
  return tx_hash_.GetNoArena();
}
inline void ConfirmTransactionReq::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmTransactionReq::set_tx_hash(std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfirmTransactionReq.tx_hash)
}
inline void ConfirmTransactionReq::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfirmTransactionReq.tx_hash)
}
inline void ConfirmTransactionReq::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfirmTransactionReq.tx_hash)
}
inline std::string* ConfirmTransactionReq::_internal_mutable_tx_hash() {
  
  return tx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmTransactionReq::release_tx_hash() {
  // @@protoc_insertion_point(field_release:ConfirmTransactionReq.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmTransactionReq::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:ConfirmTransactionReq.tx_hash)
}

// .ConfirmCacheFlag flag = 4;
inline void ConfirmTransactionReq::clear_flag() {
  flag_ = 0;
}
inline ::ConfirmCacheFlag ConfirmTransactionReq::_internal_flag() const {
  return static_cast< ::ConfirmCacheFlag >(flag_);
}
inline ::ConfirmCacheFlag ConfirmTransactionReq::flag() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionReq.flag)
  return _internal_flag();
}
inline void ConfirmTransactionReq::_internal_set_flag(::ConfirmCacheFlag value) {
  
  flag_ = value;
}
inline void ConfirmTransactionReq::set_flag(::ConfirmCacheFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionReq.flag)
}

// -------------------------------------------------------------------

// ConfirmTransactionAck

// string version = 1;
inline void ConfirmTransactionAck::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmTransactionAck::version() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionAck.version)
  return _internal_version();
}
inline void ConfirmTransactionAck::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionAck.version)
}
inline std::string* ConfirmTransactionAck::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ConfirmTransactionAck.version)
  return _internal_mutable_version();
}
inline const std::string& ConfirmTransactionAck::_internal_version() const {
  return version_.GetNoArena();
}
inline void ConfirmTransactionAck::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmTransactionAck::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfirmTransactionAck.version)
}
inline void ConfirmTransactionAck::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfirmTransactionAck.version)
}
inline void ConfirmTransactionAck::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfirmTransactionAck.version)
}
inline std::string* ConfirmTransactionAck::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmTransactionAck::release_version() {
  // @@protoc_insertion_point(field_release:ConfirmTransactionAck.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmTransactionAck::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ConfirmTransactionAck.version)
}

// string id = 2;
inline void ConfirmTransactionAck::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmTransactionAck::id() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionAck.id)
  return _internal_id();
}
inline void ConfirmTransactionAck::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionAck.id)
}
inline std::string* ConfirmTransactionAck::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ConfirmTransactionAck.id)
  return _internal_mutable_id();
}
inline const std::string& ConfirmTransactionAck::_internal_id() const {
  return id_.GetNoArena();
}
inline void ConfirmTransactionAck::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmTransactionAck::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfirmTransactionAck.id)
}
inline void ConfirmTransactionAck::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfirmTransactionAck.id)
}
inline void ConfirmTransactionAck::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfirmTransactionAck.id)
}
inline std::string* ConfirmTransactionAck::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmTransactionAck::release_id() {
  // @@protoc_insertion_point(field_release:ConfirmTransactionAck.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmTransactionAck::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ConfirmTransactionAck.id)
}

// string tx_hash = 3;
inline void ConfirmTransactionAck::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmTransactionAck::tx_hash() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionAck.tx_hash)
  return _internal_tx_hash();
}
inline void ConfirmTransactionAck::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionAck.tx_hash)
}
inline std::string* ConfirmTransactionAck::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:ConfirmTransactionAck.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& ConfirmTransactionAck::_internal_tx_hash() const {
  return tx_hash_.GetNoArena();
}
inline void ConfirmTransactionAck::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmTransactionAck::set_tx_hash(std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfirmTransactionAck.tx_hash)
}
inline void ConfirmTransactionAck::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfirmTransactionAck.tx_hash)
}
inline void ConfirmTransactionAck::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfirmTransactionAck.tx_hash)
}
inline std::string* ConfirmTransactionAck::_internal_mutable_tx_hash() {
  
  return tx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmTransactionAck::release_tx_hash() {
  // @@protoc_insertion_point(field_release:ConfirmTransactionAck.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmTransactionAck::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:ConfirmTransactionAck.tx_hash)
}

// .ConfirmCacheFlag flag = 4;
inline void ConfirmTransactionAck::clear_flag() {
  flag_ = 0;
}
inline ::ConfirmCacheFlag ConfirmTransactionAck::_internal_flag() const {
  return static_cast< ::ConfirmCacheFlag >(flag_);
}
inline ::ConfirmCacheFlag ConfirmTransactionAck::flag() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionAck.flag)
  return _internal_flag();
}
inline void ConfirmTransactionAck::_internal_set_flag(::ConfirmCacheFlag value) {
  
  flag_ = value;
}
inline void ConfirmTransactionAck::set_flag(::ConfirmCacheFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionAck.flag)
}

// bool success = 5;
inline void ConfirmTransactionAck::clear_success() {
  success_ = false;
}
inline bool ConfirmTransactionAck::_internal_success() const {
  return success_;
}
inline bool ConfirmTransactionAck::success() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionAck.success)
  return _internal_success();
}
inline void ConfirmTransactionAck::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ConfirmTransactionAck::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionAck.success)
}

// bytes block_raw = 6;
inline void ConfirmTransactionAck::clear_block_raw() {
  block_raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmTransactionAck::block_raw() const {
  // @@protoc_insertion_point(field_get:ConfirmTransactionAck.block_raw)
  return _internal_block_raw();
}
inline void ConfirmTransactionAck::set_block_raw(const std::string& value) {
  _internal_set_block_raw(value);
  // @@protoc_insertion_point(field_set:ConfirmTransactionAck.block_raw)
}
inline std::string* ConfirmTransactionAck::mutable_block_raw() {
  // @@protoc_insertion_point(field_mutable:ConfirmTransactionAck.block_raw)
  return _internal_mutable_block_raw();
}
inline const std::string& ConfirmTransactionAck::_internal_block_raw() const {
  return block_raw_.GetNoArena();
}
inline void ConfirmTransactionAck::_internal_set_block_raw(const std::string& value) {
  
  block_raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmTransactionAck::set_block_raw(std::string&& value) {
  
  block_raw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfirmTransactionAck.block_raw)
}
inline void ConfirmTransactionAck::set_block_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfirmTransactionAck.block_raw)
}
inline void ConfirmTransactionAck::set_block_raw(const void* value, size_t size) {
  
  block_raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfirmTransactionAck.block_raw)
}
inline std::string* ConfirmTransactionAck::_internal_mutable_block_raw() {
  
  return block_raw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmTransactionAck::release_block_raw() {
  // @@protoc_insertion_point(field_release:ConfirmTransactionAck.block_raw)
  
  return block_raw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmTransactionAck::set_allocated_block_raw(std::string* block_raw) {
  if (block_raw != nullptr) {
    
  } else {
    
  }
  block_raw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_raw);
  // @@protoc_insertion_point(field_set_allocated:ConfirmTransactionAck.block_raw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ConfirmCacheFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ConfirmCacheFlag>() {
  return ::ConfirmCacheFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ca_5fprotomsg_2eproto
