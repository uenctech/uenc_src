// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca_protomsg.proto

#include "ca_protomsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ca_5fprotomsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckHash_ca_5fprotomsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ca_5fprotomsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignNodeMsg_ca_5fprotomsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ca_5fprotomsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto;
class SyncHeaderMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncHeaderMsg> _instance;
} _SyncHeaderMsg_default_instance_;
class CheckHashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckHash> _instance;
} _CheckHash_default_instance_;
class SyncGetPledgeNodeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncGetPledgeNodeReq> _instance;
} _SyncGetPledgeNodeReq_default_instance_;
class SyncGetPledgeNodeAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncGetPledgeNodeAck> _instance;
} _SyncGetPledgeNodeAck_default_instance_;
class SyncVerifyPledgeNodeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncVerifyPledgeNodeReq> _instance;
} _SyncVerifyPledgeNodeReq_default_instance_;
class SyncVerifyPledgeNodeAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncVerifyPledgeNodeAck> _instance;
} _SyncVerifyPledgeNodeAck_default_instance_;
class SyncGetnodeInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncGetnodeInfoReq> _instance;
} _SyncGetnodeInfoReq_default_instance_;
class SyncGetnodeInfoAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncGetnodeInfoAck> _instance;
} _SyncGetnodeInfoAck_default_instance_;
class VerifyReliableNodeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyReliableNodeReq> _instance;
} _VerifyReliableNodeReq_default_instance_;
class VerifyReliableNodeAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyReliableNodeAck> _instance;
} _VerifyReliableNodeAck_default_instance_;
class SyncBlockInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncBlockInfoReq> _instance;
} _SyncBlockInfoReq_default_instance_;
class SyncBlockInfoAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncBlockInfoAck> _instance;
} _SyncBlockInfoAck_default_instance_;
class SyncLoseBlockReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncLoseBlockReq> _instance;
} _SyncLoseBlockReq_default_instance_;
class SyncLoseBlockAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncLoseBlockAck> _instance;
} _SyncLoseBlockAck_default_instance_;
class SignNodeMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignNodeMsg> _instance;
} _SignNodeMsg_default_instance_;
class TxMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxMsg> _instance;
} _TxMsg_default_instance_;
class BuileBlockBroadcastMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuileBlockBroadcastMsg> _instance;
} _BuileBlockBroadcastMsg_default_instance_;
class GetDevInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDevInfoReq> _instance;
} _GetDevInfoReq_default_instance_;
class GetDevInfoAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDevInfoAck> _instance;
} _GetDevInfoAck_default_instance_;
static void InitDefaultsscc_info_BuileBlockBroadcastMsg_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuileBlockBroadcastMsg_default_instance_;
    new (ptr) ::BuileBlockBroadcastMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BuileBlockBroadcastMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuileBlockBroadcastMsg_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuileBlockBroadcastMsg_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_CheckHash_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CheckHash_default_instance_;
    new (ptr) ::CheckHash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CheckHash::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckHash_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckHash_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_GetDevInfoAck_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetDevInfoAck_default_instance_;
    new (ptr) ::GetDevInfoAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetDevInfoAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDevInfoAck_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDevInfoAck_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_GetDevInfoReq_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetDevInfoReq_default_instance_;
    new (ptr) ::GetDevInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetDevInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDevInfoReq_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDevInfoReq_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_SignNodeMsg_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SignNodeMsg_default_instance_;
    new (ptr) ::SignNodeMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SignNodeMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignNodeMsg_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignNodeMsg_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_SyncBlockInfoAck_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncBlockInfoAck_default_instance_;
    new (ptr) ::SyncBlockInfoAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncBlockInfoAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SyncBlockInfoAck_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SyncBlockInfoAck_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,
      &scc_info_CheckHash_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_SyncBlockInfoReq_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncBlockInfoReq_default_instance_;
    new (ptr) ::SyncBlockInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncBlockInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SyncBlockInfoReq_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SyncBlockInfoReq_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,
      &scc_info_CheckHash_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_SyncGetPledgeNodeAck_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncGetPledgeNodeAck_default_instance_;
    new (ptr) ::SyncGetPledgeNodeAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncGetPledgeNodeAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncGetPledgeNodeAck_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncGetPledgeNodeAck_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_SyncGetPledgeNodeReq_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncGetPledgeNodeReq_default_instance_;
    new (ptr) ::SyncGetPledgeNodeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncGetPledgeNodeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncGetPledgeNodeReq_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncGetPledgeNodeReq_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_SyncGetnodeInfoAck_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncGetnodeInfoAck_default_instance_;
    new (ptr) ::SyncGetnodeInfoAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncGetnodeInfoAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncGetnodeInfoAck_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncGetnodeInfoAck_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_SyncGetnodeInfoReq_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncGetnodeInfoReq_default_instance_;
    new (ptr) ::SyncGetnodeInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncGetnodeInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncGetnodeInfoReq_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncGetnodeInfoReq_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncHeaderMsg_default_instance_;
    new (ptr) ::SyncHeaderMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncHeaderMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_SyncLoseBlockAck_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncLoseBlockAck_default_instance_;
    new (ptr) ::SyncLoseBlockAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncLoseBlockAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncLoseBlockAck_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncLoseBlockAck_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_SyncLoseBlockReq_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncLoseBlockReq_default_instance_;
    new (ptr) ::SyncLoseBlockReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncLoseBlockReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncLoseBlockReq_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncLoseBlockReq_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_SyncVerifyPledgeNodeAck_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncVerifyPledgeNodeAck_default_instance_;
    new (ptr) ::SyncVerifyPledgeNodeAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncVerifyPledgeNodeAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncVerifyPledgeNodeAck_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncVerifyPledgeNodeAck_ca_5fprotomsg_2eproto}, {}};

static void InitDefaultsscc_info_SyncVerifyPledgeNodeReq_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncVerifyPledgeNodeReq_default_instance_;
    new (ptr) ::SyncVerifyPledgeNodeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncVerifyPledgeNodeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncVerifyPledgeNodeReq_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncVerifyPledgeNodeReq_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_TxMsg_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TxMsg_default_instance_;
    new (ptr) ::TxMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TxMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TxMsg_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TxMsg_ca_5fprotomsg_2eproto}, {
      &scc_info_SignNodeMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_VerifyReliableNodeAck_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VerifyReliableNodeAck_default_instance_;
    new (ptr) ::VerifyReliableNodeAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VerifyReliableNodeAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerifyReliableNodeAck_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerifyReliableNodeAck_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static void InitDefaultsscc_info_VerifyReliableNodeReq_ca_5fprotomsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VerifyReliableNodeReq_default_instance_;
    new (ptr) ::VerifyReliableNodeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VerifyReliableNodeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VerifyReliableNodeReq_ca_5fprotomsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VerifyReliableNodeReq_ca_5fprotomsg_2eproto}, {
      &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ca_5fprotomsg_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ca_5fprotomsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ca_5fprotomsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ca_5fprotomsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncHeaderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncHeaderMsg, version_),
  PROTOBUF_FIELD_OFFSET(::SyncHeaderMsg, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CheckHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CheckHash, begin_),
  PROTOBUF_FIELD_OFFSET(::CheckHash, end_),
  PROTOBUF_FIELD_OFFSET(::CheckHash, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncGetPledgeNodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncGetPledgeNodeReq, syncheadermsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncGetPledgeNodeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncGetPledgeNodeAck, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncVerifyPledgeNodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncVerifyPledgeNodeReq, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::SyncVerifyPledgeNodeReq, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncVerifyPledgeNodeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncVerifyPledgeNodeAck, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncGetnodeInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncGetnodeInfoReq, syncheadermsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncGetnodeInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncGetnodeInfoAck, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::SyncGetnodeInfoAck, height_),
  PROTOBUF_FIELD_OFFSET(::SyncGetnodeInfoAck, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeReq, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeReq, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeAck, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeAck, id_),
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeAck, height_),
  PROTOBUF_FIELD_OFFSET(::VerifyReliableNodeAck, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoReq, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoReq, height_),
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoReq, checkhash_),
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoReq, max_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoAck, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoAck, invalid_checkhash_),
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoAck, blocks_),
  PROTOBUF_FIELD_OFFSET(::SyncBlockInfoAck, poolblocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockReq, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockReq, begin_),
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockReq, end_),
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockReq, all_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockAck, syncheadermsg_),
  PROTOBUF_FIELD_OFFSET(::SyncLoseBlockAck, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, signmsg_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, signpubkey_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, gasfee_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, onlinetime_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, awardtotal_),
  PROTOBUF_FIELD_OFFSET(::SignNodeMsg, signsum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TxMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TxMsg, version_),
  PROTOBUF_FIELD_OFFSET(::TxMsg, id_),
  PROTOBUF_FIELD_OFFSET(::TxMsg, tx_),
  PROTOBUF_FIELD_OFFSET(::TxMsg, txencodehash_),
  PROTOBUF_FIELD_OFFSET(::TxMsg, signnodemsg_),
  PROTOBUF_FIELD_OFFSET(::TxMsg, top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuileBlockBroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuileBlockBroadcastMsg, version_),
  PROTOBUF_FIELD_OFFSET(::BuileBlockBroadcastMsg, blockraw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetDevInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetDevInfoReq, version_),
  PROTOBUF_FIELD_OFFSET(::GetDevInfoReq, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetDevInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetDevInfoAck, version_),
  PROTOBUF_FIELD_OFFSET(::GetDevInfoAck, id_),
  PROTOBUF_FIELD_OFFSET(::GetDevInfoAck, height_),
  PROTOBUF_FIELD_OFFSET(::GetDevInfoAck, hash_),
  PROTOBUF_FIELD_OFFSET(::GetDevInfoAck, base58addr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SyncHeaderMsg)},
  { 7, -1, sizeof(::CheckHash)},
  { 15, -1, sizeof(::SyncGetPledgeNodeReq)},
  { 21, -1, sizeof(::SyncGetPledgeNodeAck)},
  { 27, -1, sizeof(::SyncVerifyPledgeNodeReq)},
  { 34, -1, sizeof(::SyncVerifyPledgeNodeAck)},
  { 40, -1, sizeof(::SyncGetnodeInfoReq)},
  { 46, -1, sizeof(::SyncGetnodeInfoAck)},
  { 54, -1, sizeof(::VerifyReliableNodeReq)},
  { 61, -1, sizeof(::VerifyReliableNodeAck)},
  { 70, -1, sizeof(::SyncBlockInfoReq)},
  { 79, -1, sizeof(::SyncBlockInfoAck)},
  { 88, -1, sizeof(::SyncLoseBlockReq)},
  { 97, -1, sizeof(::SyncLoseBlockAck)},
  { 104, -1, sizeof(::SignNodeMsg)},
  { 115, -1, sizeof(::TxMsg)},
  { 126, -1, sizeof(::BuileBlockBroadcastMsg)},
  { 133, -1, sizeof(::GetDevInfoReq)},
  { 140, -1, sizeof(::GetDevInfoAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncHeaderMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CheckHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncGetPledgeNodeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncGetPledgeNodeAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncVerifyPledgeNodeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncVerifyPledgeNodeAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncGetnodeInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncGetnodeInfoAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VerifyReliableNodeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VerifyReliableNodeAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncBlockInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncBlockInfoAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncLoseBlockReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncLoseBlockAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SignNodeMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TxMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuileBlockBroadcastMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetDevInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetDevInfoAck_default_instance_),
};

const char descriptor_table_protodef_ca_5fprotomsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ca_protomsg.proto\",\n\rSyncHeaderMsg\022\017\n\007"
  "version\030\001 \001(\014\022\n\n\002id\030\004 \001(\014\"5\n\tCheckHash\022\r"
  "\n\005begin\030\001 \001(\004\022\013\n\003end\030\002 \001(\004\022\014\n\004hash\030\003 \001(\t"
  "\"=\n\024SyncGetPledgeNodeReq\022%\n\rsyncHeaderMs"
  "g\030\001 \001(\0132\016.SyncHeaderMsg\"#\n\024SyncGetPledge"
  "NodeAck\022\013\n\003ids\030\001 \003(\t\"M\n\027SyncVerifyPledge"
  "NodeReq\022%\n\rsyncHeaderMsg\030\001 \001(\0132\016.SyncHea"
  "derMsg\022\013\n\003ids\030\002 \003(\t\"&\n\027SyncVerifyPledgeN"
  "odeAck\022\013\n\003ids\030\001 \003(\t\";\n\022SyncGetnodeInfoRe"
  "q\022%\n\rsyncHeaderMsg\030\001 \001(\0132\016.SyncHeaderMsg"
  "\"Y\n\022SyncGetnodeInfoAck\022%\n\rsyncHeaderMsg\030"
  "\001 \001(\0132\016.SyncHeaderMsg\022\016\n\006height\030\002 \001(\004\022\014\n"
  "\004hash\030\003 \001(\014\"N\n\025VerifyReliableNodeReq\022%\n\r"
  "syncHeaderMsg\030\001 \001(\0132\016.SyncHeaderMsg\022\016\n\006h"
  "eight\030\002 \001(\003\"h\n\025VerifyReliableNodeAck\022%\n\r"
  "syncHeaderMsg\030\001 \001(\0132\016.SyncHeaderMsg\022\n\n\002i"
  "d\030\002 \001(\t\022\016\n\006height\030\003 \001(\004\022\014\n\004hash\030\004 \001(\014\"y\n"
  "\020SyncBlockInfoReq\022%\n\rsyncHeaderMsg\030\001 \001(\013"
  "2\016.SyncHeaderMsg\022\016\n\006height\030\002 \001(\004\022\035\n\tchec"
  "khash\030\003 \003(\0132\n.CheckHash\022\017\n\007max_num\030\004 \001(\004"
  "\"\204\001\n\020SyncBlockInfoAck\022%\n\rsyncHeaderMsg\030\001"
  " \001(\0132\016.SyncHeaderMsg\022%\n\021invalid_checkhas"
  "h\030\002 \003(\0132\n.CheckHash\022\016\n\006blocks\030\003 \001(\014\022\022\n\np"
  "oolblocks\030\004 \001(\014\"g\n\020SyncLoseBlockReq\022%\n\rs"
  "yncHeaderMsg\030\001 \001(\0132\016.SyncHeaderMsg\022\r\n\005be"
  "gin\030\002 \001(\004\022\013\n\003end\030\003 \001(\004\022\020\n\010all_hash\030\004 \001(\t"
  "\"I\n\020SyncLoseBlockAck\022%\n\rsyncHeaderMsg\030\001 "
  "\001(\0132\016.SyncHeaderMsg\022\016\n\006blocks\030\002 \001(\014\"{\n\013S"
  "ignNodeMsg\022\017\n\007signMsg\030\001 \001(\014\022\022\n\nsignPubKe"
  "y\030\002 \001(\014\022\016\n\006gasFee\030\003 \001(\t\022\022\n\nonlineTime\030\004 "
  "\001(\001\022\022\n\nawardTotal\030\005 \001(\004\022\017\n\007signSum\030\006 \001(\004"
  "\"v\n\005TxMsg\022\017\n\007version\030\001 \001(\t\022\n\n\002id\030\002 \001(\014\022\n"
  "\n\002Tx\030\003 \001(\014\022\024\n\014txEncodeHash\030\004 \001(\t\022!\n\013sign"
  "NodeMsg\030\005 \003(\0132\014.SignNodeMsg\022\013\n\003top\030\006 \001(\004"
  "\";\n\026BuileBlockBroadcastMsg\022\017\n\007version\030\001 "
  "\001(\t\022\020\n\010blockRaw\030\002 \001(\014\",\n\rGetDevInfoReq\022\017"
  "\n\007version\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\"^\n\rGetDevInf"
  "oAck\022\017\n\007version\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\016\n\006hei"
  "ght\030\003 \001(\004\022\014\n\004hash\030\004 \001(\t\022\022\n\nbase58addr\030\005 "
  "\001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ca_5fprotomsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ca_5fprotomsg_2eproto_sccs[19] = {
  &scc_info_BuileBlockBroadcastMsg_ca_5fprotomsg_2eproto.base,
  &scc_info_CheckHash_ca_5fprotomsg_2eproto.base,
  &scc_info_GetDevInfoAck_ca_5fprotomsg_2eproto.base,
  &scc_info_GetDevInfoReq_ca_5fprotomsg_2eproto.base,
  &scc_info_SignNodeMsg_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncBlockInfoAck_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncBlockInfoReq_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncGetPledgeNodeAck_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncGetPledgeNodeReq_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncGetnodeInfoAck_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncGetnodeInfoReq_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncLoseBlockAck_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncLoseBlockReq_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncVerifyPledgeNodeAck_ca_5fprotomsg_2eproto.base,
  &scc_info_SyncVerifyPledgeNodeReq_ca_5fprotomsg_2eproto.base,
  &scc_info_TxMsg_ca_5fprotomsg_2eproto.base,
  &scc_info_VerifyReliableNodeAck_ca_5fprotomsg_2eproto.base,
  &scc_info_VerifyReliableNodeReq_ca_5fprotomsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ca_5fprotomsg_2eproto_once;
static bool descriptor_table_ca_5fprotomsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ca_5fprotomsg_2eproto = {
  &descriptor_table_ca_5fprotomsg_2eproto_initialized, descriptor_table_protodef_ca_5fprotomsg_2eproto, "ca_protomsg.proto", 1571,
  &descriptor_table_ca_5fprotomsg_2eproto_once, descriptor_table_ca_5fprotomsg_2eproto_sccs, descriptor_table_ca_5fprotomsg_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_ca_5fprotomsg_2eproto::offsets,
  file_level_metadata_ca_5fprotomsg_2eproto, 19, file_level_enum_descriptors_ca_5fprotomsg_2eproto, file_level_service_descriptors_ca_5fprotomsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ca_5fprotomsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ca_5fprotomsg_2eproto), true);

// ===================================================================

void SyncHeaderMsg::InitAsDefaultInstance() {
}
class SyncHeaderMsg::_Internal {
 public:
};

SyncHeaderMsg::SyncHeaderMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncHeaderMsg)
}
SyncHeaderMsg::SyncHeaderMsg(const SyncHeaderMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:SyncHeaderMsg)
}

void SyncHeaderMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SyncHeaderMsg::~SyncHeaderMsg() {
  // @@protoc_insertion_point(destructor:SyncHeaderMsg)
  SharedDtor();
}

void SyncHeaderMsg::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncHeaderMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncHeaderMsg& SyncHeaderMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncHeaderMsg_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncHeaderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncHeaderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SyncHeaderMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncHeaderMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncHeaderMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_version(), target);
  }

  // bytes id = 4;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncHeaderMsg)
  return target;
}

size_t SyncHeaderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncHeaderMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_version());
  }

  // bytes id = 4;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncHeaderMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncHeaderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncHeaderMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncHeaderMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncHeaderMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncHeaderMsg)
    MergeFrom(*source);
  }
}

void SyncHeaderMsg::MergeFrom(const SyncHeaderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncHeaderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void SyncHeaderMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncHeaderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncHeaderMsg::CopyFrom(const SyncHeaderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncHeaderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncHeaderMsg::IsInitialized() const {
  return true;
}

void SyncHeaderMsg::InternalSwap(SyncHeaderMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncHeaderMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckHash::InitAsDefaultInstance() {
}
class CheckHash::_Internal {
 public:
};

CheckHash::CheckHash()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckHash)
}
CheckHash::CheckHash(const CheckHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:CheckHash)
}

void CheckHash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckHash_ca_5fprotomsg_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

CheckHash::~CheckHash() {
  // @@protoc_insertion_point(destructor:CheckHash)
  SharedDtor();
}

void CheckHash::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckHash& CheckHash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckHash_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void CheckHash::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

const char* CheckHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CheckHash.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 begin = 1;
  if (this->begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_begin(), target);
  }

  // uint64 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end(), target);
  }

  // string hash = 3;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CheckHash.hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckHash)
  return target;
}

size_t CheckHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint64 begin = 1;
  if (this->begin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_begin());
  }

  // uint64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckHash)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckHash)
    MergeFrom(*source);
  }
}

void CheckHash::MergeFrom(const CheckHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.begin() != 0) {
    _internal_set_begin(from._internal_begin());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void CheckHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckHash::CopyFrom(const CheckHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckHash::IsInitialized() const {
  return true;
}

void CheckHash::InternalSwap(CheckHash* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(begin_, other->begin_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncGetPledgeNodeReq::InitAsDefaultInstance() {
  ::_SyncGetPledgeNodeReq_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncGetPledgeNodeReq::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncGetPledgeNodeReq* msg);
};

const ::SyncHeaderMsg&
SyncGetPledgeNodeReq::_Internal::syncheadermsg(const SyncGetPledgeNodeReq* msg) {
  return *msg->syncheadermsg_;
}
SyncGetPledgeNodeReq::SyncGetPledgeNodeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncGetPledgeNodeReq)
}
SyncGetPledgeNodeReq::SyncGetPledgeNodeReq(const SyncGetPledgeNodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SyncGetPledgeNodeReq)
}

void SyncGetPledgeNodeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncGetPledgeNodeReq_ca_5fprotomsg_2eproto.base);
  syncheadermsg_ = nullptr;
}

SyncGetPledgeNodeReq::~SyncGetPledgeNodeReq() {
  // @@protoc_insertion_point(destructor:SyncGetPledgeNodeReq)
  SharedDtor();
}

void SyncGetPledgeNodeReq::SharedDtor() {
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncGetPledgeNodeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncGetPledgeNodeReq& SyncGetPledgeNodeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncGetPledgeNodeReq_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncGetPledgeNodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncGetPledgeNodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SyncGetPledgeNodeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncGetPledgeNodeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncGetPledgeNodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncGetPledgeNodeReq)
  return target;
}

size_t SyncGetPledgeNodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncGetPledgeNodeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncGetPledgeNodeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncGetPledgeNodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncGetPledgeNodeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncGetPledgeNodeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncGetPledgeNodeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncGetPledgeNodeReq)
    MergeFrom(*source);
  }
}

void SyncGetPledgeNodeReq::MergeFrom(const SyncGetPledgeNodeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncGetPledgeNodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
}

void SyncGetPledgeNodeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncGetPledgeNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncGetPledgeNodeReq::CopyFrom(const SyncGetPledgeNodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncGetPledgeNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncGetPledgeNodeReq::IsInitialized() const {
  return true;
}

void SyncGetPledgeNodeReq::InternalSwap(SyncGetPledgeNodeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(syncheadermsg_, other->syncheadermsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncGetPledgeNodeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncGetPledgeNodeAck::InitAsDefaultInstance() {
}
class SyncGetPledgeNodeAck::_Internal {
 public:
};

SyncGetPledgeNodeAck::SyncGetPledgeNodeAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncGetPledgeNodeAck)
}
SyncGetPledgeNodeAck::SyncGetPledgeNodeAck(const SyncGetPledgeNodeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SyncGetPledgeNodeAck)
}

void SyncGetPledgeNodeAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncGetPledgeNodeAck_ca_5fprotomsg_2eproto.base);
}

SyncGetPledgeNodeAck::~SyncGetPledgeNodeAck() {
  // @@protoc_insertion_point(destructor:SyncGetPledgeNodeAck)
  SharedDtor();
}

void SyncGetPledgeNodeAck::SharedDtor() {
}

void SyncGetPledgeNodeAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncGetPledgeNodeAck& SyncGetPledgeNodeAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncGetPledgeNodeAck_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncGetPledgeNodeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncGetPledgeNodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

const char* SyncGetPledgeNodeAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncGetPledgeNodeAck.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncGetPledgeNodeAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncGetPledgeNodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncGetPledgeNodeAck.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncGetPledgeNodeAck)
  return target;
}

size_t SyncGetPledgeNodeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncGetPledgeNodeAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncGetPledgeNodeAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncGetPledgeNodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncGetPledgeNodeAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncGetPledgeNodeAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncGetPledgeNodeAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncGetPledgeNodeAck)
    MergeFrom(*source);
  }
}

void SyncGetPledgeNodeAck::MergeFrom(const SyncGetPledgeNodeAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncGetPledgeNodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void SyncGetPledgeNodeAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncGetPledgeNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncGetPledgeNodeAck::CopyFrom(const SyncGetPledgeNodeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncGetPledgeNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncGetPledgeNodeAck::IsInitialized() const {
  return true;
}

void SyncGetPledgeNodeAck::InternalSwap(SyncGetPledgeNodeAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncGetPledgeNodeAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncVerifyPledgeNodeReq::InitAsDefaultInstance() {
  ::_SyncVerifyPledgeNodeReq_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncVerifyPledgeNodeReq::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncVerifyPledgeNodeReq* msg);
};

const ::SyncHeaderMsg&
SyncVerifyPledgeNodeReq::_Internal::syncheadermsg(const SyncVerifyPledgeNodeReq* msg) {
  return *msg->syncheadermsg_;
}
SyncVerifyPledgeNodeReq::SyncVerifyPledgeNodeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncVerifyPledgeNodeReq)
}
SyncVerifyPledgeNodeReq::SyncVerifyPledgeNodeReq(const SyncVerifyPledgeNodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SyncVerifyPledgeNodeReq)
}

void SyncVerifyPledgeNodeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncVerifyPledgeNodeReq_ca_5fprotomsg_2eproto.base);
  syncheadermsg_ = nullptr;
}

SyncVerifyPledgeNodeReq::~SyncVerifyPledgeNodeReq() {
  // @@protoc_insertion_point(destructor:SyncVerifyPledgeNodeReq)
  SharedDtor();
}

void SyncVerifyPledgeNodeReq::SharedDtor() {
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncVerifyPledgeNodeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncVerifyPledgeNodeReq& SyncVerifyPledgeNodeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncVerifyPledgeNodeReq_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncVerifyPledgeNodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncVerifyPledgeNodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SyncVerifyPledgeNodeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncVerifyPledgeNodeReq.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncVerifyPledgeNodeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncVerifyPledgeNodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncVerifyPledgeNodeReq.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncVerifyPledgeNodeReq)
  return target;
}

size_t SyncVerifyPledgeNodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncVerifyPledgeNodeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncVerifyPledgeNodeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncVerifyPledgeNodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncVerifyPledgeNodeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncVerifyPledgeNodeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncVerifyPledgeNodeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncVerifyPledgeNodeReq)
    MergeFrom(*source);
  }
}

void SyncVerifyPledgeNodeReq::MergeFrom(const SyncVerifyPledgeNodeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncVerifyPledgeNodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
}

void SyncVerifyPledgeNodeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncVerifyPledgeNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncVerifyPledgeNodeReq::CopyFrom(const SyncVerifyPledgeNodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncVerifyPledgeNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncVerifyPledgeNodeReq::IsInitialized() const {
  return true;
}

void SyncVerifyPledgeNodeReq::InternalSwap(SyncVerifyPledgeNodeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(syncheadermsg_, other->syncheadermsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncVerifyPledgeNodeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncVerifyPledgeNodeAck::InitAsDefaultInstance() {
}
class SyncVerifyPledgeNodeAck::_Internal {
 public:
};

SyncVerifyPledgeNodeAck::SyncVerifyPledgeNodeAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncVerifyPledgeNodeAck)
}
SyncVerifyPledgeNodeAck::SyncVerifyPledgeNodeAck(const SyncVerifyPledgeNodeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SyncVerifyPledgeNodeAck)
}

void SyncVerifyPledgeNodeAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncVerifyPledgeNodeAck_ca_5fprotomsg_2eproto.base);
}

SyncVerifyPledgeNodeAck::~SyncVerifyPledgeNodeAck() {
  // @@protoc_insertion_point(destructor:SyncVerifyPledgeNodeAck)
  SharedDtor();
}

void SyncVerifyPledgeNodeAck::SharedDtor() {
}

void SyncVerifyPledgeNodeAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncVerifyPledgeNodeAck& SyncVerifyPledgeNodeAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncVerifyPledgeNodeAck_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncVerifyPledgeNodeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncVerifyPledgeNodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

const char* SyncVerifyPledgeNodeAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncVerifyPledgeNodeAck.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncVerifyPledgeNodeAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncVerifyPledgeNodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncVerifyPledgeNodeAck.ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncVerifyPledgeNodeAck)
  return target;
}

size_t SyncVerifyPledgeNodeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncVerifyPledgeNodeAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncVerifyPledgeNodeAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncVerifyPledgeNodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncVerifyPledgeNodeAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncVerifyPledgeNodeAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncVerifyPledgeNodeAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncVerifyPledgeNodeAck)
    MergeFrom(*source);
  }
}

void SyncVerifyPledgeNodeAck::MergeFrom(const SyncVerifyPledgeNodeAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncVerifyPledgeNodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void SyncVerifyPledgeNodeAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncVerifyPledgeNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncVerifyPledgeNodeAck::CopyFrom(const SyncVerifyPledgeNodeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncVerifyPledgeNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncVerifyPledgeNodeAck::IsInitialized() const {
  return true;
}

void SyncVerifyPledgeNodeAck::InternalSwap(SyncVerifyPledgeNodeAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncVerifyPledgeNodeAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncGetnodeInfoReq::InitAsDefaultInstance() {
  ::_SyncGetnodeInfoReq_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncGetnodeInfoReq::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncGetnodeInfoReq* msg);
};

const ::SyncHeaderMsg&
SyncGetnodeInfoReq::_Internal::syncheadermsg(const SyncGetnodeInfoReq* msg) {
  return *msg->syncheadermsg_;
}
SyncGetnodeInfoReq::SyncGetnodeInfoReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncGetnodeInfoReq)
}
SyncGetnodeInfoReq::SyncGetnodeInfoReq(const SyncGetnodeInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SyncGetnodeInfoReq)
}

void SyncGetnodeInfoReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncGetnodeInfoReq_ca_5fprotomsg_2eproto.base);
  syncheadermsg_ = nullptr;
}

SyncGetnodeInfoReq::~SyncGetnodeInfoReq() {
  // @@protoc_insertion_point(destructor:SyncGetnodeInfoReq)
  SharedDtor();
}

void SyncGetnodeInfoReq::SharedDtor() {
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncGetnodeInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncGetnodeInfoReq& SyncGetnodeInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncGetnodeInfoReq_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncGetnodeInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncGetnodeInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SyncGetnodeInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncGetnodeInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncGetnodeInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncGetnodeInfoReq)
  return target;
}

size_t SyncGetnodeInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncGetnodeInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncGetnodeInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncGetnodeInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncGetnodeInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncGetnodeInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncGetnodeInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncGetnodeInfoReq)
    MergeFrom(*source);
  }
}

void SyncGetnodeInfoReq::MergeFrom(const SyncGetnodeInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncGetnodeInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
}

void SyncGetnodeInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncGetnodeInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncGetnodeInfoReq::CopyFrom(const SyncGetnodeInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncGetnodeInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncGetnodeInfoReq::IsInitialized() const {
  return true;
}

void SyncGetnodeInfoReq::InternalSwap(SyncGetnodeInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(syncheadermsg_, other->syncheadermsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncGetnodeInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncGetnodeInfoAck::InitAsDefaultInstance() {
  ::_SyncGetnodeInfoAck_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncGetnodeInfoAck::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncGetnodeInfoAck* msg);
};

const ::SyncHeaderMsg&
SyncGetnodeInfoAck::_Internal::syncheadermsg(const SyncGetnodeInfoAck* msg) {
  return *msg->syncheadermsg_;
}
SyncGetnodeInfoAck::SyncGetnodeInfoAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncGetnodeInfoAck)
}
SyncGetnodeInfoAck::SyncGetnodeInfoAck(const SyncGetnodeInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:SyncGetnodeInfoAck)
}

void SyncGetnodeInfoAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncGetnodeInfoAck_ca_5fprotomsg_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&syncheadermsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&syncheadermsg_)) + sizeof(height_));
}

SyncGetnodeInfoAck::~SyncGetnodeInfoAck() {
  // @@protoc_insertion_point(destructor:SyncGetnodeInfoAck)
  SharedDtor();
}

void SyncGetnodeInfoAck::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncGetnodeInfoAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncGetnodeInfoAck& SyncGetnodeInfoAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncGetnodeInfoAck_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncGetnodeInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncGetnodeInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SyncGetnodeInfoAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncGetnodeInfoAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncGetnodeInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncGetnodeInfoAck)
  return target;
}

size_t SyncGetnodeInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncGetnodeInfoAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncGetnodeInfoAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncGetnodeInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncGetnodeInfoAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncGetnodeInfoAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncGetnodeInfoAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncGetnodeInfoAck)
    MergeFrom(*source);
  }
}

void SyncGetnodeInfoAck::MergeFrom(const SyncGetnodeInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncGetnodeInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void SyncGetnodeInfoAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncGetnodeInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncGetnodeInfoAck::CopyFrom(const SyncGetnodeInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncGetnodeInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncGetnodeInfoAck::IsInitialized() const {
  return true;
}

void SyncGetnodeInfoAck::InternalSwap(SyncGetnodeInfoAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syncheadermsg_, other->syncheadermsg_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncGetnodeInfoAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyReliableNodeReq::InitAsDefaultInstance() {
  ::_VerifyReliableNodeReq_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class VerifyReliableNodeReq::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const VerifyReliableNodeReq* msg);
};

const ::SyncHeaderMsg&
VerifyReliableNodeReq::_Internal::syncheadermsg(const VerifyReliableNodeReq* msg) {
  return *msg->syncheadermsg_;
}
VerifyReliableNodeReq::VerifyReliableNodeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VerifyReliableNodeReq)
}
VerifyReliableNodeReq::VerifyReliableNodeReq(const VerifyReliableNodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:VerifyReliableNodeReq)
}

void VerifyReliableNodeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyReliableNodeReq_ca_5fprotomsg_2eproto.base);
  ::memset(&syncheadermsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&syncheadermsg_)) + sizeof(height_));
}

VerifyReliableNodeReq::~VerifyReliableNodeReq() {
  // @@protoc_insertion_point(destructor:VerifyReliableNodeReq)
  SharedDtor();
}

void VerifyReliableNodeReq::SharedDtor() {
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void VerifyReliableNodeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyReliableNodeReq& VerifyReliableNodeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyReliableNodeReq_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void VerifyReliableNodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:VerifyReliableNodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  height_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* VerifyReliableNodeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyReliableNodeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VerifyReliableNodeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VerifyReliableNodeReq)
  return target;
}

size_t VerifyReliableNodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VerifyReliableNodeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  // int64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyReliableNodeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VerifyReliableNodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyReliableNodeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyReliableNodeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VerifyReliableNodeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VerifyReliableNodeReq)
    MergeFrom(*source);
  }
}

void VerifyReliableNodeReq::MergeFrom(const VerifyReliableNodeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VerifyReliableNodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void VerifyReliableNodeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VerifyReliableNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyReliableNodeReq::CopyFrom(const VerifyReliableNodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VerifyReliableNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyReliableNodeReq::IsInitialized() const {
  return true;
}

void VerifyReliableNodeReq::InternalSwap(VerifyReliableNodeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(syncheadermsg_, other->syncheadermsg_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyReliableNodeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyReliableNodeAck::InitAsDefaultInstance() {
  ::_VerifyReliableNodeAck_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class VerifyReliableNodeAck::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const VerifyReliableNodeAck* msg);
};

const ::SyncHeaderMsg&
VerifyReliableNodeAck::_Internal::syncheadermsg(const VerifyReliableNodeAck* msg) {
  return *msg->syncheadermsg_;
}
VerifyReliableNodeAck::VerifyReliableNodeAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VerifyReliableNodeAck)
}
VerifyReliableNodeAck::VerifyReliableNodeAck(const VerifyReliableNodeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:VerifyReliableNodeAck)
}

void VerifyReliableNodeAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyReliableNodeAck_ca_5fprotomsg_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&syncheadermsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&syncheadermsg_)) + sizeof(height_));
}

VerifyReliableNodeAck::~VerifyReliableNodeAck() {
  // @@protoc_insertion_point(destructor:VerifyReliableNodeAck)
  SharedDtor();
}

void VerifyReliableNodeAck::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void VerifyReliableNodeAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyReliableNodeAck& VerifyReliableNodeAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyReliableNodeAck_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void VerifyReliableNodeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:VerifyReliableNodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* VerifyReliableNodeAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VerifyReliableNodeAck.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyReliableNodeAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VerifyReliableNodeAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VerifyReliableNodeAck.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VerifyReliableNodeAck)
  return target;
}

size_t VerifyReliableNodeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VerifyReliableNodeAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyReliableNodeAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VerifyReliableNodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyReliableNodeAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyReliableNodeAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VerifyReliableNodeAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VerifyReliableNodeAck)
    MergeFrom(*source);
  }
}

void VerifyReliableNodeAck::MergeFrom(const VerifyReliableNodeAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VerifyReliableNodeAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void VerifyReliableNodeAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VerifyReliableNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyReliableNodeAck::CopyFrom(const VerifyReliableNodeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VerifyReliableNodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyReliableNodeAck::IsInitialized() const {
  return true;
}

void VerifyReliableNodeAck::InternalSwap(VerifyReliableNodeAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syncheadermsg_, other->syncheadermsg_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyReliableNodeAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncBlockInfoReq::InitAsDefaultInstance() {
  ::_SyncBlockInfoReq_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncBlockInfoReq::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncBlockInfoReq* msg);
};

const ::SyncHeaderMsg&
SyncBlockInfoReq::_Internal::syncheadermsg(const SyncBlockInfoReq* msg) {
  return *msg->syncheadermsg_;
}
SyncBlockInfoReq::SyncBlockInfoReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncBlockInfoReq)
}
SyncBlockInfoReq::SyncBlockInfoReq(const SyncBlockInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      checkhash_(from.checkhash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_) -
    reinterpret_cast<char*>(&height_)) + sizeof(max_num_));
  // @@protoc_insertion_point(copy_constructor:SyncBlockInfoReq)
}

void SyncBlockInfoReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncBlockInfoReq_ca_5fprotomsg_2eproto.base);
  ::memset(&syncheadermsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&syncheadermsg_)) + sizeof(max_num_));
}

SyncBlockInfoReq::~SyncBlockInfoReq() {
  // @@protoc_insertion_point(destructor:SyncBlockInfoReq)
  SharedDtor();
}

void SyncBlockInfoReq::SharedDtor() {
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncBlockInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncBlockInfoReq& SyncBlockInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncBlockInfoReq_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncBlockInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncBlockInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkhash_.Clear();
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_) -
      reinterpret_cast<char*>(&height_)) + sizeof(max_num_));
  _internal_metadata_.Clear();
}

const char* SyncBlockInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CheckHash checkhash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_checkhash(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 max_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBlockInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncBlockInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // repeated .CheckHash checkhash = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_checkhash_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_checkhash(i), target, stream);
  }

  // uint64 max_num = 4;
  if (this->max_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_max_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncBlockInfoReq)
  return target;
}

size_t SyncBlockInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncBlockInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CheckHash checkhash = 3;
  total_size += 1UL * this->_internal_checkhash_size();
  for (const auto& msg : this->checkhash_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 max_num = 4;
  if (this->max_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBlockInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncBlockInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBlockInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBlockInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncBlockInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncBlockInfoReq)
    MergeFrom(*source);
  }
}

void SyncBlockInfoReq::MergeFrom(const SyncBlockInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncBlockInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkhash_.MergeFrom(from.checkhash_);
  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.max_num() != 0) {
    _internal_set_max_num(from._internal_max_num());
  }
}

void SyncBlockInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncBlockInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBlockInfoReq::CopyFrom(const SyncBlockInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncBlockInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBlockInfoReq::IsInitialized() const {
  return true;
}

void SyncBlockInfoReq::InternalSwap(SyncBlockInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  checkhash_.InternalSwap(&other->checkhash_);
  swap(syncheadermsg_, other->syncheadermsg_);
  swap(height_, other->height_);
  swap(max_num_, other->max_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBlockInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncBlockInfoAck::InitAsDefaultInstance() {
  ::_SyncBlockInfoAck_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncBlockInfoAck::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncBlockInfoAck* msg);
};

const ::SyncHeaderMsg&
SyncBlockInfoAck::_Internal::syncheadermsg(const SyncBlockInfoAck* msg) {
  return *msg->syncheadermsg_;
}
SyncBlockInfoAck::SyncBlockInfoAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncBlockInfoAck)
}
SyncBlockInfoAck::SyncBlockInfoAck(const SyncBlockInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      invalid_checkhash_(from.invalid_checkhash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blocks().empty()) {
    blocks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blocks_);
  }
  poolblocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_poolblocks().empty()) {
    poolblocks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poolblocks_);
  }
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SyncBlockInfoAck)
}

void SyncBlockInfoAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncBlockInfoAck_ca_5fprotomsg_2eproto.base);
  blocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poolblocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  syncheadermsg_ = nullptr;
}

SyncBlockInfoAck::~SyncBlockInfoAck() {
  // @@protoc_insertion_point(destructor:SyncBlockInfoAck)
  SharedDtor();
}

void SyncBlockInfoAck::SharedDtor() {
  blocks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poolblocks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncBlockInfoAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncBlockInfoAck& SyncBlockInfoAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncBlockInfoAck_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncBlockInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncBlockInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invalid_checkhash_.Clear();
  blocks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  poolblocks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SyncBlockInfoAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CheckHash invalid_checkhash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invalid_checkhash(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_blocks();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes poolblocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_poolblocks();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncBlockInfoAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncBlockInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // repeated .CheckHash invalid_checkhash = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invalid_checkhash_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_invalid_checkhash(i), target, stream);
  }

  // bytes blocks = 3;
  if (this->blocks().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blocks(), target);
  }

  // bytes poolblocks = 4;
  if (this->poolblocks().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_poolblocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncBlockInfoAck)
  return target;
}

size_t SyncBlockInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncBlockInfoAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CheckHash invalid_checkhash = 2;
  total_size += 1UL * this->_internal_invalid_checkhash_size();
  for (const auto& msg : this->invalid_checkhash_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes blocks = 3;
  if (this->blocks().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blocks());
  }

  // bytes poolblocks = 4;
  if (this->poolblocks().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_poolblocks());
  }

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncBlockInfoAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncBlockInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncBlockInfoAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncBlockInfoAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncBlockInfoAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncBlockInfoAck)
    MergeFrom(*source);
  }
}

void SyncBlockInfoAck::MergeFrom(const SyncBlockInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncBlockInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invalid_checkhash_.MergeFrom(from.invalid_checkhash_);
  if (from.blocks().size() > 0) {

    blocks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blocks_);
  }
  if (from.poolblocks().size() > 0) {

    poolblocks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.poolblocks_);
  }
  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
}

void SyncBlockInfoAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncBlockInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBlockInfoAck::CopyFrom(const SyncBlockInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncBlockInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBlockInfoAck::IsInitialized() const {
  return true;
}

void SyncBlockInfoAck::InternalSwap(SyncBlockInfoAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  invalid_checkhash_.InternalSwap(&other->invalid_checkhash_);
  blocks_.Swap(&other->blocks_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  poolblocks_.Swap(&other->poolblocks_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syncheadermsg_, other->syncheadermsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncBlockInfoAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncLoseBlockReq::InitAsDefaultInstance() {
  ::_SyncLoseBlockReq_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncLoseBlockReq::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncLoseBlockReq* msg);
};

const ::SyncHeaderMsg&
SyncLoseBlockReq::_Internal::syncheadermsg(const SyncLoseBlockReq* msg) {
  return *msg->syncheadermsg_;
}
SyncLoseBlockReq::SyncLoseBlockReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncLoseBlockReq)
}
SyncLoseBlockReq::SyncLoseBlockReq(const SyncLoseBlockReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  all_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_all_hash().empty()) {
    all_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.all_hash_);
  }
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:SyncLoseBlockReq)
}

void SyncLoseBlockReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncLoseBlockReq_ca_5fprotomsg_2eproto.base);
  all_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&syncheadermsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&syncheadermsg_)) + sizeof(end_));
}

SyncLoseBlockReq::~SyncLoseBlockReq() {
  // @@protoc_insertion_point(destructor:SyncLoseBlockReq)
  SharedDtor();
}

void SyncLoseBlockReq::SharedDtor() {
  all_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncLoseBlockReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncLoseBlockReq& SyncLoseBlockReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncLoseBlockReq_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncLoseBlockReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncLoseBlockReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  _internal_metadata_.Clear();
}

const char* SyncLoseBlockReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 begin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string all_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_all_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SyncLoseBlockReq.all_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncLoseBlockReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncLoseBlockReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // uint64 begin = 2;
  if (this->begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_begin(), target);
  }

  // uint64 end = 3;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end(), target);
  }

  // string all_hash = 4;
  if (this->all_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_all_hash().data(), static_cast<int>(this->_internal_all_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SyncLoseBlockReq.all_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_all_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncLoseBlockReq)
  return target;
}

size_t SyncLoseBlockReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncLoseBlockReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string all_hash = 4;
  if (this->all_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_all_hash());
  }

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  // uint64 begin = 2;
  if (this->begin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_begin());
  }

  // uint64 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncLoseBlockReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncLoseBlockReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncLoseBlockReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncLoseBlockReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncLoseBlockReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncLoseBlockReq)
    MergeFrom(*source);
  }
}

void SyncLoseBlockReq::MergeFrom(const SyncLoseBlockReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncLoseBlockReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.all_hash().size() > 0) {

    all_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.all_hash_);
  }
  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
  if (from.begin() != 0) {
    _internal_set_begin(from._internal_begin());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
}

void SyncLoseBlockReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncLoseBlockReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncLoseBlockReq::CopyFrom(const SyncLoseBlockReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncLoseBlockReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncLoseBlockReq::IsInitialized() const {
  return true;
}

void SyncLoseBlockReq::InternalSwap(SyncLoseBlockReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  all_hash_.Swap(&other->all_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syncheadermsg_, other->syncheadermsg_);
  swap(begin_, other->begin_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncLoseBlockReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncLoseBlockAck::InitAsDefaultInstance() {
  ::_SyncLoseBlockAck_default_instance_._instance.get_mutable()->syncheadermsg_ = const_cast< ::SyncHeaderMsg*>(
      ::SyncHeaderMsg::internal_default_instance());
}
class SyncLoseBlockAck::_Internal {
 public:
  static const ::SyncHeaderMsg& syncheadermsg(const SyncLoseBlockAck* msg);
};

const ::SyncHeaderMsg&
SyncLoseBlockAck::_Internal::syncheadermsg(const SyncLoseBlockAck* msg) {
  return *msg->syncheadermsg_;
}
SyncLoseBlockAck::SyncLoseBlockAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncLoseBlockAck)
}
SyncLoseBlockAck::SyncLoseBlockAck(const SyncLoseBlockAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blocks().empty()) {
    blocks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blocks_);
  }
  if (from._internal_has_syncheadermsg()) {
    syncheadermsg_ = new ::SyncHeaderMsg(*from.syncheadermsg_);
  } else {
    syncheadermsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SyncLoseBlockAck)
}

void SyncLoseBlockAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncLoseBlockAck_ca_5fprotomsg_2eproto.base);
  blocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  syncheadermsg_ = nullptr;
}

SyncLoseBlockAck::~SyncLoseBlockAck() {
  // @@protoc_insertion_point(destructor:SyncLoseBlockAck)
  SharedDtor();
}

void SyncLoseBlockAck::SharedDtor() {
  blocks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syncheadermsg_;
}

void SyncLoseBlockAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncLoseBlockAck& SyncLoseBlockAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncLoseBlockAck_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SyncLoseBlockAck::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncLoseBlockAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && syncheadermsg_ != nullptr) {
    delete syncheadermsg_;
  }
  syncheadermsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SyncLoseBlockAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SyncHeaderMsg syncHeaderMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syncheadermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blocks();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncLoseBlockAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncLoseBlockAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::syncheadermsg(this), target, stream);
  }

  // bytes blocks = 2;
  if (this->blocks().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncLoseBlockAck)
  return target;
}

size_t SyncLoseBlockAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncLoseBlockAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blocks = 2;
  if (this->blocks().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blocks());
  }

  // .SyncHeaderMsg syncHeaderMsg = 1;
  if (this->has_syncheadermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syncheadermsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncLoseBlockAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncLoseBlockAck)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncLoseBlockAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncLoseBlockAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncLoseBlockAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncLoseBlockAck)
    MergeFrom(*source);
  }
}

void SyncLoseBlockAck::MergeFrom(const SyncLoseBlockAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncLoseBlockAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blocks().size() > 0) {

    blocks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blocks_);
  }
  if (from.has_syncheadermsg()) {
    _internal_mutable_syncheadermsg()->::SyncHeaderMsg::MergeFrom(from._internal_syncheadermsg());
  }
}

void SyncLoseBlockAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncLoseBlockAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncLoseBlockAck::CopyFrom(const SyncLoseBlockAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncLoseBlockAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncLoseBlockAck::IsInitialized() const {
  return true;
}

void SyncLoseBlockAck::InternalSwap(SyncLoseBlockAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blocks_.Swap(&other->blocks_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syncheadermsg_, other->syncheadermsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncLoseBlockAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignNodeMsg::InitAsDefaultInstance() {
}
class SignNodeMsg::_Internal {
 public:
};

SignNodeMsg::SignNodeMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignNodeMsg)
}
SignNodeMsg::SignNodeMsg(const SignNodeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signmsg().empty()) {
    signmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signmsg_);
  }
  signpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signpubkey().empty()) {
    signpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signpubkey_);
  }
  gasfee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gasfee().empty()) {
    gasfee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasfee_);
  }
  ::memcpy(&onlinetime_, &from.onlinetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&signsum_) -
    reinterpret_cast<char*>(&onlinetime_)) + sizeof(signsum_));
  // @@protoc_insertion_point(copy_constructor:SignNodeMsg)
}

void SignNodeMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignNodeMsg_ca_5fprotomsg_2eproto.base);
  signmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasfee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&onlinetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signsum_) -
      reinterpret_cast<char*>(&onlinetime_)) + sizeof(signsum_));
}

SignNodeMsg::~SignNodeMsg() {
  // @@protoc_insertion_point(destructor:SignNodeMsg)
  SharedDtor();
}

void SignNodeMsg::SharedDtor() {
  signmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasfee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignNodeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignNodeMsg& SignNodeMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignNodeMsg_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void SignNodeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SignNodeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gasfee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&onlinetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signsum_) -
      reinterpret_cast<char*>(&onlinetime_)) + sizeof(signsum_));
  _internal_metadata_.Clear();
}

const char* SignNodeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signPubKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gasFee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gasfee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SignNodeMsg.gasFee"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double onlineTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 awardTotal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          awardtotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 signSum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          signsum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignNodeMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignNodeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signMsg = 1;
  if (this->signmsg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signmsg(), target);
  }

  // bytes signPubKey = 2;
  if (this->signpubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signpubkey(), target);
  }

  // string gasFee = 3;
  if (this->gasfee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gasfee().data(), static_cast<int>(this->_internal_gasfee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SignNodeMsg.gasFee");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gasfee(), target);
  }

  // double onlineTime = 4;
  if (!(this->onlinetime() <= 0 && this->onlinetime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_onlinetime(), target);
  }

  // uint64 awardTotal = 5;
  if (this->awardtotal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_awardtotal(), target);
  }

  // uint64 signSum = 6;
  if (this->signsum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_signsum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignNodeMsg)
  return target;
}

size_t SignNodeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignNodeMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signMsg = 1;
  if (this->signmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signmsg());
  }

  // bytes signPubKey = 2;
  if (this->signpubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signpubkey());
  }

  // string gasFee = 3;
  if (this->gasfee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gasfee());
  }

  // double onlineTime = 4;
  if (!(this->onlinetime() <= 0 && this->onlinetime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 awardTotal = 5;
  if (this->awardtotal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_awardtotal());
  }

  // uint64 signSum = 6;
  if (this->signsum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_signsum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignNodeMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignNodeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SignNodeMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignNodeMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignNodeMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignNodeMsg)
    MergeFrom(*source);
  }
}

void SignNodeMsg::MergeFrom(const SignNodeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignNodeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signmsg().size() > 0) {

    signmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signmsg_);
  }
  if (from.signpubkey().size() > 0) {

    signpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signpubkey_);
  }
  if (from.gasfee().size() > 0) {

    gasfee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gasfee_);
  }
  if (!(from.onlinetime() <= 0 && from.onlinetime() >= 0)) {
    _internal_set_onlinetime(from._internal_onlinetime());
  }
  if (from.awardtotal() != 0) {
    _internal_set_awardtotal(from._internal_awardtotal());
  }
  if (from.signsum() != 0) {
    _internal_set_signsum(from._internal_signsum());
  }
}

void SignNodeMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignNodeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignNodeMsg::CopyFrom(const SignNodeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignNodeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignNodeMsg::IsInitialized() const {
  return true;
}

void SignNodeMsg::InternalSwap(SignNodeMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signmsg_.Swap(&other->signmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signpubkey_.Swap(&other->signpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gasfee_.Swap(&other->gasfee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(onlinetime_, other->onlinetime_);
  swap(awardtotal_, other->awardtotal_);
  swap(signsum_, other->signsum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignNodeMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TxMsg::InitAsDefaultInstance() {
}
class TxMsg::_Internal {
 public:
};

TxMsg::TxMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TxMsg)
}
TxMsg::TxMsg(const TxMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signnodemsg_(from.signnodemsg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx().empty()) {
    tx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  txencodehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txencodehash().empty()) {
    txencodehash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txencodehash_);
  }
  top_ = from.top_;
  // @@protoc_insertion_point(copy_constructor:TxMsg)
}

void TxMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TxMsg_ca_5fprotomsg_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txencodehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_ = PROTOBUF_ULONGLONG(0);
}

TxMsg::~TxMsg() {
  // @@protoc_insertion_point(destructor:TxMsg)
  SharedDtor();
}

void TxMsg::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txencodehash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxMsg& TxMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TxMsg_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void TxMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:TxMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signnodemsg_.Clear();
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txencodehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TxMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TxMsg.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txEncodeHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_txencodehash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TxMsg.txEncodeHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SignNodeMsg signNodeMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signnodemsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 top = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_id(), target);
  }

  // bytes Tx = 3;
  if (this->tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tx(), target);
  }

  // string txEncodeHash = 4;
  if (this->txencodehash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txencodehash().data(), static_cast<int>(this->_internal_txencodehash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TxMsg.txEncodeHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_txencodehash(), target);
  }

  // repeated .SignNodeMsg signNodeMsg = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signnodemsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_signnodemsg(i), target, stream);
  }

  // uint64 top = 6;
  if (this->top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxMsg)
  return target;
}

size_t TxMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SignNodeMsg signNodeMsg = 5;
  total_size += 1UL * this->_internal_signnodemsg_size();
  for (const auto& msg : this->signnodemsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes Tx = 3;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx());
  }

  // string txEncodeHash = 4;
  if (this->txencodehash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txencodehash());
  }

  // uint64 top = 6;
  if (this->top() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_top());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TxMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const TxMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TxMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TxMsg)
    MergeFrom(*source);
  }
}

void TxMsg::MergeFrom(const TxMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TxMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signnodemsg_.MergeFrom(from.signnodemsg_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  if (from.txencodehash().size() > 0) {

    txencodehash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txencodehash_);
  }
  if (from.top() != 0) {
    _internal_set_top(from._internal_top());
  }
}

void TxMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TxMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxMsg::CopyFrom(const TxMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsg::IsInitialized() const {
  return true;
}

void TxMsg::InternalSwap(TxMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signnodemsg_.InternalSwap(&other->signnodemsg_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tx_.Swap(&other->tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txencodehash_.Swap(&other->txencodehash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(top_, other->top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuileBlockBroadcastMsg::InitAsDefaultInstance() {
}
class BuileBlockBroadcastMsg::_Internal {
 public:
};

BuileBlockBroadcastMsg::BuileBlockBroadcastMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BuileBlockBroadcastMsg)
}
BuileBlockBroadcastMsg::BuileBlockBroadcastMsg(const BuileBlockBroadcastMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  blockraw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blockraw().empty()) {
    blockraw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blockraw_);
  }
  // @@protoc_insertion_point(copy_constructor:BuileBlockBroadcastMsg)
}

void BuileBlockBroadcastMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuileBlockBroadcastMsg_ca_5fprotomsg_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockraw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BuileBlockBroadcastMsg::~BuileBlockBroadcastMsg() {
  // @@protoc_insertion_point(destructor:BuileBlockBroadcastMsg)
  SharedDtor();
}

void BuileBlockBroadcastMsg::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockraw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuileBlockBroadcastMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuileBlockBroadcastMsg& BuileBlockBroadcastMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuileBlockBroadcastMsg_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void BuileBlockBroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:BuileBlockBroadcastMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockraw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BuileBlockBroadcastMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BuileBlockBroadcastMsg.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blockRaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blockraw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuileBlockBroadcastMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuileBlockBroadcastMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuileBlockBroadcastMsg.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // bytes blockRaw = 2;
  if (this->blockraw().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blockraw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuileBlockBroadcastMsg)
  return target;
}

size_t BuileBlockBroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuileBlockBroadcastMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes blockRaw = 2;
  if (this->blockraw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockraw());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuileBlockBroadcastMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuileBlockBroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BuileBlockBroadcastMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuileBlockBroadcastMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuileBlockBroadcastMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuileBlockBroadcastMsg)
    MergeFrom(*source);
  }
}

void BuileBlockBroadcastMsg::MergeFrom(const BuileBlockBroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuileBlockBroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.blockraw().size() > 0) {

    blockraw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blockraw_);
  }
}

void BuileBlockBroadcastMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuileBlockBroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuileBlockBroadcastMsg::CopyFrom(const BuileBlockBroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuileBlockBroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuileBlockBroadcastMsg::IsInitialized() const {
  return true;
}

void BuileBlockBroadcastMsg::InternalSwap(BuileBlockBroadcastMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockraw_.Swap(&other->blockraw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BuileBlockBroadcastMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDevInfoReq::InitAsDefaultInstance() {
}
class GetDevInfoReq::_Internal {
 public:
};

GetDevInfoReq::GetDevInfoReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetDevInfoReq)
}
GetDevInfoReq::GetDevInfoReq(const GetDevInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:GetDevInfoReq)
}

void GetDevInfoReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDevInfoReq_ca_5fprotomsg_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDevInfoReq::~GetDevInfoReq() {
  // @@protoc_insertion_point(destructor:GetDevInfoReq)
  SharedDtor();
}

void GetDevInfoReq::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDevInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDevInfoReq& GetDevInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDevInfoReq_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void GetDevInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GetDevInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetDevInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetDevInfoReq.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetDevInfoReq.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDevInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetDevInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetDevInfoReq.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetDevInfoReq.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetDevInfoReq)
  return target;
}

size_t GetDevInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetDevInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDevInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetDevInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDevInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDevInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetDevInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetDevInfoReq)
    MergeFrom(*source);
  }
}

void GetDevInfoReq::MergeFrom(const GetDevInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetDevInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void GetDevInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetDevInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDevInfoReq::CopyFrom(const GetDevInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetDevInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevInfoReq::IsInitialized() const {
  return true;
}

void GetDevInfoReq::InternalSwap(GetDevInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDevInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDevInfoAck::InitAsDefaultInstance() {
}
class GetDevInfoAck::_Internal {
 public:
};

GetDevInfoAck::GetDevInfoAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetDevInfoAck)
}
GetDevInfoAck::GetDevInfoAck(const GetDevInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  base58addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base58addr().empty()) {
    base58addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base58addr_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:GetDevInfoAck)
}

void GetDevInfoAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDevInfoAck_ca_5fprotomsg_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base58addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = PROTOBUF_ULONGLONG(0);
}

GetDevInfoAck::~GetDevInfoAck() {
  // @@protoc_insertion_point(destructor:GetDevInfoAck)
  SharedDtor();
}

void GetDevInfoAck::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base58addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDevInfoAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDevInfoAck& GetDevInfoAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDevInfoAck_ca_5fprotomsg_2eproto.base);
  return *internal_default_instance();
}


void GetDevInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:GetDevInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base58addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetDevInfoAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetDevInfoAck.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetDevInfoAck.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetDevInfoAck.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base58addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_base58addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetDevInfoAck.base58addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDevInfoAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetDevInfoAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetDevInfoAck.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetDevInfoAck.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // string hash = 4;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetDevInfoAck.hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // string base58addr = 5;
  if (this->base58addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base58addr().data(), static_cast<int>(this->_internal_base58addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetDevInfoAck.base58addr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_base58addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetDevInfoAck)
  return target;
}

size_t GetDevInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetDevInfoAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string base58addr = 5;
  if (this->base58addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base58addr());
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDevInfoAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetDevInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDevInfoAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDevInfoAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetDevInfoAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetDevInfoAck)
    MergeFrom(*source);
  }
}

void GetDevInfoAck::MergeFrom(const GetDevInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetDevInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.base58addr().size() > 0) {

    base58addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base58addr_);
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void GetDevInfoAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetDevInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDevInfoAck::CopyFrom(const GetDevInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetDevInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDevInfoAck::IsInitialized() const {
  return true;
}

void GetDevInfoAck::InternalSwap(GetDevInfoAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base58addr_.Swap(&other->base58addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDevInfoAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SyncHeaderMsg* Arena::CreateMaybeMessage< ::SyncHeaderMsg >(Arena* arena) {
  return Arena::CreateInternal< ::SyncHeaderMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CheckHash* Arena::CreateMaybeMessage< ::CheckHash >(Arena* arena) {
  return Arena::CreateInternal< ::CheckHash >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncGetPledgeNodeReq* Arena::CreateMaybeMessage< ::SyncGetPledgeNodeReq >(Arena* arena) {
  return Arena::CreateInternal< ::SyncGetPledgeNodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncGetPledgeNodeAck* Arena::CreateMaybeMessage< ::SyncGetPledgeNodeAck >(Arena* arena) {
  return Arena::CreateInternal< ::SyncGetPledgeNodeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncVerifyPledgeNodeReq* Arena::CreateMaybeMessage< ::SyncVerifyPledgeNodeReq >(Arena* arena) {
  return Arena::CreateInternal< ::SyncVerifyPledgeNodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncVerifyPledgeNodeAck* Arena::CreateMaybeMessage< ::SyncVerifyPledgeNodeAck >(Arena* arena) {
  return Arena::CreateInternal< ::SyncVerifyPledgeNodeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncGetnodeInfoReq* Arena::CreateMaybeMessage< ::SyncGetnodeInfoReq >(Arena* arena) {
  return Arena::CreateInternal< ::SyncGetnodeInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncGetnodeInfoAck* Arena::CreateMaybeMessage< ::SyncGetnodeInfoAck >(Arena* arena) {
  return Arena::CreateInternal< ::SyncGetnodeInfoAck >(arena);
}
template<> PROTOBUF_NOINLINE ::VerifyReliableNodeReq* Arena::CreateMaybeMessage< ::VerifyReliableNodeReq >(Arena* arena) {
  return Arena::CreateInternal< ::VerifyReliableNodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::VerifyReliableNodeAck* Arena::CreateMaybeMessage< ::VerifyReliableNodeAck >(Arena* arena) {
  return Arena::CreateInternal< ::VerifyReliableNodeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncBlockInfoReq* Arena::CreateMaybeMessage< ::SyncBlockInfoReq >(Arena* arena) {
  return Arena::CreateInternal< ::SyncBlockInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncBlockInfoAck* Arena::CreateMaybeMessage< ::SyncBlockInfoAck >(Arena* arena) {
  return Arena::CreateInternal< ::SyncBlockInfoAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncLoseBlockReq* Arena::CreateMaybeMessage< ::SyncLoseBlockReq >(Arena* arena) {
  return Arena::CreateInternal< ::SyncLoseBlockReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncLoseBlockAck* Arena::CreateMaybeMessage< ::SyncLoseBlockAck >(Arena* arena) {
  return Arena::CreateInternal< ::SyncLoseBlockAck >(arena);
}
template<> PROTOBUF_NOINLINE ::SignNodeMsg* Arena::CreateMaybeMessage< ::SignNodeMsg >(Arena* arena) {
  return Arena::CreateInternal< ::SignNodeMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::TxMsg* Arena::CreateMaybeMessage< ::TxMsg >(Arena* arena) {
  return Arena::CreateInternal< ::TxMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::BuileBlockBroadcastMsg* Arena::CreateMaybeMessage< ::BuileBlockBroadcastMsg >(Arena* arena) {
  return Arena::CreateInternal< ::BuileBlockBroadcastMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::GetDevInfoReq* Arena::CreateMaybeMessage< ::GetDevInfoReq >(Arena* arena) {
  return Arena::CreateInternal< ::GetDevInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GetDevInfoAck* Arena::CreateMaybeMessage< ::GetDevInfoAck >(Arena* arena) {
  return Arena::CreateInternal< ::GetDevInfoAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
